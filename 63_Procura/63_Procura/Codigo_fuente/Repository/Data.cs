using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ApplicationBlocks.Data;
using System.Data.SqlClient;

namespace Repository
{
    public class Data
    {
        private readonly string strConnection_Acceso = "";
        private readonly string strConnection = "";
        public Data()
        {
            Repository.DataAccess DA = new Repository.DataAccess();
            strConnection_Acceso = DA.ReturnConnectionString_Acceso();
            strConnection = DA.ReturnConnectionString_SAFNET();
        }

        #region GNLP

        public DataSet Ayuda_Gnlp_FuenteFinanciamiento(string strCodEmpresa,
                                            string strCodProyecto
                        )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Gnlp.spp_help_msto_FuenteFinanciamiento",
                                            strCodEmpresa,
                                            strCodProyecto
                                            );
        }

        public DataSet Lista_CeCo_Gnlp(string strCodEmpresa,
                            string strAñoProceso,
                            string strPeriodo,
                            string strCodCentroCosto

                          )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_msto_CentroCosto_Gnlp",
                                                    strCodEmpresa,
                                                    strAñoProceso,
                                                    strPeriodo,
                                                    strCodCentroCosto
                                                )
                  )
            {
                return ds;
            }
        }

        public DataSet Lista_CeCo_Gnlp_Total(string strCodEmpresa,
                    string strAñoProceso,
                    string strPeriodo

                  )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_msto_CentroCosto_Gnlp_Total",
                                                    strCodEmpresa,
                                                    strAñoProceso,
                                                    strPeriodo
                                                )
                  )
            {
                return ds;
            }
        }


        public Boolean Elimina_CentroCosto_Gnlp(string strCodEmpresa,
                                string strAñoProceso,
                                string strPeriodo,
                                string strCodCeCo,
                                string strCodGnlp
                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_del_mvto_CentroCosto_Gnlp]",
                                                strCodEmpresa,
                                                strAñoProceso,
                                                strPeriodo,
                                                strCodCeCo,
                                                strCodGnlp
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Graba_CentroCosto_Gnlp(string strCodEmpresa,
                                        string strAñoProceso,
                                        string strPeriodo,
                                        string strCodCeCo,
                                        string strCodProyecto
                                      )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_ins_mvto_CentroCosto_Gnlp]",
                                                strCodEmpresa,
                                                strAñoProceso,
                                                strPeriodo,
                                                strCodCeCo,
                                                strCodProyecto
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }


        public DataSet Ayuda_GNLP(string strCodCompañia,
                                    string strAñoProceso,
                                    string strCodTipoFormulacion,
                                    string strCodSubTipoFormulacion
                          )
        {

            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("GNLP.spp_help_msto_GNLP", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodSubTipoFormulacion", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;
            da.SelectCommand.Parameters["@cCodSubTipoFormulacion"].Value = strCodSubTipoFormulacion;


            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);
            return ds;
        }

        public DataSet Ayuda_CentroCosto_Gnlp(string strCodCompañia,
                            string strAñoProceso,
                            string strPeriodo,
                           string strCodCentroCosto
                          )
        {

            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_help_msto_CentroCosto_Gnlp", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroCosto", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cCodCentroCosto"].Value = strCodCentroCosto;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);
            return ds;
        }


        public Model.GNLP Recupera_GNLP(string strCodEmpresa,
                                         string strCodGNLP
                                        )
        {
            DataTable dt;

            dt = SqlHelper.ExecuteDataset(strConnection,
                                                "GNLP.spp_sel_msto_GNLP",
                                                strCodEmpresa,
                                                strCodGNLP
                                                ).Tables[0];


            var GNLP = (from order in dt.AsEnumerable()
                        select new Model.GNLP
                        {
                            IidGNLP = order.Field<int>("IidGNLP"),
                            CcodGNLP = order.Field<string>("CcodGNLP"),
                            CcodGNLP_Inicio = order.Field<string>("CcodGNLP_Inicio"),
                            TnomGNLP = order.Field<string>("TnomGNLP"),
                            VnomCortoGNLP = order.Field<string>("VnomCortoGNLP"),
                            ItipoGNLP = order.Field<int>("ItipoGNLP"),
                            CcodEmpresa = order.Field<string>("CcodEmpresa"),
                            CcodEmpresaContratante = order.Field<string>("CcodEmpresaContratante"),
                            CcodGrupoGNLP = order.Field<string>("CcodGrupoGNLP"),
                            CcodMacroGNLP = order.Field<string>("CcodMacroGNLP"),
                            TObjGNLP = order.Field<string>("TObjGNLP"),
                            CcodNaturalezaGNLP = order.Field<string>("CcodNaturalezaGNLP"),
                            CcodClaseGNLP = order.Field<string>("CcodClaseGNLP"),
                            CcodCadenaFuncionalGNLP = order.Field<string>("CcodCadenaFuncionalGNLP"),
                            CcodUnidadFormuladoraGNLP = order.Field<string>("CcodUnidadFormuladoraGNLP"),
                            CcodUnidadEjecutoraGNLP = order.Field<string>("CcodUnidadEjecutoraGNLP"),
                            CcodTipoMoneda_Viable = order.Field<string>("CcodTipoMoneda_Viable"),
                            FimpViable = order.Field<decimal>("FimpViable"),
                            CcodTipoMoneda_Final = order.Field<string>("CcodTipoMoneda_Final"),
                            FimpFinal = order.Field<decimal>("FimpFinal"),
                            Tdescripcion = order.Field<string>("Tdescripcion"),
                            Tobjetivo = order.Field<string>("Tobjetivo"),
                            TobjetivoEstrategico = order.Field<string>("TobjetivoEstrategico"),
                            TbeneficioCualitativo = order.Field<string>("TbeneficioCualitativo"),
                            TbeneficioCuantitativo = order.Field<string>("TbeneficioCuantitativo"),
                            CcodUnico = order.Field<string>("CcodUnico"),
                            CcodOrden = order.Field<string>("CcodOrden"),
                            CnumOrden = order.Field<string>("CnumOrden"),
                            CcodEstadoActual = order.Field<string>("CcodEstadoActual"),
                            CperiodoInicio = order.Field<string>("CperiodoInicio"),
                            CperiodoFinal = order.Field<string>("CperiodoFinal"),
                            Ilatitud = order.Field<double>("Ilatitud"),
                            Ilongitud = order.Field<double>("Ilongitud"),
                            Tobservacion = order.Field<string>("Tobservacion")
                        }
                        ).SingleOrDefault();

            return GNLP;

        }

        public DataSet Combo_ClaseOrden(string strCodEmpresa, string strCodTipoFormulacion)
        {
            return SqlHelper.ExecuteDataset(strConnection, "GNLP.spp_cbo_ctrl_ClaseOrden",
                                                            strCodEmpresa,
                                                            strCodTipoFormulacion
                                                            );

        }

        public DataSet Lista_GNLP_FuenteFinanciamiento(string strCodEmpresa,
                                    string strCodGNLP

                          )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "GNLP.spp_lst_msto_GNLP_FuenteFinanciamiento",
                                                    strCodEmpresa,
                                                    strCodGNLP
                                                )
                  )
            {
                return ds;
            }
        }

        public Boolean Graba_GNLP_FuenteFinanciamiento(string strCodEmpresa,
                                        string strCodGNLP,
                                        string strCodFuenteFinanciamiento
                                      )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[GNLP].[spp_ins_msto_GNLP_FuenteFinanciamiento]",
                                                strCodEmpresa,
                                                strCodGNLP,
                                                strCodFuenteFinanciamiento
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Elimina_GNLP_FuenteFinanciamiento(string strCodEmpresa,
                                        string strCodGNLP,
                                        string strCodFuenteFinanciamiento
                                      )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[GNLP].[spp_del_msto_GNLP_FuenteFinanciamiento]",
                                                strCodEmpresa,
                                                strCodGNLP,
                                                strCodFuenteFinanciamiento
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Model.GNLP Graba_GNLP(Model.GNLP obj,
                                string strAñoProceso,
                                string strPeriodoProceso,
                                string strCodCentroCosto,
                                bool LlamadaDesdeHojaTrabajo
                             )
        {
            Model.GNLP MG = new Model.GNLP();

            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "GNLP.spp_ins_msto_GNLP", obj.ItipoGNLP,
                                                                                                    obj.CcodEmpresa,
                                                                                                    obj.CcodEmpresaContratante,
                                                                                                    obj.CcodGrupoGNLP,
                                                                                                    obj.CcodGNLP,
                                                                                                    obj.CcodGNLP_Inicio,
                                                                                                    obj.TnomGNLP,
                                                                                                    obj.VnomCortoGNLP,
                                                                                                    obj.CcodMacroGNLP,
                                                                                                    obj.TObjGNLP,
                                                                                                    obj.CcodNaturalezaGNLP,
                                                                                                    obj.CcodClaseGNLP,
                                                                                                    obj.CcodCadenaFuncionalGNLP,
                                                                                                    obj.CcodUnidadFormuladoraGNLP,
                                                                                                    obj.CcodUnidadEjecutoraGNLP,
                                                                                                    obj.DfecInicio,
                                                                                                    obj.DfecVencimiento,
                                                                                                    obj.DfecCierre,
                                                                                                    obj.CcodTipoMoneda_Viable,
                                                                                                    obj.FimpViable,
                                                                                                    obj.CcodTipoMoneda_Final,
                                                                                                    obj.FimpFinal,
                                                                                                    obj.Tdescripcion,
                                                                                                    obj.Tobjetivo,
                                                                                                    obj.TobjetivoEstrategico,
                                                                                                    obj.TbeneficioCualitativo,
                                                                                                    obj.TbeneficioCuantitativo,
                                                                                                    obj.CcodUnico,
                                                                                                    obj.CcodOrden,
                                                                                                    obj.CnumOrden,
                                                                                                    obj.CcodEstadoActual,
                                                                                                    obj.CperiodoInicio,
                                                                                                    obj.CperiodoFinal,
                                                                                                    obj.Ilatitud,
                                                                                                    obj.Ilongitud,
                                                                                                    obj.Tobservacion,
                                                                                                    strAñoProceso,
                                                                                                    strPeriodoProceso,
                                                                                                    strCodCentroCosto,
                                                                                                    LlamadaDesdeHojaTrabajo
                                                );

                MG.IidGNLP = Convert.ToInt32(dt.Rows[0][0]);
                MG.CcodGNLP = Convert.ToString(dt.Rows[0][1]);
                MG.VnomCortoGNLP = Convert.ToString(dt.Rows[0][2]);

            }
            catch
            {
                MG.IidGNLP = 0;
            }
            return MG;
        }
        public Model.GNLP Modifica_GNLP(Model.GNLP obj)
        {

            Model.GNLP MG = new Model.GNLP();

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "GNLP.spp_upd_msto_GNLP", obj.IidGNLP,
                                                                                           obj.CcodEmpresa,
                                                                                            obj.CcodEmpresaContratante,
                                                                                            obj.ItipoGNLP,
                                                                                            obj.CcodGrupoGNLP,
                                                                                            obj.CcodGNLP,
                                                                                            obj.CcodGNLP_Inicio,
                                                                                            obj.TnomGNLP,
                                                                                            obj.VnomCortoGNLP,
                                                                                            obj.CcodMacroGNLP,
                                                                                            obj.TObjGNLP,
                                                                                            obj.CcodNaturalezaGNLP,
                                                                                            obj.CcodClaseGNLP,
                                                                                            obj.CcodCadenaFuncionalGNLP,
                                                                                            obj.CcodUnidadFormuladoraGNLP,
                                                                                            obj.CcodUnidadEjecutoraGNLP,
                                                                                            obj.DfecInicio,
                                                                                            obj.DfecVencimiento,
                                                                                            obj.DfecCierre,
                                                                                            obj.CcodTipoMoneda_Viable,
                                                                                            obj.FimpViable,
                                                                                            obj.CcodTipoMoneda_Final,
                                                                                            obj.FimpFinal,
                                                                                            obj.Tdescripcion,
                                                                                            obj.Tobjetivo,
                                                                                            obj.TobjetivoEstrategico,
                                                                                            obj.TbeneficioCualitativo,
                                                                                            obj.TbeneficioCuantitativo,
                                                                                            obj.CcodUnico,
                                                                                            obj.CcodOrden,
                                                                                            obj.CnumOrden,
                                                                                            obj.CcodEstadoActual,
                                                                                            obj.CperiodoInicio,
                                                                                            obj.CperiodoFinal,
                                                                                            obj.Ilatitud,
                                                                                            obj.Ilongitud,
                                                                                            obj.Tobservacion
                                                          );
                MG.IidGNLP = obj.IidGNLP;
                MG.CcodGNLP = obj.CcodGNLP;
            }
            catch
            {
                MG.IidGNLP = 0;
            }
            return MG;
        }

        public int Elimina_GNLP(int Id)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                           "GNLP.spp_del_msto_GNLP",
                                            Id
                                        );
            }
            catch (Exception)
            {
                Id = 0;
            }
            return Id;
        }

        public DataSet Lista_GNLP(string strCodEmpresa,
                              int intTipoGNLP
                             )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("GNLP.spp_lst_msto_GNLP", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@iTipoGNLP", SqlDbType.Int);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodEmpresa;
            da.SelectCommand.Parameters["@iTipoGNLP"].Value = intTipoGNLP;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;
        }



        #endregion

        #region ConfiguracionHojaTrabajo
        public List<Model.Configuracion_HojaTrabajo> lista_Configuracion_HojaTrabajo_OcultaColumna( string strCodEmpresa,
                                                                     string strCodTipoFormulacion,
                                                                     string strCodSubTipoFormulacion,
                                                                     bool blnManejaVariosCentroCostos,
                                                                     bool blnManejaVariosProyectos
                                                                    )
        {
            DataTable dt;

            dt = SqlHelper.ExecuteDataset(strConnection,
                                                "formulacion.spp_lst_cnfg_control_hojatrabajo_OcultaColumnas",
                                                strCodEmpresa,
                                                strCodTipoFormulacion,
                                                strCodSubTipoFormulacion,
                                                blnManejaVariosCentroCostos,
                                                blnManejaVariosProyectos
                                                ).Tables[0];


            var lista = (from order in dt.AsEnumerable()
                         select new Model.Configuracion_HojaTrabajo
                         {
                             VtituloHoja = order.Field<string>("VtituloHoja"),
                             IfilaInicialHoja = order.Field<int>("IfilaInicialHoja"),
                             CcodTipoConfiguracion = order.Field<string>("CcodTipoConfiguracion"),
                             Icolumna = order.Field<int>("Icolumna"),
                             Bactivo = order.Field<bool>("Bactivo"),
                             Cclave = order.Field<string>("CClave"),
                             CtipoDato = order.Field<string>("CtipoDato")
                         }
                        ).ToList();

            return lista;
        }

        public List<Model.Configuracion_HojaTrabajo> lista_Configuracion_HojaTrabajo_ProtegeColumna(string strCodEmpresa,
                                                                     string strCodTipoFormulacion,
                                                                     string strCodSubTipoFormulacion,
                                                                     bool blnManejaVariosCentroCostos,
                                                                     bool blnManejaVariosProyectos
                                                                    )
        {
            DataTable dt;

            dt = SqlHelper.ExecuteDataset(strConnection,
                                                "formulacion.spp_lst_cnfg_control_hojatrabajo_ProtegeColumnas",
                                                strCodEmpresa,
                                                strCodTipoFormulacion,
                                                strCodSubTipoFormulacion,
                                                blnManejaVariosCentroCostos,
                                                blnManejaVariosProyectos
                                                ).Tables[0];


            var lista = (from order in dt.AsEnumerable()
                         select new Model.Configuracion_HojaTrabajo
                         {
                             VtituloHoja = order.Field<string>("VtituloHoja"),
                             IfilaInicialHoja = order.Field<int>("IfilaInicialHoja"),
                             CcodTipoConfiguracion = order.Field<string>("CcodTipoConfiguracion"),
                             Icolumna = order.Field<int>("Icolumna"),
                             Bactivo = order.Field<bool>("Bactivo"),
                             Cclave = order.Field<string>("CClave"),
                             CtipoDato = order.Field<string>("CtipoDato")
                         }
                        ).ToList();

            return lista;
        }

        public List<Model.Configuracion_HojaTrabajo> lista_Configuracion_HojaTrabajo_ValidaColumna(string strCodEmpresa,
                                                                     string strCodTipoFormulacion,
                                                                     string strCodSubTipoFormulacion,
                                                                     bool blnManejaVariosCentroCostos,
                                                                     bool blnManejaVariosProyectos
                                                                    )
        {
            DataTable dt;

            dt = SqlHelper.ExecuteDataset(strConnection,
                                                "formulacion.spp_lst_cnfg_control_hojatrabajo_ValidaColumnas",
                                                strCodEmpresa,
                                                strCodTipoFormulacion,
                                                strCodSubTipoFormulacion,
                                                blnManejaVariosCentroCostos,
                                                blnManejaVariosProyectos
                                                ).Tables[0];


            var lista = (from order in dt.AsEnumerable()
                         select new Model.Configuracion_HojaTrabajo
                         {
                             VtituloHoja = order.Field<string>("VtituloHoja"),
                             IfilaInicialHoja = order.Field<int>("IfilaInicialHoja"),
                             CcodTipoConfiguracion = order.Field<string>("CcodTipoConfiguracion"),
                             Icolumna = order.Field<int>("Icolumna"),
                             Bactivo = order.Field<bool>("Bactivo"),
                             Cclave = order.Field<string>("CClave"),
                             CtipoDato = order.Field<string>("CtipoDato")
                         }
                        ).ToList();

            return lista;
        }

        #endregion

        #region Usuario_Empresa

        public bool Modifica_Cntraseña_Empresa( string strCodEmpresa,
                                                string strUsuario,
                                                string strContraseña
                                              )
        {
            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Login.spp_upd_msto_Usuario_Contraseña_Empresa",
                                          strCodEmpresa,
                                          strUsuario,
                                          strContraseña
                                          );

            }
            catch (Exception)
            {
                blnResult = false;
            }


            return blnResult;
        }

        public Model.Usuario_Empresa Recupera_Usuario_Empresa(int intIdUsuario)
        {
            DataTable dt = new DataTable();
            Model.Usuario_Empresa obj = new Model.Usuario_Empresa();

            using (dt = SqlHelper.ExecuteDataTable(strConnection_Acceso, "Login.spp_sel_msto_Usuario_Empresa", intIdUsuario))
            {
                if (dt.Rows.Count > 0)
                {
                    obj.IidUsuario = Convert.ToInt32(dt.Rows[0]["IidUsuario"]);
                    obj.Usuario = Convert.ToString(dt.Rows[0]["Usuario"]);
                    obj.Clave = Convert.ToString(dt.Rows[0]["Clave"]);
                    obj.Nombre = Convert.ToString(dt.Rows[0]["Nombre"]);
                    obj.Cargo = Convert.ToString(dt.Rows[0]["Cargo"]);
                    obj.CcodCeCo = Convert.ToString(dt.Rows[0]["cCodCeco"]);
                    obj.VnomCeCo = Convert.ToString(dt.Rows[0]["vNomCeCo"]);
                    obj.CcodCeGe = Convert.ToString(dt.Rows[0]["cCodCeGe"]);
                    obj.VnomCeGe = Convert.ToString(dt.Rows[0]["vNomCeGe"]);
                    obj.CcodGerencia = Convert.ToString(dt.Rows[0]["cCodGerencia"]);
                    obj.VnomGerencia = Convert.ToString(dt.Rows[0]["vNomGerencia"]);
                }
            }
            return obj;

        }
        public Model.Usuario_Empresa Recupera_Usuario_Empresa_Codigo(string strCodEmpresa,
                                                     string strLogUsuario)
        {
            DataTable dt = new DataTable();
            Model.Usuario_Empresa obj = new Model.Usuario_Empresa();

            using (dt = SqlHelper.ExecuteDataTable(strConnection, "Login.spp_sel_msto_Usuario_Empresa_Codigo", strCodEmpresa, strLogUsuario))
            {
                if (dt.Rows.Count > 0)
                {
                    obj.IidUsuario = Convert.ToInt32(dt.Rows[0]["IidUsuario"]);
                    obj.Usuario = Convert.ToString(dt.Rows[0]["Usuario"]);
                    obj.Clave = Convert.ToString(dt.Rows[0]["Clave"]);
                    obj.Nombre = Convert.ToString(dt.Rows[0]["Nombre"]);
                    obj.Cargo = Convert.ToString(dt.Rows[0]["Cargo"]);
                    obj.CcodCeCo = Convert.ToString(dt.Rows[0]["cCodCeco"]);
                    obj.VnomCeCo = Convert.ToString(dt.Rows[0]["vNomCeCo"]);
                    obj.CcodCeGe = Convert.ToString(dt.Rows[0]["cCodCeGe"]);
                    obj.VnomCeGe = Convert.ToString(dt.Rows[0]["vNomCeGe"]);
                    obj.CcodGerencia = Convert.ToString(dt.Rows[0]["cCodGerencia"]);
                    obj.VnomGerencia = Convert.ToString(dt.Rows[0]["vNomGerencia"]);
                }
            }
            return obj;

        }
        public bool Elimina_Usuario_Empresa(int intidUsuario)
        {
            Boolean resultado = true;

            try
            {
                SqlHelper.ExecuteScalar(strConnection, "[Login].[spp_del_msto_Usuario_Empresa]", intidUsuario);

            }
            catch
            {
                resultado = false;
            }
            return resultado;
        }

        public int Graba_Usuario_Empresa(Model.Usuario_Empresa obj)
        {
            int intIdUsuario = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "[Login].[spp_ins_msto_Usuario_Empresa]", 
                                                                obj.CcodEmpresa,
                                                                obj.Usuario,
                                                                obj.Nombre,
                                                                obj.Cargo,
                                                                obj.CcodCeCo

                                                          );
                intIdUsuario = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdUsuario = 0;
            }
            return intIdUsuario;
        }

        public int Modifica_Usuario_Empresa(Model.Usuario_Empresa obj)
        {
            int intIdUsuario = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "[Login].[spp_upd_msto_Usuario_Empresa]",
                                                                obj.IidUsuario,
                                                                obj.CcodEmpresa,
                                                                obj.Usuario,
                                                                obj.Nombre,
                                                                obj.Cargo,
                                                                obj.CcodCeCo
                                                          );
                intIdUsuario = obj.IidUsuario;
            }
            catch
            {
                intIdUsuario = 0;
            }
            return intIdUsuario;
        }

        public DataSet Lista_Usuario_Empresa(string strCodEmpresa)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                "Login.spp_lst_msto_Usuario_Empresa",
                                                strCodEmpresa
                                                )) ;
            {
                return ds;
            }
        }
        #endregion

        #region ACCESO

        #region Empresa
        public DataSet Combo_Empresa_DataTable()
        {
            DataSet ds = new DataSet();

            try
            {
                ds = SqlHelper.ExecuteDataset(strConnection, "Login.spp_cbo_cnfg_Empresa_Login");
            }
            catch (Exception ex)
            {
                ds = null;
                
            }


            
            
            return ds;
            

        }

        public Model.Empresa_Login Recupera_Empresa_Login(string strCodEmpresa)
        {
            DataTable dt;

            dt = SqlHelper.ExecuteDataset(strConnection,
                                                "Login.spp_sel_cnfg_Empresa_Login",
                                                strCodEmpresa
                                                ).Tables[0];


            var empresa = (from order in dt.AsEnumerable()
                              select new Model.Empresa_Login
                              {
                                  IidEmpresa = order.Field<int>("IidEmpresa"),
                                  CcodEmpresa = order.Field<string>("CcodEmpresa"),
                                  VnomEmpresa = order.Field<string>("VnomEmpresa"),
                                  Pimg_LogoIzquierdo = order.Field<byte[]>("Pimg_LogoIzquierdo"),
                                  Pimg_LogoCentro = order.Field<byte[]>("Pimg_LogoCentro"),
                                  Pimg_LogoMenu = order.Field<byte[]>("Pimg_LogoMenu"),
                              }
                        ).SingleOrDefault();

            return empresa;

        }

        public bool Modifica_Empresa_Login(Model.Empresa_Login obj)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                            "Login.spp_upd_cnfg_Empresa_Login",
                                            obj.CcodEmpresa,
                                            obj.VnomEmpresa,
                                            obj.Pimg_LogoIzquierdo,
                                            obj.Pimg_LogoCentro,
                                            obj.Pimg_LogoMenu
                                         );
            }
            catch (Exception)
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region Usuario
        public Model.Usuario Recupera_Usuario(int intIdeUsuario)
        {
            DataTable dt = new DataTable();
            Model.Usuario obj = new Model.Usuario();

            using (dt = SqlHelper.ExecuteDataTable(strConnection_Acceso, "Login.spp_Sel_Cnfg_Usuario", intIdeUsuario))
            {
                if (dt.Rows.Count > 0)
                {
                    obj.iIdUsuario = Convert.ToInt32(dt.Rows[0][0]);
                    obj.vLogUsuario = Convert.ToString(dt.Rows[0][1]);
                    obj.tClaUsuario = Convert.ToString(dt.Rows[0][2]);
                    obj.tPasUsuario = Convert.ToString(dt.Rows[0][3]);
                    obj.tVecUsuario = Convert.ToString(dt.Rows[0][4]);
                    obj.cCodTipoEmpleado = Convert.ToString(dt.Rows[0][5]);
                    obj.cCodEmpleado = Convert.ToString(dt.Rows[0][6]);
                    obj.vDesEmpleado = Convert.ToString(dt.Rows[0][7]);
                    obj.bEstado = Convert.ToBoolean(dt.Rows[0][8]);
                }
            }
            return obj;
        }

        public Model.Usuario Recupera_Usuario_Codigo(string strCodEmpresa,
                                                         string strLogUsuario)
        {
            DataTable dt = new DataTable();
            Model.Usuario obj = new Model.Usuario();

            using (dt = SqlHelper.ExecuteDataTable(strConnection_Acceso, "Login.spp_Sel_Cnfg_Usuario_Codigo", strCodEmpresa, strLogUsuario))
            {
                if (dt.Rows.Count > 0)
                {
                    obj.iIdUsuario = Convert.ToInt32(dt.Rows[0][0]);
                    obj.vLogUsuario = Convert.ToString(dt.Rows[0][1]);
                    obj.tClaUsuario = Convert.ToString(dt.Rows[0][2]);
                    obj.tPasUsuario = Convert.ToString(dt.Rows[0][3]);
                    obj.tVecUsuario = Convert.ToString(dt.Rows[0][4]);
                    obj.cCodTipoEmpleado = Convert.ToString(dt.Rows[0][5]);
                    obj.cCodEmpleado = Convert.ToString(dt.Rows[0][6]);
                    obj.vDesEmpleado = Convert.ToString(dt.Rows[0][7]);
                    obj.bEstado = Convert.ToBoolean(dt.Rows[0][8]);
                }
            }


            return obj;

        }



        public DataSet Combo_Usuario_Modulo_DataTable(string strCodEmpresa, string strLogUsuario)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection_Acceso, "Login.spp_Cbo_Cnfg_Usuario_Modulo", strCodEmpresa, strLogUsuario))
            {
                return ds;
            }

        }

        public DataSet OpcionesMenu_Top(string strCodEmpresa,
                                    string strCodUsuario,
                                    string strCodModulo)
        {
            DataSet ds = new DataSet();

            using (ds = SqlHelper.ExecuteDataset(strConnection_Acceso,
                                "Login.spp_lst_cnfg_Usuario_Opcion_Menu_Top",
                                strCodEmpresa,
                                strCodUsuario,
                                strCodModulo
                             ))
            {
                return ds;
            }


        }

        public DataSet OpcionesMenu_Lateral(string strCodEmpresa,
                                    string strCodUsuario,
                                    string strCodModulo)
        {
            DataSet ds = new DataSet();

            using (ds = SqlHelper.ExecuteDataset(strConnection_Acceso,
                                                "Login.spp_lst_cnfg_Usuario_Opcion_Menu_Left",
                                                strCodEmpresa,
                                                strCodUsuario,
                                                strCodModulo
                                             ))
            {
                return ds;
            }


        }

        public Model.Usuario GetUsuario(string strLogUsuario)
        {
            DataTable dt = new DataTable();
            Model.Usuario objMES = new Model.Usuario();

            dt = SqlHelper.ExecuteDataTable(strConnection_Acceso, "Login.spp_sel_Cnfg_Usuario_Codigo_Smart", strLogUsuario);

            foreach (DataRow row in dt.Rows)
            {
                objMES = GetUsuDataTableRow(row);
            }

            return objMES;
        }

        private Model.Usuario GetUsuDataTableRow(DataRow dr)
        {
            Model.Usuario objMES = new Model.Usuario();
            objMES.iIdUsuario = Convert.ToInt32(dr["iIdUsuario"]);
            objMES.vLogUsuario = Convert.ToString(dr["vLogUsuario"]);
            objMES.tClaUsuario = Convert.ToString(dr["tClaUsuario"]);
            objMES.tPasUsuario = Convert.ToString(dr["tPasUsuario"]);
            objMES.tVecUsuario = Convert.ToString(dr["tVecUsuario"]);
            objMES.cCodTipoEmpleado = Convert.ToString(dr["cCodTipoEmpleado"]);
            objMES.cCodEmpleado = Convert.ToString(dr["cCodEmpleado"]);
            objMES.vDesEmpleado = Convert.ToString(dr["vNomEmpleado"]);
            objMES.bEstado = Convert.ToBoolean(dr["bEstado"]);

            return (objMES);
        }

        public bool Modifica_Usuario(Model.Usuario objU
                           )
        {
            bool Modifica = true;

            try
            {
                SqlHelper.ExecuteScalar(strConnection_Acceso,
                                            "Login.spp_Upd_Cnfg_Usuario",
                                            objU.iIdUsuario,
                                            objU.cCodEmpresa,
                                            objU.vLogUsuario,
                                            objU.tClaUsuario,
                                            objU.tPasUsuario,
                                            objU.tVecUsuario,
                                            objU.bEstado
                                        );
            }
            catch (Exception)
            {
                Modifica = false;

            }
            return Modifica;
        }
        #endregion
        #endregion

        #region TipoFormulacion
        public DataSet Combo_SubTipoFormulacion(string strCodEmpresa,
                                                    string strCodTipoFormulacion
                                                )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_combo_ctrl_SubTipoFormulacion",strCodEmpresa,strCodTipoFormulacion);
        }
        #endregion


        #region GENERAL
        #region Gerencia
        public DataSet Combo_Gerencia(string strCodEmpresa)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_cbo_msto_Gerencia",
                                      strCodEmpresa
                                     );

            return ds;
        }

        #endregion
        #region "TipoMoneda"
        public DataSet Ayuda_TipoMoneda()
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "General.spp_help_ctrl_TipoMoneda"
                                     );

            return ds;
        }
        public DataSet Combo_TipoMoneda()
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "General.spp_cbo_ctrl_TipoMoneda"
                                     );

            return ds;
        }
        public Model.TipoMoneda Recupera_TipoMoneda(int intIdTipoMoneda)
        {
            DataTable dt = new DataTable();
            Model.TipoMoneda obj = new Model.TipoMoneda();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_TipoMoneda", intIdTipoMoneda);

            if (dt.Rows.Count == 0)
            {
                obj.iIdTipoMoneda = 0;
                obj.cCodTipoMoneda = "";
                obj.vNomTipoMoneda = "";
            }
            else
            {
                obj.iIdTipoMoneda = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodTipoMoneda = Convert.ToString(dt.Rows[0][1]);
                obj.vNomTipoMoneda = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }


        public Model.TipoMoneda Recupera_TipoMoneda_Codigo(string strCodTipoMoneda)
        {
            DataTable dt = new DataTable();
            Model.TipoMoneda obj = new Model.TipoMoneda();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_TipoMoneda_Codigo", strCodTipoMoneda);

            if (dt.Rows.Count == 0)
            {
                obj.iIdTipoMoneda = 0;
                obj.cCodTipoMoneda = "";
                obj.vNomTipoMoneda = "";
            }
            else
            {
                obj.iIdTipoMoneda = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodTipoMoneda = Convert.ToString(dt.Rows[0][1]);
                obj.vNomTipoMoneda = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public int Graba_TipoMoneda(Model.TipoMoneda obj)
        {

            int intIdTipoMoneda;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "General.spp_ins_ctrl_TipoMoneda",
                                            obj.cCodTipoMoneda,
                                            obj.vNomTipoMoneda
                                         );

                intIdTipoMoneda = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdTipoMoneda = 0;
            }

            return intIdTipoMoneda;
        }

        public int Modifica_TipoMoneda(Model.TipoMoneda obj)
        {



            int intIdTipoMoneda = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "General.spp_upd_ctrl_TipoMoneda",
                                            obj.iIdTipoMoneda,
                                            obj.cCodTipoMoneda,
                                            obj.vNomTipoMoneda

                                         );

                intIdTipoMoneda = obj.iIdTipoMoneda;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdTipoMoneda = 0;
            }

            return intIdTipoMoneda;
        }

        public bool Elimina_TipoMoneda(int intIdTipoMoneda)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "General.spp_del_ctrl_TipoMoneda",
                                           intIdTipoMoneda
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_TipoMoneda()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "General.spp_lst_ctrl_TipoMoneda"
                                     );

            return ds;
        }

        #endregion

        #region Concepto
        public DataSet Ayuda_Concepto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Personal.spp_help_msto_Concepto" );
        }
        #endregion


        #region Contabilidad
        public DataSet Ayuda_PlanContable_Spring()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Contabilidad.spp_help_msto_PlanContable_Spring");
        }
        #endregion

        #region Formulacion

        public bool Procesa_AperturaVersion(Model.Formulacion_HojaTrabajo_Cabecera obj,
                                      bool TrasladaInformacion,
                                      bool TrasladaApertura
                                    )
        {
            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(  strConnection,
                                            "Formulacion.spp_ins_mvto_HojaTrabajo_Cabecera",
                                            obj.CcodCompañia,
                                            obj.CañoProceso,
                                            obj.Cversion,
                                            obj.Cperiodo,
                                            obj.cCodTipoDocumento,
                                            obj.cNumDocumento,
                                            obj.Tnota,
                                            TrasladaInformacion,
                                            TrasladaApertura
                                          );

            }
            catch (Exception)
            {
                blnResult = false;
               
            }

            return blnResult;

        }

        public bool Procesa_AperturaPeriodo(Model.Formulacion_HojaTrabajo_Cabecera obj,
                              bool TrasladaApertura
                            )
        {
            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                            "Formulacion.spp_ins_mvto_HojaTrabajo_Cabecera_Periodo",
                                            obj.CcodCompañia,
                                            obj.CañoProceso,
                                            obj.Cversion,
                                            obj.Cperiodo,
                                            obj.cCodTipoDocumento,
                                            obj.cNumDocumento,
                                            obj.Tnota,
                                            TrasladaApertura
                                          );

            }
            catch (Exception)
            {
                blnResult = false;

            }

            return blnResult;

        }


        public bool Procesa_AperturaVersion_Ajuste(Model.Formulacion_HojaTrabajo_Cabecera obj )
        {
            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                            "Formulacion.spp_ins_mvto_HojaTrabajo_Ajuste_Cabecera",
                                            obj.CcodCompañia,
                                            obj.CañoProceso,
                                            obj.Cversion,
                                            obj.Cperiodo,
                                            obj.cCodTipoDocumento,
                                            obj.cNumDocumento,
                                            obj.Tnota 
                                          );

            }
            catch (Exception)
            {
                blnResult = false;

            }

            return blnResult;

        }


        public bool Procesa_DistribucionAjuste(Model.Formulacion_HojaTrabajo_Cabecera obj )
        {
            DataSet ds = new DataSet();
            bool blnResult = true;

            try
            {
                SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_ins_mvto_HojaTrabajo_Cabecera_Distribucion", strConnection);
                da.SelectCommand.CommandType = CommandType.StoredProcedure;
                da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
                da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
                da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
                da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);

                da.SelectCommand.Parameters["@cCodEmpresa"].Value = obj.CcodCompañia;
                da.SelectCommand.Parameters["@cAñoProceso"].Value = obj.CañoProceso;
                da.SelectCommand.Parameters["@cVersion"].Value = obj.Cversion;
                da.SelectCommand.Parameters["@cPeriodo"].Value = obj.Cperiodo;


                da.SelectCommand.CommandTimeout = 600000000;
                da.Fill(ds);

                //SqlHelper.ExecuteNonQuery(strConnection,
                //                            "Formulacion.spp_ins_mvto_HojaTrabajo_Cabecera_Distribucion",
                //                            obj.CcodCompañia,
                //                            obj.CañoProceso,
                //                            obj.Cversion,
                //                            obj.Cperiodo
                //                          );

            }
            catch (Exception)
            {
                blnResult = false;

            }

            return blnResult;

        }


        public int Graba_HojaTrabajo_Cabecera ( Model.Formulacion_HojaTrabajo_Cabecera obj)
        {
            int intIdCabecera = 0;
            DataTable dt;

            dt = SqlHelper.ExecuteDataTable(    strConnection,
                                                "Formulacion.spp_ins_mvto_Formulacion_HojaTrabajo_Cabecera",
                                                obj.CcodCompañia,
                                                obj.CañoProceso,
                                                obj.Cversion,
                                                obj.Cperiodo,
                                                obj.Tnota,
                                                obj.cCodTipoDocumento,
                                                obj.cNumDocumento
                                           );
            if (dt.Rows.Count > 0)
            {
                intIdCabecera = Convert.ToInt32( dt.Rows[0]["iIdCabecera"] );
            }
            return intIdCabecera;
        }

        public bool Traslada_HojaTrabajo_ModificacionFormulacion_Saldos( Model.Formulacion_HojaTrabajo_Cabecera obj,
                                                                         bool blnTraslada_CentroCosto,
                                                                         bool blnTraslada_PosicionPresupuestal,
                                                                         bool blnTraslada_Proyecto,
                                                                         bool blnTraslada_Apertura
                                                                         )
        {

            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                                "Formulacion.spp_cnfg_mvto_HojaTrabajo_GeneraModificacionPresupuestal",
                                                obj.CcodCompañia,
                                                obj.CañoProceso,
                                                obj.Cperiodo,
                                                obj.Cversion,
                                                blnTraslada_CentroCosto,
                                                blnTraslada_PosicionPresupuestal,
                                                blnTraslada_Proyecto,
                                                blnTraslada_Apertura
                                           );
            }
            catch (Exception)
            {
                blnResult = false;
            }

            return blnResult;
        }
        public bool Traslada_HojaTrabajo_Formulacion_PIA(Model.Formulacion_HojaTrabajo_Cabecera obj)
        {

            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                                "Formulacion.spp_cnfg_mvto_HojaTrabajo_GeneraPIA_Formulacion",
                                                obj.CcodCompañia,
                                                obj.CañoProceso,
                                                obj.Cperiodo,
                                                obj.Cversion,
                                                obj.BajusteManual
                                           );
            }
            catch (Exception)
            {
                blnResult = false;
            }

            return blnResult;            
        }


        public DataSet Combo_TipoDocumento_Formulacion()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_ctrl_TipoDocumento");
        }

        public DataSet Combo_CentroGestor_Reporte( string strCodFuenteFinanciamiento )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_msto_CentroGestor_Reporte");
        }

        public DataSet Ayuda_CentroGestor_Reporte(string strCodFuenteFinanciamiento)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_msto_CentroGestor_Reporte", strCodFuenteFinanciamiento);
        }

        
        public DataSet Combo_ClaseGasto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_ClaseGasto");
        }

        public DataSet Combo_Tarea_FuenteFinanciamiento(string strCodCompañia,
                                                            string strCodProyecto
                                                          )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_Tarea_FuenteFinanciamiento", strCodCompañia, strCodProyecto
                                            );
        }

        public DataSet Combo_ClaseGasto_Clasificador(   string strCodCompañia,
                                                        string strCodCentroGestor,
                                                        string strCodTipoFormulacion
                                                    )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_ClaseGasto_clasificador", strCodCompañia, 
                                                                                                          strCodCentroGestor,
                                                                                                          strCodTipoFormulacion
                                            );
        }

        public DataSet Combo_ClaseGasto_Inversion(string strCodCompañia,
                                                  string strCodProyecto,
                                                  string strCodCentroGestor
                                                    )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_ClaseGasto_Inversion", strCodCompañia,
                                                                                                       strCodProyecto,
                                                                                                          strCodCentroGestor
                                            );
        }

        public DataSet Combo_ClaseGasto_Otros(string strCodCompañia,
                                          string strCodProyecto,
                                          string strCodCentroGestor
                                            )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_ClaseGasto_Otros", strCodCompañia,
                                                                                                       strCodProyecto,
                                                                                                          strCodCentroGestor
                                            );
        }

        public Model.Componente Recupera_Componente_Codigo( string strCodEmpresa, string strCodComponente)
        {
            DataTable dt = new DataTable();
            Model.Componente obj = new Model.Componente();

            using (dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_ComponenteObra",
                                                                    strCodEmpresa,
                                                                    strCodComponente))
            {
                if (dt.Rows.Count > 0)
                {
                    obj.IidComponente = Convert.ToInt32(dt.Rows[0]["IidComponente"]);
                    obj.CcodComponente = Convert.ToString(dt.Rows[0]["CcodComponente"]);
                    obj.VnomComponente = Convert.ToString(dt.Rows[0]["VnomComponente"]);
                }
            }
            return obj;
        }

        public int Graba_Componente(Model.Componente obj)
        {
            int intIdComponente = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "Proyecto.spp_ins_ctrl_Componente",
                                                obj.CcodEmpresa,
                                                obj.CcodComponente,
                                                obj.VnomComponente
                                                );
                intIdComponente = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch (Exception)
            {

                intIdComponente = 0;
            }
            return intIdComponente;
        }

        public int Modifica_Componente(Model.Componente obj)
        {
            int intIdComponente = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "Proyecto.spp_upd_ctrl_Componente",
                                                obj.IidComponente,
                                                obj.CcodComponente,
                                                obj.VnomComponente
                                                );
                intIdComponente = obj.IidComponente;
            }
            catch (Exception)
            {

                intIdComponente = 0;
            }
            return intIdComponente;
        }

        public Boolean Elimina_Componente(int intIdComponente)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                             "Proyecto.spp_del_ctrl_Componente"
                                           );
            }
            catch (Exception)
            {
                blnResult = false;
            }
            return blnResult;
        }


        public DataSet Lista_Componente(string strCodEmpresa)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Proyecto.spp_lst_ctrl_Componente",
                                             strCodEmpresa
                                           );

        }


        public DataSet Lista_Proyecto_Componente(   string strCodEmpresa,
                                                    string strCodProyecto

                                          )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Proyecto.spp_lst_msto_Proyecto_ComponenteObra",
                                                    strCodEmpresa,
                                                    strCodProyecto
                                                )
                  )
            {
                return ds;
            }
        }


        public Boolean Graba_Proyecto_Componente(string strCodEmpresa,
                                                string strCodProyecto,
                                                string strCodComponente
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Proyecto].[spp_ins_msto_Proyecto_Componente]",
                                                strCodEmpresa,
                                                strCodProyecto,
                                                strCodComponente
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }
        public Boolean Elimina_Proyecto_Componente(string strCodEmpresa,
                                                string strCodProyecto,
                                                string strCodComponente
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Proyecto].[spp_del_msto_Proyecto_Componente]",
                                                strCodEmpresa,
                                                strCodProyecto,
                                                strCodComponente
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }































        public DataSet Combo_ClaseGasto_Tarea(string strCodCompañia,
                                                  string strCodProyecto,
                                                  string strCodCentroGestor
                                                    )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_ClaseGasto_Tarea", strCodCompañia,
                                                                                                       strCodProyecto,
                                                                                                          strCodCentroGestor
                                            );
        }

        public DataSet Ayuda_ClaseGasto(string strCodEmpresa)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_ClaseGasto",strCodEmpresa );
        }

        public DataSet Ayuda_ClaseIngreso()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_ClaseIngreso");
        }

        public DataSet Combo_ClaseIngreso()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_ClaseIngreso");
        }

        public DataSet Combo_TipoFormulacion()
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_ctrl_TipoFormulacion"))
            {
                return ds;
            }
        }


        public DataSet Combo_MetodoDistribucion()
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_ctrl_MetodoDistribucion"))
            {
                return ds;
            }

        }
        public DataSet Ayuda_MetodoDistribucion()
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_ctrl_MetodoDistribucion"))
            {
                return ds;
            }

        }
        #endregion

        #region Logistica
        public DataSet Lista_Proyecto_SaldoAñoAnterior( string strCodCompañia,
                                                        string strCodProyecto,
                                                        string strCodCentroGestor,
                                                        string strCodCentroCosto,
                                                        double dblImporte,
                                                        string strOrdenesElegidas
                             )
        {



            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Logistica.spp_lst_mvto_SaldoProyecto", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodProyecto", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cCodCentroCosto", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@fImporte", SqlDbType.Float);
            da.SelectCommand.Parameters.Add("@vOrdenesElegidas", SqlDbType.VarChar);


            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cCodProyecto"].Value = strCodProyecto;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodCentroCosto"].Value = strCodCentroCosto;
            da.SelectCommand.Parameters["@fImporte"].Value = dblImporte;
            da.SelectCommand.Parameters["@vOrdenesElegidas"].Value = strOrdenesElegidas;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Lista_Proyecto_SaldoAñoAnterior_Clasificador(string strCodCompañia,
                                                                    string strCodClasificador,
                                                                    double dblImporte,
                                                                    string strOrdenesElegidas
                                                                  )
        {



            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Logistica.spp_lst_mvto_SaldoProyecto_Clasificador", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodClasificador", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@fImporte", SqlDbType.Float);
            da.SelectCommand.Parameters.Add("@vOrdenesElegidas", SqlDbType.VarChar);


            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cCodClasificador"].Value = strCodClasificador;
            da.SelectCommand.Parameters["@fImporte"].Value = dblImporte;
            da.SelectCommand.Parameters["@vOrdenesElegidas"].Value = strOrdenesElegidas;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }


        public DataSet Lista_Proyecto_IncorporaSaldoAñoAnterior_OS( string strCodCompañia,
                                                                    string strCodProyecto,
                                                                    string strCodCentroGestor,
                                                                    string strCodCentroCosto,
                                                                    string strNumeroOrden
                                                                  )
        {



            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Logistica.spp_ins_mvto_SaldoProyecto_OrdenServicio", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodProyecto", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cCodCentroCosto", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cNumeroOrden", SqlDbType.VarChar);


            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cCodProyecto"].Value = strCodProyecto;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodCentroCosto"].Value = strCodCentroCosto;
            da.SelectCommand.Parameters["@cNumeroOrden"].Value = strNumeroOrden;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Lista_Proyecto_IncorporaSaldoAñoAnterior_OC(string strCodCompañia,
                                                                    string strCodProyecto,
                                                                    string strCodCentroGestor,
                                                                    string strCodCentroCosto,
                                                                    string strNumeroOrden
                                                                  )
        {



            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Logistica.spp_ins_mvto_SaldoProyecto_OrdenCompra", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodProyecto", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cCodCentroCosto", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cNumeroOrden", SqlDbType.VarChar);


            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cCodProyecto"].Value = strCodProyecto;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodCentroCosto"].Value = strCodCentroCosto;
            da.SelectCommand.Parameters["@cNumeroOrden"].Value = strNumeroOrden;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }


        public DataSet Lista_Proyecto_IncorporaSaldoAñoAnterior_OS_Clasificador(string strCodCompañia,
                                                                    string strCodClasificador,
                                                                    string strCodCentroGestor,
                                                                    string strCodCentroCosto,
                                                                    string strNumeroOrden
                                                                  )
        {



            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Logistica.spp_ins_mvto_SaldoProyecto_OrdenServicio_Clasificador", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodClasificador", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cCodCentroCosto", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cNumeroOrden", SqlDbType.VarChar);


            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cCodClasificador"].Value = strCodClasificador;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodCentroCosto"].Value = strCodCentroCosto;
            da.SelectCommand.Parameters["@cNumeroOrden"].Value = strNumeroOrden;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Lista_Proyecto_IncorporaSaldoAñoAnterior_OC_Clasificador(string strCodCompañia,
                                                                    string strCodClasificador,
                                                                    string strCodCentroGestor,
                                                                    string strCodCentroCosto,
                                                                    string strNumeroOrden
                                                                  )
        {



            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Logistica.spp_ins_mvto_SaldoProyecto_OrdenCompra_Clasificador", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodClasificador", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cCodCentroCosto", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cNumeroOrden", SqlDbType.VarChar);


            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cCodClasificador"].Value = strCodClasificador;
            da.SelectCommand.Parameters["@cCodCentrogestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodCentroCosto"].Value = strCodCentroCosto;
            da.SelectCommand.Parameters["@cNumeroOrden"].Value = strNumeroOrden;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Lista_Conformidad_Pago(string strCodCompañia,
                                string strTipoOrden,
                                string strNumeroOrden
                             )
        {

            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Logistica.spp_lst_mvto_SeguimientoConformidad_Pagos", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cTipoOrden", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cNumOrden", SqlDbType.Char);


            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cTipoOrden"].Value = strTipoOrden;
            da.SelectCommand.Parameters["@cNumOrden"].Value = strNumeroOrden;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_Conformidad(string strCodCompañia,
                        string strNumConformidad,
                        string strTipoOrden,
                        string strNumOrden
                     )
        {



            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Logistica.spp_frt_mvto_Conformidad", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cNumConformidad", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cTipoOrden", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cNumOrden", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cNumConformidad"].Value = strNumConformidad;
            da.SelectCommand.Parameters["@cTipoOrden"].Value = strTipoOrden;
            da.SelectCommand.Parameters["@cNumOrden"].Value = strNumOrden;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Combo_UnidadMedida()
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_cbo_ctrl_UnidadMedida");
            return ds;
        }

        public DataSet Ayuda_UnidadMedida()
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_help_ctrl_UnidadMedida");
            return ds;
        }

        #endregion

        #region Gestion
        public DataSet Combo_Prioridad()
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_cbo_ctrl_Prioridad");
            return ds;
        }
        #endregion

        #region Patrimonio  
        public DataSet Ayuda_Marca()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_help_ctrl_Marca");
        }

        public DataSet Ayuda_Color()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_help_ctrl_Color");
        }

        public DataSet Ayuda_TipoDocumento(string strCodModulo)
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_help_ctrl_TipoDocumento", strCodModulo);
        }

        public DataSet Ayuda_Segmento()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_help_ctrl_Segmento");
        }

        public DataSet Combo_Segmento_Sin_Almacen()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_cbo_ctrl_Segmento_SinAlmacen");
        }

        public DataSet Ayuda_Centro()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_help_ctrl_Centro");
        }

        public DataSet Combo_Centro()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_cbo_ctrl_Centro");
        }

        public DataSet Ayuda_Emplazamiento()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_help_ctrl_Emplazamiento");
        }
        #endregion

        #region Aeropuerto
        public Model.Aeropuerto Recupera_msto_Aeropuerto_Codigo(string strCodAeropuerto)
        {
            DataTable dt = new DataTable();
            Model.Aeropuerto obj = new Model.Aeropuerto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_msto_Aeropuerto_Codigo", strCodAeropuerto);

            if (dt.Rows.Count > 0)
            {
                obj.iIdAeropuerto = Convert.ToInt32(dt.Rows[0]["iIdAeropuerto"]);
                obj.cCodUbiGeo = Convert.ToString(dt.Rows[0]["cCodUbiGeo"]);
                obj.cCodAeropuerto = Convert.ToString(dt.Rows[0]["cCodAeropuerto"]);
                obj.vNomAeropuerto = Convert.ToString(dt.Rows[0]["vNomAeropuerto"]);
                obj.vNomCiudad = Convert.ToString(dt.Rows[0]["vNomCiudad"]);
                obj.fAlturaPie = Convert.ToDouble(dt.Rows[0]["fAlturaPie"]);
                obj.fALturaMetro = Convert.ToDouble(dt.Rows[0]["fALturaMetro"]);

            }

            return obj;

        }

        public DataSet Ayuda_msto_Aeropuerto()
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "General.spp_help_msto_Aeropuerto"
                                     );

            return ds;
        }

        #endregion

        #region ClaseDocumento
        public Model.ClaseDocumento Recupera_ctrl_ClaseDocumento_Codigo(string strCodClaseDocumento)
        {
            DataTable dt = new DataTable();
            Model.ClaseDocumento obj = new Model.ClaseDocumento();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_ClaseDocumento_Codigo", strCodClaseDocumento);

            if (dt.Rows.Count > 0)
            {
                obj.iIdClaseDocumento = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodClaseDocumento = Convert.ToString(dt.Rows[0][1]);
                obj.vNomClaseDocumento = Convert.ToString(dt.Rows[0][2]);
                obj.iCodEstadoClaseDocumento = Convert.ToInt32(dt.Rows[0][3]);

            }

            return obj;

        }

        public Model.ClaseDocumento Recupera_ctrl_ClaseDocumento(int intIdDocumento)
        {
            DataTable dt = new DataTable();
            Model.ClaseDocumento obj = new Model.ClaseDocumento();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_ClaseDocumento", intIdDocumento);

            if (dt.Rows.Count > 0)
            {
                obj.iIdClaseDocumento = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodClaseDocumento = Convert.ToString(dt.Rows[0][1]);
                obj.vNomClaseDocumento = Convert.ToString(dt.Rows[0][2]);
                obj.iCodEstadoClaseDocumento = Convert.ToInt32(dt.Rows[0][3]);

            }

            return obj;

        }
        public DataSet Ayuda_ctrl_ClaseDocumento()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "General.spp_help_ctrl_ClaseDocumento"
                                     );

            return ds;
        }

        public int Graba_ctrl_ClaseDocumento(Model.ClaseDocumento objClaseDocumento)
        {



            int intIdClaseDocumento;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "General.spp_ins_ctrl_ClaseDocumento",
                                            objClaseDocumento.cCodClaseDocumento,
                                            objClaseDocumento.vNomClaseDocumento,
                                            objClaseDocumento.iCodEstadoClaseDocumento
                                         );

                intIdClaseDocumento = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdClaseDocumento = 0;
            }

            return intIdClaseDocumento;
        }

        public int Modifica_ctrl_ClaseDocumento(Model.ClaseDocumento objClaseDocumento)
        {



            int intIdClaseDocumento;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "General.spp_upd_ctrl_ClaseDocumento",
                                            objClaseDocumento.iIdClaseDocumento,
                                            objClaseDocumento.cCodClaseDocumento,
                                            objClaseDocumento.vNomClaseDocumento,
                                            objClaseDocumento.iCodEstadoClaseDocumento
                                         );

                intIdClaseDocumento = objClaseDocumento.iIdClaseDocumento;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdClaseDocumento = 0;
            }

            return intIdClaseDocumento;
        }

        public bool Elimina_ctrl_ClaseDocumento(int intIdClaseDocumento)
        {



            bool blnResult;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "General.spp_del_ctrl_ClaseDocumento",
                                            intIdClaseDocumento
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_ctrl_ClaseDocumento()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "General.spp_lst_ctrl_ClaseDocumento"
                                     );

            return ds;
        }

        #endregion

        #region TipoAcumulador
        public DataSet Ayuda_TipoAcumulador()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_help_ctrl_TipoAcumulador");
        }
        public DataSet Lista_TipoAcumulador()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_lst_ctrl_TipoAcumulador");
        }

        public DataSet Naturaleza_TipoAcumulador()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_help_ctrl_TipoAcumulador");
        }

        public DataSet Combo_TipoAcumulador_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_cbo_ctrl_TipoAcumulador_Reporte");
        }

        public DataSet Combo_TipoAcumulador()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_cbo_ctrl_TipoAcumulador");
        }
        public Model.TipoAcumulador Recupera_TipoAcumulador(int intIdTipoAcumulador)
        {
            DataTable dt = new DataTable();
            Model.TipoAcumulador obj = new Model.TipoAcumulador();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_TipoAcumulador", intIdTipoAcumulador);

            if (dt.Rows.Count > 0)
            {
                obj.IidTipoAcumulador = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodTipoAcumulador = Convert.ToString(dt.Rows[0][1]);
                obj.VnomTipoAcumulador = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public Model.TipoAcumulador Recupera_TipoAcumulador_codigo(string strCodTipoAcumulador)
        {

            DataTable dt = new DataTable();
            Model.TipoAcumulador obj = new Model.TipoAcumulador();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_TipoAcumulador_codigo", strCodTipoAcumulador);

            if (dt.Rows.Count > 0)
            {
                obj.IidTipoAcumulador = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodTipoAcumulador = Convert.ToString(dt.Rows[0][1]);
                obj.VnomTipoAcumulador = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;

        }
        public int Graba_TipoAcumulador(Model.TipoAcumulador obj)
        {
            int intIdTipoAcumulador = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_ins_ctrl_TipoAcumulador", obj.CcodTipoAcumulador,
                                                                                                      obj.VnomTipoAcumulador
                                                          );
                intIdTipoAcumulador = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdTipoAcumulador = 0;
            }
            return intIdTipoAcumulador;
        }
        public int Modifica_TipoAcumulador(Model.TipoAcumulador obj)
        {

            int intIdTipoAcumulador = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "General.spp_upd_ctrl_TipoAcumulador", obj.IidTipoAcumulador,
                                                                                     obj.CcodTipoAcumulador,
                                                                                     obj.VnomTipoAcumulador
                                                          );
                intIdTipoAcumulador = obj.IidTipoAcumulador;
            }
            catch
            {
                intIdTipoAcumulador = 0;
            }
            return intIdTipoAcumulador;
        }

        public bool Elimina_TipoAcumulador(int intIdTipoAcumulador)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "General.spp_del_ctrl_TipoAcumulador", intIdTipoAcumulador);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region TipoRecurso
        public DataSet Ayuda_TipoRecurso()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_help_ctrl_TipoRecurso");
        }
        public DataSet Lista_TipoRecurso()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_lst_ctrl_TipoRecurso");
        }

        public DataSet Naturaleza_TipoRecurso()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_help_ctrl_TipoRecurso");
        }

        public DataSet Combo_TipoRecurso_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_cbo_ctrl_TipoRecurso_Reporte");
        }

        public DataSet Combo_TipoRecurso()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_cbo_ctrl_TipoRecurso");
        }
        public Model.TipoRecurso Recupera_TipoRecurso(int intIdTipoRecurso)
        {
            DataTable dt = new DataTable();
            Model.TipoRecurso obj = new Model.TipoRecurso();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_TipoRecurso", intIdTipoRecurso);

            if (dt.Rows.Count == 0)
            {
                obj.IidTipoRecurso = 0;
                obj.CcodTipoRecurso = "";
                obj.VnomTipoRecurso = "";
            }
            else
            {
                obj.IidTipoRecurso = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodTipoRecurso = Convert.ToString(dt.Rows[0][1]);
                obj.VnomTipoRecurso = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public Model.TipoRecurso Recupera_TipoRecurso_codigo(string strCodTipoRecurso)
        {

            DataTable dt = new DataTable();
            Model.TipoRecurso obj = new Model.TipoRecurso();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_TipoRecurso_codigo", strCodTipoRecurso);

            if (dt.Rows.Count == 0)
            {
                obj.IidTipoRecurso = 0;
                obj.CcodTipoRecurso = "";
                obj.VnomTipoRecurso = "";
            }
            else
            {
                obj.IidTipoRecurso = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodTipoRecurso = Convert.ToString(dt.Rows[0][1]);
                obj.VnomTipoRecurso = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;

        }
        public int Graba_TipoRecurso(Model.TipoRecurso obj)
        {
            int intIdTipoRecurso = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_ins_ctrl_TipoRecurso", obj.CcodTipoRecurso,
                                                                                                      obj.VnomTipoRecurso
                                                          );
                intIdTipoRecurso = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdTipoRecurso = 0;
            }
            return intIdTipoRecurso;
        }
        public int Modifica_TipoRecurso(Model.TipoRecurso obj)
        {

            int intIdTipoRecurso = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "General.spp_upd_ctrl_TipoRecurso", obj.IidTipoRecurso,
                                                                                     obj.CcodTipoRecurso,
                                                                                     obj.VnomTipoRecurso
                                                          );
                intIdTipoRecurso = obj.IidTipoRecurso;
            }
            catch
            {
                intIdTipoRecurso = 0;
            }
            return intIdTipoRecurso;
        }

        public bool Elimina_TipoRecurso(int intIdTipoRecurso)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "General.spp_del_ctrl_TipoRecurso", intIdTipoRecurso);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region TipoTasa
        public DataSet Ayuda_TipoTasa()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_help_ctrl_TipoTasa");
        }
        public DataSet Lista_TipoTasa()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_lst_ctrl_TipoTasa");
        }

        public DataSet Naturaleza_TipoTasa()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_help_ctrl_TipoTasa");
        }

        public DataSet Combo_TipoTasa_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_cbo_ctrl_TipoTasa_Reporte");
        }

        public DataSet Combo_TipoTasa()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_cbo_ctrl_TipoTasa");
        }
        public Model.TipoTasa Recupera_TipoTasa(int intIdTipoTasa)
        {
            DataTable dt = new DataTable();
            Model.TipoTasa obj = new Model.TipoTasa();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_TipoTasa", intIdTipoTasa);

            if (dt.Rows.Count == 0)
            {
                obj.IidTipoTasa = 0;
                obj.CcodTipoTasa = "";
                obj.VnomTipoTasa = "";
            }
            else
            {
                obj.IidTipoTasa = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodTipoTasa = Convert.ToString(dt.Rows[0][1]);
                obj.VnomTipoTasa = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public Model.TipoTasa Recupera_TipoTasa_codigo(string strCodTipoTasa)
        {

            DataTable dt = new DataTable();
            Model.TipoTasa obj = new Model.TipoTasa();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_TipoTasa_codigo", strCodTipoTasa);

            if (dt.Rows.Count == 0)
            {
                obj.IidTipoTasa = 0;
                obj.CcodTipoTasa = "";
                obj.VnomTipoTasa = "";
            }
            else
            {
                obj.IidTipoTasa = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodTipoTasa = Convert.ToString(dt.Rows[0][1]);
                obj.VnomTipoTasa = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;

        }
        public int Graba_TipoTasa(Model.TipoTasa obj)
        {
            int intIdTipoTasa = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_ins_ctrl_TipoTasa", obj.CcodTipoTasa,
                                                                                                      obj.VnomTipoTasa
                                                          );
                intIdTipoTasa = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdTipoTasa = 0;
            }
            return intIdTipoTasa;
        }
        public int Modifica_TipoTasa(Model.TipoTasa obj)
        {

            int intIdTipoTasa = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "General.spp_upd_ctrl_TipoTasa", obj.IidTipoTasa,
                                                                                     obj.CcodTipoTasa,
                                                                                     obj.VnomTipoTasa
                                                          );
                intIdTipoTasa = obj.IidTipoTasa;
            }
            catch
            {
                intIdTipoTasa = 0;
            }
            return intIdTipoTasa;
        }

        public bool Elimina_TipoTasa(int intIdTipoTasa)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "General.spp_del_ctrl_TipoTasa", intIdTipoTasa);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region TipoVoucher
        public DataSet Combo_TipoVoucher()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Contabilidad.spp_cbo_ctrl_TipoVoucher"
                                           );

        }

        #endregion

        #region TipoDocumento
        public DataSet Combo_TipoDocumento()
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection, "General.spp_cbo_ctrl_TipoDocumento");

            return ds;

        }
        public DataSet Combo_ctrl_TipoDocumento_DataTable(int intTipoTramite)
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection, "General.spp_cbo_ctrl_TipoDocumento", intTipoTramite);

            return ds;

        }

        public string Recupera_mvto_CeGes_Sigla_Correlativo(string strSigla,
                                                             string strCodCeGes,
                                                             int intTipoDocumento,
                                                             int intAñoProceso)
        {
            string strNumDocumento = "";

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "TramiteDocumentario.spp_sel_mvto_CeGes_Sigla_Correlativo", strSigla,
                                                                                                                          strCodCeGes,
                                                                                                                          intTipoDocumento,
                                                                                                                          intAñoProceso
                                              );
                strNumDocumento = Convert.ToString(dt.Rows[0][0]);
            }
            catch
            {
                strNumDocumento = "";
            }


            return strNumDocumento;

        }

        public Model.TipoDocumento Recupera_TipoDocumento(int intTipoDocumento)
        {
            DataTable dt = new DataTable();
            Model.TipoDocumento obj = new Model.TipoDocumento();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_TipoDocumento", intTipoDocumento);

            if (dt.Rows.Count == 0)
            {
                obj.iTipoDocumento = 0;
                obj.vDesTipoDocumento = "";
                obj.cSigla = "";
                obj.bEsDocumentoTributario = false;
                obj.iLongitudSerie = 0;
                obj.iLongitudDocumento = 0;
            }
            else
            {
                obj.iTipoDocumento = Convert.ToInt32(dt.Rows[0][0]);
                obj.vDesTipoDocumento = dt.Rows[0][1].ToString();
                obj.cSigla = dt.Rows[0][2].ToString();
                obj.bEsDocumentoTributario = Convert.ToBoolean(dt.Rows[0][3]);
                obj.iLongitudSerie = Convert.ToInt32(dt.Rows[0][4]);
                obj.iLongitudDocumento = Convert.ToInt32(dt.Rows[0][5]);
            }

            return obj;

        }

        #endregion

        #region TipoDocumentoIdentidad
        public DataSet Combo_TipoDocumentoIdentidad_DataTable()
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection, "General.spp_cbo_ctrl_TipoDocumentoIdentidad");

            return ds;

        }

        public Model.TipoDocumentoIdentidad Recupera_TipoDocumentoIdentidad(int intTipoDocumentoIdentidad)
        {
            DataTable dt = new DataTable();
            Model.TipoDocumentoIdentidad obj = new Model.TipoDocumentoIdentidad();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_TipoDocumentoIdentidad", intTipoDocumentoIdentidad);

            if (dt.Rows.Count == 0)
            {
                obj.iIdTipoDocumentoIdentidad = 0;
                obj.iTipoDocumentoIdentidad = 0;
                obj.vDesTipoDocumentoIdentidad = "";
                obj.cSigla = "";
                obj.iLongitudDocumento = 0;
            }
            else
            {
                obj.iIdTipoDocumentoIdentidad = Convert.ToInt32(dt.Rows[0][0]);
                obj.iTipoDocumentoIdentidad = Convert.ToInt32(dt.Rows[0][1]);
                obj.vDesTipoDocumentoIdentidad = dt.Rows[0][2].ToString();
                obj.cSigla = dt.Rows[0][3].ToString();
                obj.iLongitudDocumento = Convert.ToInt32(dt.Rows[0][3].ToString());
            }

            return obj;

        }

        #endregion

        #region TipoContabilidad
        public DataSet Combo_TipoContabilidad()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Contabilidad.spp_cbo_ctrl_TipoContabilidad"
                                           );

        }

        #endregion

        #region PeriodoProcesoContabilidad
        public DataSet Combo_PeriodoProceso_DataTable()
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Contabilidad.spp_cbo_ctrl_PeriodoProceso"))
            {
                return ds;
            }

        }

        #endregion

        #region GrupoRecurso
        public DataSet Ayuda_GrupoRecurso()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_help_ctrl_GrupoRecurso");
        }
        public DataSet Lista_GrupoRecurso()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_lst_ctrl_GrupoRecurso");
        }

        public DataSet Naturaleza_GrupoRecurso()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_help_ctrl_GrupoRecurso");
        }

        public DataSet Combo_GrupoRecurso_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_cbo_ctrl_GrupoRecurso_Reporte");
        }

        public DataSet Combo_GrupoRecurso()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_cbo_ctrl_GrupoRecurso");
        }
        public Model.GrupoRecurso Recupera_GrupoRecurso(int intIdGrupoRecurso)
        {
            DataTable dt = new DataTable();
            Model.GrupoRecurso obj = new Model.GrupoRecurso();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_GrupoRecurso", intIdGrupoRecurso);

            if (dt.Rows.Count == 0)
            {
                obj.IidGrupoRecurso = 0;
                obj.CcodGrupoRecurso = "";
                obj.VnomGrupoRecurso = "";
            }
            else
            {
                obj.IidGrupoRecurso = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodGrupoRecurso = Convert.ToString(dt.Rows[0][1]);
                obj.VnomGrupoRecurso = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public Model.GrupoRecurso Recupera_GrupoRecurso_codigo(string strCodGrupoRecurso)
        {

            DataTable dt = new DataTable();
            Model.GrupoRecurso obj = new Model.GrupoRecurso();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_GrupoRecurso_codigo", strCodGrupoRecurso);

            if (dt.Rows.Count == 0)
            {
                obj.IidGrupoRecurso = 0;
                obj.CcodGrupoRecurso = "";
                obj.VnomGrupoRecurso = "";
            }
            else
            {
                obj.IidGrupoRecurso = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodGrupoRecurso = Convert.ToString(dt.Rows[0][1]);
                obj.VnomGrupoRecurso = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;

        }
        public int Graba_GrupoRecurso(Model.GrupoRecurso obj)
        {
            int intIdGrupoRecurso = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_ins_ctrl_GrupoRecurso", obj.CcodGrupoRecurso,
                                                                                                      obj.VnomGrupoRecurso
                                                          );
                intIdGrupoRecurso = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdGrupoRecurso = 0;
            }
            return intIdGrupoRecurso;
        }
        public int Modifica_GrupoRecurso(Model.GrupoRecurso obj)
        {

            int intIdGrupoRecurso = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "General.spp_upd_ctrl_GrupoRecurso", obj.IidGrupoRecurso,
                                                                                     obj.CcodGrupoRecurso,
                                                                                     obj.VnomGrupoRecurso
                                                          );
                intIdGrupoRecurso = obj.IidGrupoRecurso;
            }
            catch
            {
                intIdGrupoRecurso = 0;
            }
            return intIdGrupoRecurso;
        }

        public bool Elimina_GrupoRecurso(int intIdGrupoRecurso)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "General.spp_del_ctrl_GrupoRecurso", intIdGrupoRecurso);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region Feriado
        public System.Data.DataSet Lista_Feriado_DataTable(int intAñoProceso)
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection, "General.spp_lst_mvto_Feriado", intAñoProceso);

            return ds;

        }

        public Model.Feriado Recupera_Feriado(int intAñoProceso,
                                                        string cFecha)
        {
            DataTable dt = new DataTable();
            Model.Feriado obj = new Model.Feriado();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_mvto_Feriado", intAñoProceso, cFecha);

            if (dt.Rows.Count == 0)
            {
                obj.cAño = "";
                obj.dFecha = DateTime.Today;
                obj.vDesFeriado = "";
            }
            else
            {
                obj.cAño = dt.Rows[0][0].ToString();
                obj.dFecha = Convert.ToDateTime(dt.Rows[0][1]);
                obj.vDesFeriado = dt.Rows[0][2].ToString();
            }

            return obj;

        }

        #endregion

        #region UbicacionGeografica
        public DataSet Ayuda_UbicacionGeografica()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_help_msto_UbicacionGeografica");
        }

        public Model.Ubigeo Recupera_msto_Ubigeo_Codigo(string strCodUbigeo)
        {
            DataTable dt = new DataTable();
            Model.Ubigeo obj = new Model.Ubigeo();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Viatico.spp_sel_msto_Ubigeo_Codigo", strCodUbigeo);

            if (dt.Rows.Count > 0)
            {
                obj.iIdUbigeo = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodUbigeo = Convert.ToString(dt.Rows[0][1]);
                obj.cCodPais = Convert.ToString(dt.Rows[0][2]);
                obj.vDesPais = Convert.ToString(dt.Rows[0][3]);
                obj.cCodDepartamento = Convert.ToString(dt.Rows[0][4]);
                obj.vDesDepartamento = Convert.ToString(dt.Rows[0][5]);
                obj.cCodProvincia = Convert.ToString(dt.Rows[0][6]);
                obj.vDesProvincia = Convert.ToString(dt.Rows[0][7]);
                obj.cCodDistrito = Convert.ToString(dt.Rows[0][8]);
                obj.vDesDistrito = Convert.ToString(dt.Rows[0][9]);
                obj.cCodIndicadorImpuesto = Convert.ToString(dt.Rows[0][10]);
                obj.cCodDestinoViaje = Convert.ToString(dt.Rows[0][11]);
                obj.vNomDestinoViaje = Convert.ToString(dt.Rows[0][12]);

            }

            return obj;

        }

        public DataSet Ayuda_msto_Ubigeo()
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "General.spp_help_msto_Ubigeo"
                                     );

            return ds;
        }


        #endregion

        #endregion

        #region LOGISTICA
        #region "ProcesoLogistico Cabecera Requerimiento"
        public Model.Requerimiento_Cabecera graba_ProcesoLogistico_Requerimiento_Cabecera(string strAñoProceso,
                                                                                            string strNumProcedimiento,
                                                                                            string strCodEmpleado
                                                                                         )
        {
            DataTable dt = new DataTable();
            Model.Requerimiento_Cabecera MRC = new Model.Requerimiento_Cabecera();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Logistica.spp_ins_msto_ProcesoLogistico_Requerimiento_Cabecera",
                                            strAñoProceso,
                                            strNumProcedimiento,
                                            strCodEmpleado
                                          );
            if (dt.Rows.Count > 0)
            {
                MRC.CnumRequerimiento = Convert.ToString(dt.Rows[0]["cNumRequerimiento"]);
                MRC.IidRequerimiento_Cabecera = Convert.ToInt32(dt.Rows[0]["IidRequerimiento_Cabecera"]);
            }

            return MRC;
        }

        public Boolean graba_ProcesoLogistico_Requerimiento_Detalle(int intIdRequerimiento_Cabecera,
                                                                    int intIdRequerimiento_Detalle,
                                                                    double dblImporte,
                                                                    string strNumProcedimiento
                                                                    )
        {
            Boolean blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                                "Logistica.spp_ins_msto_ProcesoLogistico_Requerimiento_Detalle",
                                                intIdRequerimiento_Cabecera,
                                                intIdRequerimiento_Detalle,
                                                dblImporte,
                                                strNumProcedimiento
                                              );

            }

            catch (Exception)
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region "Conformidad"

        #region "Reportes"

        public DataSet lista_ContratoConformidad_Formato(string strCodCompañia,
                                                           string strCodAdministradorContrato,
                                                           string strCodCentrogestor
                                                         )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_ContratoConformidad_Firma",
                                             strCodCompañia,
                                             strCodAdministradorContrato,
                                             strCodCentrogestor
                                            );
        }

        public DataSet formato_ContratoConformidad_Formato(string strCodCompañia,
                                                   string strNroContrato,
                                                   string strNroConformidad
                                                 )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_frt_mvto_ContratoConformidad_Firma",
                                             strCodCompañia,
                                             strNroContrato,
                                             strNroConformidad
                                            );
        }


        public DataSet reporte_Conformidad_Pantalla(string strCodCompañia,
                                                    string strNroContrato,
                                                    string strNroConformidad
                                                   )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_sel_mvto_Contrato_Conformidad_Pantalla",
                                             strCodCompañia,
                                             strNroContrato,
                                             strNroConformidad
                                            );
        }

        public DataSet reporte_Conformidad(string strCodCompañia,
                                         string strNroContrato
                                       )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_Contrato_Conformidades",
                                             strCodCompañia,
                                             strNroContrato
                                           );
        }
        public DataSet reporte_Contrato(string strCodCompañia,
                                         string strPeriodoInicial,
                                         string strPeriodoFinal,
                                         string strCodProveedor,
                                         string strCodProyecto,
                                         int intEstadoContrato
                                       )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_Contrato",
                                             strCodCompañia,
                                             strPeriodoInicial,
                                             strPeriodoFinal,
                                             strCodProveedor,
                                             strCodProyecto,
                                             intEstadoContrato
                                           );
        }
        #endregion

        #region "BuenaPro"
        public DataSet ayuda_BuenaPro(string strCodCompañia)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_help_mvto_BuenaPro",
                                             strCodCompañia
                                            );
        }
        public Model.BuenaPro recupera_BuenaPro(string strCodCompañia,
                                                string strNroProceso
                                               )
        {
            Model.BuenaPro obj = new Model.BuenaPro();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Logistica.spp_sel_mvto_BuenaPro_Codigo",
                                             strCodCompañia,
                                             strNroProceso
                                            );
            if (dt.Rows.Count > 0)
            {
                obj.iIdBuenaPro = Convert.ToInt32(dt.Rows[0]["iIdBuenaPro"]);
                obj.cCodTipoProceso = Convert.ToString(dt.Rows[0]["cCodTipoProceso"]);
                obj.cNroProceso = Convert.ToString(dt.Rows[0]["cNroProceso"]);
                obj.tDesProceso = Convert.ToString(dt.Rows[0]["tDesProceso"]);
                obj.cCodObjetoContratacion = Convert.ToString(dt.Rows[0]["cCodObjetoContratacion"]);
                obj.cCodGanador = Convert.ToString(dt.Rows[0]["cCodGanador"]);
                obj.CcodTipoMoneda = Convert.ToString(dt.Rows[0]["CcodTipoMoneda"]);
                obj.FtipoCambio = Convert.ToDouble(dt.Rows[0]["FtipoCambio"]);
                obj.FprecioUnitario_Local = Convert.ToDouble(dt.Rows[0]["FprecioUnitario_Local"]);
                obj.FprecioUnitario_Extranjero = Convert.ToDouble(dt.Rows[0]["FprecioUnitario_Extranjero"]);
                obj.CcodTipoImpuesto = Convert.ToString(dt.Rows[0]["CcodTipoImpuesto"]);
                obj.Fimpuesto_Local = Convert.ToDouble(dt.Rows[0]["Fimpuesto_Local"]);
                obj.Fimpuesto_Extranjero = Convert.ToDouble(dt.Rows[0]["Fimpuesto_Extranjero"]);
                obj.cNroContrato = Convert.ToString(dt.Rows[0]["cNroContrato"]);

            }
            return obj;
        }
        #endregion

        //#region "Proveedor"
        //public DataSet ayuda_Proveedor(string strCodCompañia,
        //                               string strCodProveedor
        //                              )
        //{
        //    return SqlHelper.ExecuteDataset(strConnection,
        //                                     "Logistica.spp_help_msto_Proveedor",
        //                                     strCodCompañia,
        //                                     strCodProveedor
        //                                   );
        //}
        //#endregion

        #region "Contrato"

        public DataSet ayuda_Contrato(string strCodCompañia,
                                 string strPeriodoInicial,
                                 string strPeriodoFinal,
                                 string strCodProveedor,
                                 string strCodProyecto,
                                 int intEstadoContrato
                               )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_help_mvto_Contrato",
                                             strCodCompañia,
                                             strPeriodoInicial,
                                             strPeriodoFinal,
                                             strCodProveedor,
                                             strCodProyecto,
                                             intEstadoContrato
                                           );
        }

        public DataSet lista_Contrato_Proyecto_Detalle_Saldo(string strCodCompañia,
                                              string strNroContrato,
                                              string strCodFuenteDinanciamiento,
                                              string strCodProyecto
                                 )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_Contrato_Proyecto_Detalle_Saldo",
                                             strCodCompañia,
                                             strNroContrato,
                                             strCodFuenteDinanciamiento,
                                             strCodProyecto
                                           );
        }

        public DataSet lista_Contrato_Proyecto_Saldo(string strCodCompañia,
                                                      string strNroContrato,
                                                      string strCodFuenteDinanciamiento,
                                                      double dblImporte
                                         )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_Contrato_Proyecto_Saldo",
                                             strCodCompañia,
                                             strNroContrato,
                                             strCodFuenteDinanciamiento
                                           );
        }

        public DataSet lista_Contrato_FuenteFinanciemiento_Saldo(string strCodCompañia,
                                           string strNroContrato
                                         )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_Contrato_FuenteFinanciamiento_Saldo",
                                             strCodCompañia,
                                             strNroContrato
                                           );
        }


        public Model.ContratoCabecera recupera_Contrato(string strCodCompañia,
                                                          string strNroContrato
                                                         )
        {
            DataTable dt = new DataTable();
            Model.ContratoCabecera obj = new Model.ContratoCabecera();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Logistica.spp_sel_mvto_Contrato_Entregable",
                                        strCodCompañia,
                                        strNroContrato
                                     );

            if (dt.Rows.Count > 0)
            {
                obj.CCodCompañia = Convert.ToString(dt.Rows[0]["CCodCompañia"]);
                obj.CNroContrato = Convert.ToString(dt.Rows[0]["CNroContrato"]);
                obj.IidContrato = Convert.ToInt32(dt.Rows[0]["IidContrato"]);
                obj.TDesContrato = Convert.ToString(dt.Rows[0]["TDesContrato"]);

                obj.CcodTipoMoneda = Convert.ToString(dt.Rows[0]["CcodTipoMoneda"]);
                obj.FtipoCambio = Convert.ToDouble(dt.Rows[0]["FtipoCambio"]);
                obj.FprecioUnitario_Local = Convert.ToDouble(dt.Rows[0]["FprecioUnitario_Local"]);
                obj.FprecioUnitario_Extranjero = Convert.ToDouble(dt.Rows[0]["FprecioUnitario_Extranjero"]);
                obj.CcodTipoImpuesto = Convert.ToString(dt.Rows[0]["CcodTipoImpuesto"]);
                obj.Fimpuesto_Local = Convert.ToDouble(dt.Rows[0]["Fimpuesto_Local"]);
                obj.Fimpuesto_Extranjero = Convert.ToDouble(dt.Rows[0]["Fimpuesto_Extranjero"]);

                obj.DFecSuscripcionContrato = Convert.ToDateTime(dt.Rows[0]["DFecSuscripcionContrato"]);
                obj.CCodTipoProceso = Convert.ToString(dt.Rows[0]["CCodTipoProceso"]);
                obj.VDesTipoProceso = Convert.ToString(dt.Rows[0]["VDesTipoProceso"]);
                obj.CCodObjetoContratacion = Convert.ToString(dt.Rows[0]["CCodObjetoContratacion"]);
                obj.VDesObjetoContratacion = Convert.ToString(dt.Rows[0]["VDesObjetoContratacion"]);
                obj.bTieneMontosAdicionales = Convert.ToBoolean(dt.Rows[0]["bTieneMontosAdicionales"]);
                obj.cCodProveedor = Convert.ToString(dt.Rows[0]["cCodProveedor"]);
                obj.cCodContratista = Convert.ToString(dt.Rows[0]["cCodProveedor"]);
                obj.cCodDestinatarioPago = Convert.ToString(dt.Rows[0]["cCodDestinatarioPago"]);
                obj.CCodTipoContrato = Convert.ToString(dt.Rows[0]["CCodTipoContrato"]);
                obj.DFecSuscripcionContrato = Convert.ToDateTime(dt.Rows[0]["DFecSuscripcionContrato"]);
                obj.DFecVigencia_Inicio = Convert.ToDateTime(dt.Rows[0]["DFecVigencia_Inicio"]);
                obj.DFecVigencia_Final = Convert.ToDateTime(dt.Rows[0]["DFecVigencia_Final"]);
                obj.bRequiereRetencionGarantia = Convert.ToBoolean(dt.Rows[0]["bRequiereRetencionGarantia"]);
                obj.bSeAplicaPenalidad = Convert.ToBoolean(dt.Rows[0]["bSeAplicaPenalidad"]);
                obj.bSolicitaAnticipo = Convert.ToBoolean(dt.Rows[0]["bSolicitaAnticipo"]);
                obj.vRazonSocial = Convert.ToString(dt.Rows[0]["vRazonSocial"]);
                obj.CNroProceso = Convert.ToString(dt.Rows[0]["CNroProceso"]);
                obj.cCodAdministradorContrato = Convert.ToString(dt.Rows[0]["cCodAdministradorContrato"]);
            }

            return obj;
        }


        public Model.ContratoCabecera graba_Contrato(Model.ContratoCabecera obj)
        {
            Model.ContratoCabecera MCC = new Model.ContratoCabecera();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Logistica.spp_ins_mvto_Contrato",
                                            obj.CCodCompañia,
                                            obj.CNroContrato,
                                            obj.TDesContrato,
                                            obj.CCodTipoContrato,
                                            obj.CcodTipoMoneda,
                                            obj.FtipoCambio,
                                            obj.FprecioUnitario_Local,
                                            obj.FprecioUnitario_Extranjero,
                                            obj.CcodTipoImpuesto,
                                            obj.Fimpuesto_Local,
                                            obj.Fimpuesto_Extranjero,
                                            obj.cCodContratista,
                                            obj.cCodDestinatarioPago,
                                            obj.DFecSuscripcionContrato,
                                            obj.DFecVigencia_Inicio,
                                            obj.DFecVigencia_Final,
                                            obj.CNroProceso,
                                            obj.bRequiereRetencionGarantia,
                                            obj.bSolicitaAnticipo,
                                            obj.bSeAplicaPenalidad,
                                            obj.cCodAdministradorContrato,
                                            obj.cCodEmpleado
                                            );
            if (dt.Rows.Count > 0)
            {
                MCC.IidContrato = Convert.ToInt32(dt.Rows[0]["IidContrato"]);
                MCC.CNroContrato = Convert.ToString(dt.Rows[0]["CNroContrato"]);
            }

            return MCC;
        }

        public Model.ContratoCabecera modifica_Contrato(Model.ContratoCabecera obj,
                                                        string strCodAdministradorContrato_Anterior
                                                       )
        {
            Model.ContratoCabecera MCC = new Model.ContratoCabecera();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_upd_mvto_Contrato",
                                            obj.IidContrato,
                                            obj.CCodCompañia,
                                            obj.CNroContrato,
                                            obj.TDesContrato,
                                            obj.CCodTipoContrato,
                                            obj.CcodTipoMoneda,
                                            obj.FtipoCambio,
                                            obj.FprecioUnitario_Local,
                                            obj.FprecioUnitario_Extranjero,
                                            obj.CcodTipoImpuesto,
                                            obj.Fimpuesto_Local,
                                            obj.Fimpuesto_Extranjero,
                                            obj.cCodContratista,
                                            obj.cCodDestinatarioPago,
                                            obj.DFecSuscripcionContrato,
                                            obj.DFecVigencia_Inicio,
                                            obj.DFecVigencia_Final,
                                            obj.CNroProceso,
                                            obj.bRequiereRetencionGarantia,
                                            obj.bSolicitaAnticipo,
                                            obj.bSeAplicaPenalidad,
                                            obj.cCodAdministradorContrato,
                                            strCodAdministradorContrato_Anterior
                                            );
            if (dt.Rows.Count > 0)
            {
                MCC.IidContrato = Convert.ToInt32(dt.Rows[0]["IidContrato"]);
                MCC.CNroContrato = Convert.ToString(dt.Rows[0]["CNroContrato"]);
            }

            return MCC;
        }

        public Model.ContratoCabecera modifica_Contrato_Proceso(Model.ContratoCabecera obj,
                                                string strCodAdministradorContrato_Anterior
                                               )
        {
            Model.ContratoCabecera MCC = new Model.ContratoCabecera();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_upd_mvto_Contrato_Proceso",
                                            obj.IidContrato,
                                            obj.CCodCompañia,
                                            obj.CNroContrato,
                                            obj.TDesContrato,
                                            obj.CCodTipoContrato,
                                            obj.CcodTipoMoneda,
                                            obj.FtipoCambio,
                                            obj.FprecioUnitario_Local,
                                            obj.FprecioUnitario_Extranjero,
                                            obj.CcodTipoImpuesto,
                                            obj.Fimpuesto_Local,
                                            obj.Fimpuesto_Extranjero,
                                            obj.cCodContratista,
                                            obj.cCodDestinatarioPago,
                                            obj.DFecSuscripcionContrato,
                                            obj.DFecVigencia_Inicio,
                                            obj.DFecVigencia_Final,
                                            obj.CNroProceso,
                                            obj.bRequiereRetencionGarantia,
                                            obj.bSolicitaAnticipo,
                                            obj.bSeAplicaPenalidad,
                                            obj.cCodAdministradorContrato,
                                            strCodAdministradorContrato_Anterior
                                            );
            if (dt.Rows.Count > 0)
            {
                MCC.IidContrato = Convert.ToInt32(dt.Rows[0]["IidContrato"]);
                MCC.CNroContrato = Convert.ToString(dt.Rows[0]["CNroContrato"]);
            }

            return MCC;
        }

        public Boolean elimina_Contrato(Model.ContratoCabecera obj)
        {
            Boolean blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_mvto_Contrato",
                                          obj.IidContrato
                                          );

            }
            catch (Exception)
            {
                blnResult = false;
                throw;
            }


            return blnResult;
        }


        #endregion

        #region "Entidad Financiera"
        public DataSet ayuda_EntidadFinanciera(string strCodCompañia)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "General.spp_help_msto_EntidadFinanciera",
                                             strCodCompañia
                                           );
        }
        #endregion

        #region "Tipo Observacion Adjunto"
        public DataSet combo_TipoObservacion_Adjunto(string strCodTipoArchivo)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_tbl_ctrl_TipoObservacionAdjunto",
                                             strCodTipoArchivo
                                            );
        }
        #endregion

        #region "ClaseGarantia"
        public DataSet combo_ClaseGarantia()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_ctrl_clasegarantia"
                                           );
        }

        public Model.ClaseGarantia recupera_ClaseGarantia_Codigo(string strCodClaseGarantia)
        {
            Model.ClaseGarantia obj = new Model.ClaseGarantia();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Logistica.tbl_ctrl_claseGarantia_Codigo",
                                            strCodClaseGarantia
                                          );

            if (dt.Rows.Count > 0)
            {
                obj.iIdClaseGarantia = Convert.ToInt32(dt.Rows[0]["iIdClaseGarantia"]);
                obj.cCodClaseGarantia = Convert.ToString(dt.Rows[0]["cCodClaseGarantia"]);
                obj.vDesClaseGarantia = Convert.ToString(dt.Rows[0]["vDesClaseGarantia"]);
            }

            return obj;
        }

        #endregion

        #region "TipoGarantia"
        public DataSet combo_TipoGarantia()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_ctrl_tipogarantia"
                                           );
        }

        public Model.TipoGarantia recupera_TipoGarantia_Codigo(string strCodTipoGarantia)
        {
            Model.TipoGarantia obj = new Model.TipoGarantia();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Logistica.tbl_ctrl_tipoGarantia_Codigo",
                                            strCodTipoGarantia
                                          );

            if (dt.Rows.Count > 0)
            {
                obj.iIdTipoGarantia = Convert.ToInt32(dt.Rows[0]["iIdTipoGarantia"]);
                obj.cCodTipoGarantia = Convert.ToString(dt.Rows[0]["cCodTipoGarantia"]);
                obj.vDesTipoGarantia = Convert.ToString(dt.Rows[0]["vDesTipoGarantia"]);
            }

            return obj;
        }

        #endregion

        #region "Parametro Logistica"
        public Model.ParametroLogistica Recupera_ParametroLogistica_Codigo(string strCodParametroLogistica)
        {
            DataTable dt = new DataTable();
            Model.ParametroLogistica obj = new Model.ParametroLogistica();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_cnfg_ParametroLogistica_Codigo", strCodParametroLogistica);

            if (dt.Rows.Count > 0)
            {
                obj.iIdParametroLogistica = Convert.ToInt32(dt.Rows[0]["iIdParametroLogistica"]);
                obj.cCodParametroLogistica = Convert.ToString(dt.Rows[0]["cCodParametroLogistica"]);
                obj.vDesParametroLogistica = Convert.ToString(dt.Rows[0]["vDesParametroLogistica"]);
                obj.vValParametroLogistica = Convert.ToString(dt.Rows[0]["vValParametroLogistica"]);
            }
            return obj;
        }
        #endregion

        //#region "ObjetoContratacion"
        //public DataSet Ayuda_ObjetoContratacion()
        //{



        //    DataSet ds = new DataSet();

        //    ds = SqlHelper.ExecuteDataset(strConnection,
        //                              "Logistica.spp_help_ctrl_ObjetoContratacion"
        //                             );

        //    return ds;
        //}

        //public DataSet Combo_ObjetoContratacion(string strCodTipoProceso)
        //{



        //    DataSet ds = new DataSet();

        //    ds = SqlHelper.ExecuteDataset(strConnection,
        //                              "Logistica.spp_cbo_ctrl_ObjetoContratacion",
        //                              strCodTipoProceso
        //                             );

        //    return ds;
        //}

        //public Model.ObjetoContratacion Recupera_ObjetoContratacion(int intIdObjetoContratacion)
        //{
        //    DataTable dt = new DataTable();
        //    Model.ObjetoContratacion obj = new Model.ObjetoContratacion();

        //    dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_ObjetoContratacion", intIdObjetoContratacion);

        //    if (dt.Rows.Count == 0)
        //    {
        //        obj.iIdObjetoContratacion = 0;
        //        obj.cCodObjetoContratacion = "";
        //        obj.vDesObjetoContratacion = "";
        //    }
        //    else
        //    {
        //        obj.iIdObjetoContratacion = Convert.ToInt32(dt.Rows[0][0]);
        //        obj.cCodObjetoContratacion = Convert.ToString(dt.Rows[0][1]);
        //        obj.vDesObjetoContratacion = Convert.ToString(dt.Rows[0][2]);
        //    }
        //    return obj;
        //}


        //public Model.ObjetoContratacion Recupera_ObjetoContratacion_Codigo(string strCodObjetoContratacion)
        //{
        //    DataTable dt = new DataTable();
        //    Model.ObjetoContratacion obj = new Model.ObjetoContratacion();

        //    dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_ObjetoContratacion_Codigo", strCodObjetoContratacion);

        //    if (dt.Rows.Count == 0)
        //    {
        //        obj.iIdObjetoContratacion = 0;
        //        obj.cCodObjetoContratacion = "";
        //        obj.vDesObjetoContratacion = "";
        //    }
        //    else
        //    {
        //        obj.iIdObjetoContratacion = Convert.ToInt32(dt.Rows[0][0]);
        //        obj.cCodObjetoContratacion = Convert.ToString(dt.Rows[0][1]);
        //        obj.vDesObjetoContratacion = Convert.ToString(dt.Rows[0][2]);
        //    }
        //    return obj;
        //}

        //public int Graba_ObjetoContratacion(Model.ObjetoContratacion obj)
        //{

        //    int intIdObjetoContratacion;

        //    DataTable dt = new DataTable();

        //    try
        //    {

        //        dt = SqlHelper.ExecuteDataTable(strConnection,
        //                                  "Logistica.spp_ins_ctrl_ObjetoContratacion",
        //                                    obj.cCodObjetoContratacion,
        //                                    obj.vDesObjetoContratacion
        //                                 );

        //        intIdObjetoContratacion = Convert.ToInt32(dt.Rows[0][0].ToString());
        //    }
        //    catch (Exception e)
        //    {
        //        e.ToString();
        //        intIdObjetoContratacion = 0;
        //    }

        //    return intIdObjetoContratacion;
        //}

        //public int Modifica_ObjetoContratacion(Model.ObjetoContratacion obj)
        //{



        //    int intIdObjetoContratacion = 0;

        //    try
        //    {

        //        SqlHelper.ExecuteNonQuery(strConnection,
        //                                  "Logistica.spp_upd_ctrl_ObjetoContratacion",
        //                                    obj.iIdObjetoContratacion,
        //                                    obj.cCodObjetoContratacion,
        //                                    obj.vDesObjetoContratacion

        //                                 );

        //        intIdObjetoContratacion = obj.iIdObjetoContratacion;
        //    }
        //    catch (Exception e)
        //    {
        //        e.ToString();
        //        intIdObjetoContratacion = 0;
        //    }

        //    return intIdObjetoContratacion;
        //}

        //public bool Elimina_ObjetoContratacion(int intIdObjetoContratacion)
        //{



        //    bool blnResult;

        //    try
        //    {

        //        SqlHelper.ExecuteNonQuery(strConnection,
        //                                  "Logistica.spp_del_ctrl_ObjetoContratacion",
        //                                   intIdObjetoContratacion
        //                                 );

        //        blnResult = true;
        //    }
        //    catch (Exception e)
        //    {
        //        e.ToString();
        //        blnResult = false;
        //    }

        //    return blnResult;
        //}

        //public DataSet Lista_ObjetoContratacion()
        //{



        //    DataSet ds = new DataSet();

        //    ds = SqlHelper.ExecuteDataset(strConnection,
        //                              "Logistica.spp_lst_ctrl_ObjetoContratacion"
        //                             );

        //    return ds;
        //}

        //#endregion

        #region "TipoContrato"
        public DataSet combo_TipoContrato()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_ctrl_tipoContrato"
                                           );
        }

        public Model.TipoContrato recupera_TipoContrato_Codigo(string strCodTipoContrato)
        {
            Model.TipoContrato obj = new Model.TipoContrato();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Logistica.tbl_ctrl_tipoContrato_Codigo",
                                            strCodTipoContrato
                                          );

            if (dt.Rows.Count > 0)
            {
                obj.IidTipoContrato = Convert.ToInt32(dt.Rows[0]["iIdTipoContrato"]);
                obj.CCodTipoContrato = Convert.ToString(dt.Rows[0]["cCodTipoContrato"]);
                obj.VDesTipoContrato = Convert.ToString(dt.Rows[0]["vDesTipoContrato"]);
            }

            return obj;
        }

        #endregion

        #region "TipoAnticipo"
        public DataSet combo_TipoAnticipo()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_ctrl_tipoanticipo"
                                           );
        }

        public Model.TipoAnticipo recupera_TipoAnticipo_Codigo(string strCodTipoAnticipo)
        {
            Model.TipoAnticipo obj = new Model.TipoAnticipo();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Logistica.tbl_ctrl_tipoAnticipo_Codigo",
                                            strCodTipoAnticipo
                                          );

            if (dt.Rows.Count > 0)
            {
                obj.iIdTipoAnticipo = Convert.ToInt32(dt.Rows[0]["iIdTipoAnticipo"]);
                obj.cCodTipoAnticipo = Convert.ToString(dt.Rows[0]["cCodTipoAnticipo"]);
                obj.vDesTipoAnticipo = Convert.ToString(dt.Rows[0]["vDesTipoAnticipo"]);
            }

            return obj;
        }

        #endregion

        #region "TipoDocumento"
        public DataSet combo_TipoDocumento(bool blnEsDocumentoTributario
                                           )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "General.spp_cbo_ctrl_tipodocumento",
                                             blnEsDocumentoTributario
                                           );
        }

        public DataSet combo_TipoDocumento_Filtro(bool blnEsDocumentoTributario,
                                                  string strFiltro
                                   )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "General.spp_cbo_ctrl_tipodocumento_Filtro",
                                             blnEsDocumentoTributario,
                                             strFiltro
                                           );
        }


        public Model.TipoDocumento recupera_TipoDocumento_Codigo(int intTipodocumento)
        {
            Model.TipoDocumento obj = new Model.TipoDocumento();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "General.spp_sel_ctrl_tipoDocumento_Codigo",
                                            intTipodocumento
                                          );

            if (dt.Rows.Count > 0)
            {
                obj.iIdTipoDocumento = Convert.ToInt32(dt.Rows[0]["iIdTipoDocumento"]);
                obj.iTipoDocumento = Convert.ToInt32(dt.Rows[0]["iTipoDocumento"]);
                obj.vDesTipoDocumento = Convert.ToString(dt.Rows[0]["vDesTipoDocumento"]);
                obj.cSigla = Convert.ToString(dt.Rows[0]["cSigla"]);
                obj.bEsDocumentoTributario = Convert.ToBoolean(dt.Rows[0]["bEsDocumentoTributario"]);
                obj.iLongitudSerie = Convert.ToInt32(dt.Rows[0]["iLongitudSerie"]);
                obj.iLongitudDocumento = Convert.ToInt32(dt.Rows[0]["iLongitudDocumento"]);
                obj.cCodTipoImpuesto = Convert.ToString(dt.Rows[0]["cCodTipoImpuesto"]);
            }

            return obj;
        }

        #endregion

        #region "TipoImpuesto"
        public DataSet combo_TipoImpuesto()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "General.spp_cbo_ctrl_tipoimpuesto"
                                           );
        }

        public Model.TipoImpuesto recupera_TipoImpuesto_Codigo(string strCodTipoDocumento)
        {
            Model.TipoImpuesto obj = new Model.TipoImpuesto();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "General.spp_sel_ctrl_tipoImpuesto_Codigo",
                                            strCodTipoDocumento
                                          );

            if (dt.Rows.Count > 0)
            {
                obj.iIdTipoImpuesto = Convert.ToInt32(dt.Rows[0]["iIdTipoImpuesto"]);
                obj.cCodTipoImpuesto = Convert.ToString(dt.Rows[0]["cCodTipoImpuesto"]);
                obj.vDesTipoImpuesto = Convert.ToString(dt.Rows[0]["vDesTipoImpuesto"]);
                obj.cSigla = Convert.ToString(dt.Rows[0]["cSigla"]);
                obj.fFactor = Convert.ToDouble(dt.Rows[0]["fFactor"]);
                obj.dFecInicio = Convert.ToDateTime(dt.Rows[0]["dFecInicio"]);
                obj.dFecFinal = Convert.ToDateTime(dt.Rows[0]["dFecFinal"]);
            }

            return obj;
        }

        #endregion

        #region "Conformidad"

        public Boolean firma_Conformidad(string strCodCompañia,
                                            string strCodCentroGestor,
                                            string strNroConformidad,
                                            string strCodEmpleado
                                        )
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                            "Logistica.spp_ins_mvto_Contrato_Conformidad_Paso",
                                            strCodCompañia,
                                            strCodCentroGestor,
                                            strNroConformidad,
                                            strCodEmpleado
                                         );
            }
            catch (Exception)
            {
                blnResult = false;
            }
            return blnResult;
        }

        public DataSet lista_Conformidad_Adjuntos_Consulta(string strCodCompañia,
                                                   string strNroConformidad,
                                                   string strCodTipoAdjunto
                                                 )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_Conformidad_Adjunto_Consulta",
                                             strCodCompañia,
                                             strNroConformidad,
                                             strCodTipoAdjunto
                                            );
        }
        public Model.Conformidad graba_Conformidad(Model.Conformidad obj)
        {
            Model.Conformidad MC = new Model.Conformidad();
            DataTable dt = new DataTable();
            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_ins_mvto_Contrato_Conformidad",
                                             obj.cCodCompañia,
                                             obj.cNroContrato,
                                             obj.cNroConformidad,
                                             obj.cNroEntregable,
                                             obj.dFecEntregable,
                                             obj.dFecConformidad,
                                             obj.fImporteConformidad,
                                             obj.tComentarioConformidad,
                                             obj.cCodEmpleado
                                           );
            if (dt.Rows.Count > 0)
            {
                MC.iIdContratoConformidad = Convert.ToInt32(dt.Rows[0]["iIdContratoConformidad"]);
                MC.cNroConformidad = Convert.ToString(dt.Rows[0]["cNroConformidad"]);
            }
            return MC;
        }

        public Model.ConformidadAdjunto graba_ConformidadAdjunto(Model.ConformidadAdjunto obj)
        {
            Model.ConformidadAdjunto MCA = new Model.ConformidadAdjunto();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_ins_mvto_Contrato_Conformidad_Adjunto",
                                            obj.CcodCompañia,
                                            obj.CnroConformidad,
                                            obj.CcodTipoArchivo,
                                            obj.TAdjunto,
                                            obj.TObservacion,
                                            obj.CcodTipoObservacion,
                                            DateTime.Now
                                           );

            if (dt.Rows.Count > 0)
            {
                MCA.IidConformidadAdjunto = Convert.ToInt32(dt.Rows[0]["iIdContratoConformidad_Adjunto"]);
            }
            return MCA;
        }
        public Model.ConformidadDocumentoTributario graba_ConformidadDocumentoTributario(Model.ConformidadDocumentoTributario obj)
        {
            Model.ConformidadDocumentoTributario MCDT = new Model.ConformidadDocumentoTributario();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_ins_mvto_Contrato_Conformidad_Documento",
                                             obj.CcodCompañia,
                                             obj.CnroConformidad,
                                             obj.ITipoDocumento,
                                             obj.CserDocumento,
                                             obj.CnumDocumento,
                                             obj.Dfecdocumento,
                                             obj.fAfecto,
                                             obj.fImpuesto,
                                             obj.fInafecto
                                           );

            if (dt.Rows.Count > 0)
            {
                MCDT.iIdContratoConformidad_Documento = Convert.ToInt32(dt.Rows[0]["iIdContratoConformidad_Documento"]);
            }
            return MCDT;
        }
        public Model.ConformidadProyecto graba_ConformidadProyecto(Model.ConformidadProyecto obj)
        {
            Model.ConformidadProyecto MCP = new Model.ConformidadProyecto();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_ins_mvto_Contrato_Conformidad_Proyecto",
                                             obj.cCodCompañia,
                                             obj.cNroConformidad,
                                             obj.cCodProyecto,
                                             obj.cCodFuenteFinanciamiento,
                                             obj.cCodFormulacion,
                                             obj.fImporteConformidad
                                           );

            if (dt.Rows.Count > 0)
            {
                MCP.iIdConformidad_Proyecto = Convert.ToInt32(dt.Rows[0]["iIdConformidad_Proyecto"]);
            }
            return MCP;
        }

        public DataSet lista_Conformidad_Proyecto(string strCodCompañia,
                                                   string strNroContrato
                                                 )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_ContratoConformidad_SaldoProyecto",
                                             strCodCompañia,
                                             strNroContrato
                                           );
        }

        public Model.ConformidadPenalidad graba_ConformidadPenalidad(Model.ConformidadPenalidad obj
                                                  )
        {
            Model.ConformidadPenalidad MCP = new Model.ConformidadPenalidad();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_ins_mvto_Contrato_Conformidad_Penalidad",
                                             obj.cCodCompañia,
                                             obj.cNroConformidad,
                                             obj.fImportePenalidad,
                                             obj.tComentarioPenalidad
                                           );

            if (dt.Rows.Count > 0)
            {
                MCP.iIdContratoConformidad_Penalidad = Convert.ToInt32(dt.Rows[0]["iIdContratoConformidad_Penalidad"]);
            }
            return MCP;
        }

        public Model.Conformidadgarantia graba_ConformidadGarantia(Model.Conformidadgarantia obj
                                                  )
        {
            Model.Conformidadgarantia MCG = new Model.Conformidadgarantia();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_ins_mvto_Contrato_Conformidad_Garantia",
                                             obj.cCodCompañia,
                                             obj.cNroConformidad,
                                             obj.fImporteGarantia,
                                             obj.tComentarioGarantia
                                           );

            if (dt.Rows.Count > 0)
            {
                MCG.iIdContratoConformidad_Garantia = Convert.ToInt32(dt.Rows[0]["iIdContratoConformidad_Garantia"]);
            }
            return MCG;
        }

        public Model.ConformidadRetencion graba_ConformidadRetencion(Model.ConformidadRetencion obj
                                          )
        {
            Model.ConformidadRetencion MCR = new Model.ConformidadRetencion();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_ins_mvto_Contrato_Conformidad_Retencion",
                                             obj.cCodCompañia,
                                             obj.cNroConformidad,
                                             obj.fImporteRetencion,
                                             obj.tComentarioRetencion
                                           );

            if (dt.Rows.Count > 0)
            {
                MCR.iIdContratoConformidad_Retencion = Convert.ToInt32(dt.Rows[0]["iIdContratoConformidad_Retencion"]);
            }
            return MCR;
        }

        public Model.ConformidadAjustePolinomico graba_ConformidadAjustePolinomico(Model.ConformidadAjustePolinomico obj
                                  )
        {
            Model.ConformidadAjustePolinomico MCAP = new Model.ConformidadAjustePolinomico();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_ins_mvto_Contrato_Conformidad_AjustePolinomico",
                                             obj.cCodCompañia,
                                             obj.cNroConformidad,
                                             obj.fImporteAjustePolinomico,
                                             obj.tComentarioAjustePolinomico
                                           );

            if (dt.Rows.Count > 0)
            {
                MCAP.iIdContratoConformidad_AjustePolinomico = Convert.ToInt32(dt.Rows[0]["iIdContratoConformidad_AjustePolinomico"]);
            }
            return MCAP;
        }


        #endregion

        #region "Entregable"

        public DataSet lista_ContratoEntregable(string strCodCompañia,
                                                string strNroContrato
                                              )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_ContratoEntregable",
                                             strCodCompañia,
                                             strNroContrato
                                           );
        }
        public Model.EntregableCabecera insertar_EntregableCabecera(Model.EntregableCabecera obj)
        {
            Model.EntregableCabecera MEC = new Model.EntregableCabecera();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                  "Logistica.spp_ins_mvto_EntregableCabecera",
                                            obj.cCodCompañia,
                                            obj.cNroContrato,
                                            obj.CNroEntregable,
                                            obj.TDesEntregable,
                                            obj.ITipoDuracion,
                                            obj.IDiasDuracion,
                                            obj.ITipoFactor,
                                            obj.FFactor,
                                            obj.FImporte,
                                            obj.DFecFinal
                                 );

            if (dt.Rows.Count > 0)
            {
                MEC.IidEntregableCabecera = Convert.ToInt32(dt.Rows[0]["IidEntregableCabecera"]);
                MEC.CNroEntregable = Convert.ToString(dt.Rows[0]["CNroEntregable"]);
                MEC.DFecInicio = Convert.ToString(dt.Rows[0]["DFecInicio"]);
                MEC.DFecFinal = Convert.ToString(dt.Rows[0]["DFecFinal"]);
            }

            return MEC;
        }

        public bool modificar_EntregableCabecera(Model.EntregableCabecera obj)
        {
            bool blnResultado = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                      "Logistica.spp_upd_mvto_EntregableCabecera",
                                                obj.IidEntregableCabecera,
                                                obj.cCodCompañia,
                                                obj.cNroContrato,
                                                obj.CNroEntregable,
                                                obj.TDesEntregable,
                                                obj.ITipoDuracion,
                                                obj.IDiasDuracion,
                                                obj.ITipoFactor,
                                                obj.FFactor,
                                                obj.FImporte
                                     );
            }
            catch (Exception)
            {
                blnResultado = false;
            }

            return blnResultado;
        }

        public bool eliminar_EntregableCabecera(Model.EntregableCabecera obj)
        {
            bool blnResultado = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                      "Logistica.spp_del_mvto_EntregableCabecera",
                                        obj.IidEntregableCabecera
                                     );
            }
            catch (Exception)
            {
                blnResultado = false;
            }

            return blnResultado;
        }
        public Model.EntregableCabecera recupera_EntregableCabecera(int intIdEntregableCabecera)
        {
            DataTable dt = new DataTable();
            Model.EntregableCabecera obj = new Model.EntregableCabecera();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Logistica.spp_sel_mvto_EntregableCabecera",
                                        intIdEntregableCabecera
                                     );

            if (dt.Rows.Count > 0)
            {
                obj.IidEntregableCabecera = Convert.ToInt32(dt.Rows[0]["IidEntregableCabecera"]);
                obj.cCodCompañia = Convert.ToString(dt.Rows[0]["cCodCompañia"]);
                obj.cNroContrato = Convert.ToString(dt.Rows[0]["CNroContrato"]);
                obj.CNroEntregable = Convert.ToString(dt.Rows[0]["CNroEntregable"]);
                obj.TDesEntregable = Convert.ToString(dt.Rows[0]["TDesEntregable"]);
                obj.ITipoDuracion = Convert.ToInt32(dt.Rows[0]["ITipoDuracion"]);
                obj.IDiasDuracion = Convert.ToInt32(dt.Rows[0]["IDiasDuracion"]);
                obj.ITipoFactor = Convert.ToInt32(dt.Rows[0]["ITipoFactor"]);
                obj.FFactor = Convert.ToDouble(dt.Rows[0]["FFactor"]);
                obj.FImporte = Convert.ToDouble(dt.Rows[0]["FImporte"]);
            }

            return obj;
        }

        public Model.EntregableCabecera recupera_EntregableCabecera_Codigo(string strCodCompañia,
                                                                            string strNroContrato,
                                                                            string strNroEntregable
                                                                          )
        {
            DataTable dt = new DataTable();
            Model.EntregableCabecera obj = new Model.EntregableCabecera();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Logistica.spp_sel_mvto_EntregableCabecera_Codigo",
                                        strCodCompañia,
                                        strNroContrato,
                                        strNroEntregable
                                     );

            if (dt.Rows.Count > 0)
            {
                obj.IidEntregableCabecera = Convert.ToInt32(dt.Rows[0]["IidEntregableCabecera"]);
                obj.cCodCompañia = Convert.ToString(dt.Rows[0]["cCodCompañia"]);
                obj.cNroContrato = Convert.ToString(dt.Rows[0]["CNroContrato"]);
                obj.CNroEntregable = Convert.ToString(dt.Rows[0]["CNroEntregable"]);
                obj.TDesEntregable = Convert.ToString(dt.Rows[0]["TDesEntregable"]);
                obj.ITipoDuracion = Convert.ToInt32(dt.Rows[0]["ITipoDuracion"]);
                obj.IDiasDuracion = Convert.ToInt32(dt.Rows[0]["IDiasDuracion"]);
                obj.IDiasDuracionTotal = Convert.ToInt32(dt.Rows[0]["IDiasDuracionTotal"]);
                obj.ITipoFactor = Convert.ToInt32(dt.Rows[0]["ITipoFactor"]);
                obj.FFactor = Convert.ToDouble(dt.Rows[0]["FFactor"]);
                obj.FImporte = Convert.ToDouble(dt.Rows[0]["FImporte"]);
                obj.DFecInicio = Convert.ToString(dt.Rows[0]["DFecInicio"]);
                obj.DFecFinal = Convert.ToString(dt.Rows[0]["DFecFinal"]);
            }

            return obj;
        }

        public DataSet lista_EntregableCabecera(string strCodCompañia,
                                                    string strNroContrato)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_mvto_EntregableCabecera",
                                      strCodCompañia,
                                      strNroContrato
                                     );
        }

        public DataSet ayuda_EntregableCabecera(string strCodCompañia,
                                            string strNroContrato)
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_mvto_EntregableCabecera",
                                      strCodCompañia,
                                      strNroContrato
                                     );

            return ds;
        }

        #endregion

        #region "Adenda"

        public Model.adenda recupera_ContratoAdicional_Codigo(string strCodCompañia,
                                                              string strNroContrato,
                                                              string strCodAdenda
                                                             )
        {
            DataTable dt = new DataTable();
            Model.adenda obj = new Model.adenda();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Logistica.spp_sel_mvto_Contrato_Adicional_Codigo",
                                        strCodCompañia,
                                        strNroContrato,
                                        strCodAdenda
                                     );

            if (dt.Rows.Count > 0)
            {
                obj.iIdAdenda = Convert.ToInt32(dt.Rows[0]["iIdAdenda"]);
                obj.cCodCompañia = Convert.ToString(dt.Rows[0]["cCodCompañia"]);
                obj.cNroContrato = Convert.ToString(dt.Rows[0]["cNroContrato"]);
                obj.cNroAdenda = Convert.ToString(dt.Rows[0]["cNroAdenda"]);
                obj.tDesAdenda = Convert.ToString(dt.Rows[0]["tDesAdenda"]);
                obj.dFecAdenda = Convert.ToDateTime(dt.Rows[0]["dFecAdenda"]);
                obj.cCodTipoAdenda = Convert.ToString(dt.Rows[0]["cCodTipoAdenda"]);
                obj.vDesTipoAdenda = Convert.ToString(dt.Rows[0]["vDesTipoAdenda"]);
                obj.cNroEntregable = Convert.ToString(dt.Rows[0]["cNroEntregable"]);
                obj.iDias = Convert.ToInt32(dt.Rows[0]["iDias"]);
                obj.fImporte = Convert.ToDouble(dt.Rows[0]["fImporte"]);
            }

            return obj;
        }
        public Model.adenda recupera_ContratoAdicional(int intIdAdenda
                                                      )
        {
            DataTable dt = new DataTable();
            Model.adenda obj = new Model.adenda();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Logistica.spp_sel_mvto_Contrato_Adicional",
                                        intIdAdenda
                                     );

            if (dt.Rows.Count > 0)
            {
                obj.iIdAdenda = Convert.ToInt32(dt.Rows[0]["iIdAdenda"]);
                obj.cCodCompañia = Convert.ToString(dt.Rows[0]["cCodCompañia"]);
                obj.cNroContrato = Convert.ToString(dt.Rows[0]["cNroContrato"]);
                obj.cNroAdenda = Convert.ToString(dt.Rows[0]["cNroAdenda"]);
                obj.tDesAdenda = Convert.ToString(dt.Rows[0]["tDesAdenda"]);
                obj.dFecAdenda = Convert.ToDateTime(dt.Rows[0]["dFecAdenda"]);
                obj.cCodTipoAdenda = Convert.ToString(dt.Rows[0]["cCodTipoAdenda"]);
                obj.vDesTipoAdenda = Convert.ToString(dt.Rows[0]["vDesTipoAdenda"]);
                obj.cNroEntregable = Convert.ToString(dt.Rows[0]["cNroEntregable"]);
                obj.iDias = Convert.ToInt32(dt.Rows[0]["iDias"]);
                obj.fImporte = Convert.ToDouble(dt.Rows[0]["fImporte"]);
            }

            return obj;
        }
        public Model.adenda insertar_ContratoAdicional(Model.adenda obj)
        {
            Model.adenda MEC = new Model.adenda();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                  "Logistica.spp_ins_mvto_ContratoAdicional",
                                            obj.cCodCompañia,
                                            obj.cNroContrato,
                                            obj.cNroAdenda,
                                            obj.tDesAdenda,
                                            obj.dFecAdenda,
                                            obj.cCodTipoAdenda,
                                            obj.cNroEntregable,
                                            obj.iDias,
                                            obj.fImporte
                                 );

            if (dt.Rows.Count > 0)
            {
                MEC.iIdAdenda = Convert.ToInt32(dt.Rows[0]["iIdAdenda"]);
                MEC.cNroAdenda = Convert.ToString(dt.Rows[0]["cNroAdenda"]);
                MEC.dFecAdenda = Convert.ToDateTime(dt.Rows[0]["dFecAdenda"]);
            }

            return MEC;
        }

        public bool modificar_ContratoAdicional(Model.adenda obj)
        {
            bool blnResultado = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                      "Logistica.spp_upd_mvto_ContratoAdicional",
                                            obj.iIdAdenda,
                                            obj.cCodCompañia,
                                            obj.cNroContrato,
                                            obj.cNroAdenda,
                                            obj.tDesAdenda,
                                            obj.dFecAdenda,
                                            obj.cCodTipoAdenda,
                                            obj.cNroEntregable,
                                            obj.iDias,
                                            obj.fImporte
                                     );
            }
            catch (Exception)
            {
                blnResultado = false;
            }

            return blnResultado;
        }

        public bool eliminar_ContratoAdicionl(Model.adenda obj)
        {
            bool blnResultado = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                      "Logistica.spp_del_mvto_ContratoAdicional",
                                        obj.iIdAdenda
                                     );
            }
            catch (Exception)
            {
                blnResultado = false;
            }

            return blnResultado;
        }
        public DataSet lista_ContratoAdicional(string strCodCompañia,
                                               string strNroContrato
                                              )
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_mvto_ContratoAdicional",
                                      strCodCompañia,
                                      strNroContrato
                                     );

            return ds;
        }
        #endregion

        #region "Anticipo"

        public Model.ContratoAnticipo recupera_ContratoAnticipo_Codigo(string strCodCompañia,
                                                              string strNroContrato,
                                                              string strCodAnticipo
                                                             )
        {
            DataTable dt = new DataTable();
            Model.ContratoAnticipo obj = new Model.ContratoAnticipo();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Logistica.spp_sel_mvto_Contrato_Anticipo_Codigo",
                                        strCodCompañia,
                                        strNroContrato,
                                        strCodAnticipo
                                     );

            if (dt.Rows.Count > 0)
            {
                obj.iIdContrato_Anticipo = Convert.ToInt32(dt.Rows[0]["iIdContrato_Anticipo"]);
                obj.cCodCompañia = Convert.ToString(dt.Rows[0]["cCodCompañia"]);
                obj.cNroContrato = Convert.ToString(dt.Rows[0]["cNroContrato"]);
                obj.cNroAnticipo = Convert.ToString(dt.Rows[0]["cNroAnticipo"]);
                obj.tDesAnticipo = Convert.ToString(dt.Rows[0]["tDesAnticipo"]);
                obj.cNrogarantia = Convert.ToString(dt.Rows[0]["cNrogarantia"]);
                obj.cCodTipoAnticipo = Convert.ToString(dt.Rows[0]["cCodTipoAnticipo"]);
                obj.dFecAnticipo = Convert.ToDateTime(dt.Rows[0]["dFecAnticipo"]);
                obj.iTipoDocumento = Convert.ToInt32(dt.Rows[0]["iTipoDocumento"]);
                obj.cSigla = Convert.ToString(dt.Rows[0]["cSigla"]);
                obj.cSerDocumento = Convert.ToString(dt.Rows[0]["cSerDocumento"]);
                obj.cNroDocumento = Convert.ToString(dt.Rows[0]["cNroDocumento"]);
                obj.dFecDocumento = Convert.ToDateTime(dt.Rows[0]["dFecDocumento"]);
                obj.fBaseImponible = Convert.ToDouble(dt.Rows[0]["fBaseImponible"]);
                obj.cCodTipoImpuesto = Convert.ToString(dt.Rows[0]["cNroContrato"]);
                obj.fImpuesto = Convert.ToDouble(dt.Rows[0]["fImpuesto"]);
                obj.fMontoTotal = Convert.ToDouble(dt.Rows[0]["fMontoTotal"]);
            }

            return obj;
        }
        public Model.ContratoAnticipo recupera_ContratoAnticipo(int intIdAnticipo
                                                      )
        {
            DataTable dt = new DataTable();
            Model.ContratoAnticipo obj = new Model.ContratoAnticipo();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Logistica.spp_sel_mvto_Contrato_Anticipo",
                                        intIdAnticipo
                                     );

            if (dt.Rows.Count > 0)
            {
                obj.iIdContrato_Anticipo = Convert.ToInt32(dt.Rows[0]["iIdContrato_Anticipo"]);
                obj.cCodCompañia = Convert.ToString(dt.Rows[0]["cCodCompañia"]);
                obj.cNroContrato = Convert.ToString(dt.Rows[0]["cNroContrato"]);
                obj.cNroAnticipo = Convert.ToString(dt.Rows[0]["cNroAnticipo"]);
                obj.tDesAnticipo = Convert.ToString(dt.Rows[0]["tDesAnticipo"]);
                obj.cNrogarantia = Convert.ToString(dt.Rows[0]["cNrogarantia"]);
                obj.cCodTipoAnticipo = Convert.ToString(dt.Rows[0]["cCodTipoAnticipo"]);
                obj.dFecAnticipo = Convert.ToDateTime(dt.Rows[0]["dFecAnticipo"]);
                obj.iTipoDocumento = Convert.ToInt32(dt.Rows[0]["iTipoDocumento"]);
                obj.cSigla = Convert.ToString(dt.Rows[0]["cSigla"]);
                obj.cSerDocumento = Convert.ToString(dt.Rows[0]["cSerDocumento"]);
                obj.cNroDocumento = Convert.ToString(dt.Rows[0]["cNroDocumento"]);
                obj.dFecDocumento = Convert.ToDateTime(dt.Rows[0]["dFecDocumento"]);
                obj.fBaseImponible = Convert.ToDouble(dt.Rows[0]["fBaseImponible"]);
                obj.cCodTipoImpuesto = Convert.ToString(dt.Rows[0]["cNroContrato"]);
                obj.fImpuesto = Convert.ToDouble(dt.Rows[0]["fImpuesto"]);
                obj.fMontoTotal = Convert.ToDouble(dt.Rows[0]["fMontoTotal"]);
            }

            return obj;
        }
        public Model.ContratoAnticipo insertar_ContratoAnticipo(Model.ContratoAnticipo obj)
        {
            Model.ContratoAnticipo MEC = new Model.ContratoAnticipo();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                  "Logistica.spp_ins_mvto_ContratoAnticipo",
                                            obj.cCodCompañia,
                                            obj.cNroContrato,
                                            obj.cNroAnticipo,
                                            obj.tDesAnticipo,
                                            obj.cNrogarantia,
                                            obj.cCodTipoAnticipo,
                                            obj.dFecAnticipo,
                                            obj.iTipoDocumento,
                                            obj.cSerDocumento,
                                            obj.cNroDocumento,
                                            obj.dFecDocumento,
                                            obj.fBaseImponible,
                                            obj.cCodTipoImpuesto,
                                            obj.fImpuesto,
                                            obj.fMontoTotal
                                 );

            if (dt.Rows.Count > 0)
            {
                MEC.iIdContrato_Anticipo = Convert.ToInt32(dt.Rows[0]["iIdContrato_Anticipo"]);
                MEC.cNroAnticipo = Convert.ToString(dt.Rows[0]["cNroAnticipo"]);
                MEC.dFecAnticipo = Convert.ToDateTime(dt.Rows[0]["dFecAnticipo"]);
            }

            return MEC;
        }

        public bool modificar_ContratoAnticipo(Model.ContratoAnticipo obj)
        {
            bool blnResultado = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                      "Logistica.spp_upd_mvto_ContratoAnticipo",
                                            obj.iIdContrato_Anticipo,
                                            obj.cCodCompañia,
                                            obj.cNroContrato,
                                            obj.cNroAnticipo,
                                            obj.tDesAnticipo,
                                            obj.cNrogarantia,
                                            obj.cCodTipoAnticipo,
                                            obj.dFecAnticipo,
                                            obj.iTipoDocumento,
                                            obj.cSerDocumento,
                                            obj.cNroDocumento,
                                            obj.dFecDocumento,
                                            obj.fBaseImponible,
                                            obj.cCodTipoImpuesto,
                                            obj.fImpuesto,
                                            obj.fMontoTotal
                                     );
            }
            catch (Exception)
            {
                blnResultado = false;
            }

            return blnResultado;
        }

        public bool eliminar_ContratoAnticipo(Model.ContratoAnticipo obj)
        {
            bool blnResultado = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                      "Logistica.spp_del_mvto_ContratoAnticipo",
                                        obj.iIdContrato_Anticipo
                                     );
            }
            catch (Exception)
            {
                blnResultado = false;
            }

            return blnResultado;
        }
        public DataSet lista_ContratoAnticipo(string strCodCompañia,
                                               string strNroContrato
                                              )
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_mvto_ContratoAnticipo",
                                      strCodCompañia,
                                      strNroContrato
                                     );

            return ds;
        }
        #endregion

        #region "Tipo Adicional"
        public DataSet combo_TipoAdicional()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_crtl_TipoAdicional"
                                            );
        }
        #endregion

        #region "Garantia"

        public DataSet ayuda_ContratoGarantia(string strCodCompañia,
                                               string strNroContrato
                                             )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_help_mvto_ContratoGarantia",
                                             strCodCompañia,
                                             strNroContrato
                                           );
        }
        public DataSet lista_ContratoGarantia(string strCodCompañia,
                                                string strNroContrato
                                             )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_ContratoGarantia",
                                             strCodCompañia,
                                             strNroContrato
                                            );
        }

        public Model.ContratoGarantia recupera_ContratoGarantia_Codigo(string strCodCompañia,
                                                                string strNroContrato,
                                                                string strNroGarantia
                                                               )
        {
            Model.ContratoGarantia obj = new Model.ContratoGarantia();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_sel_mvto_ContratoGarantia_Codigo",
                                             strCodCompañia,
                                             strNroContrato,
                                             strNroGarantia
                                           );
            if (dt.Rows.Count > 0)
            {
                obj.iIdContrato_Garantia = Convert.ToInt32(dt.Rows[0]["iIdContrato_Garantia"]);
                obj.cCodCompañia = Convert.ToString(dt.Rows[0]["cCodCompañia"]);
                obj.cNroContrato = Convert.ToString(dt.Rows[0]["cNroContrato"]);
                obj.cNroGarantia = Convert.ToString(dt.Rows[0]["cNroGarantia"]);
                obj.tDesGarantia = Convert.ToString(dt.Rows[0]["tDesGarantia"]);
                obj.dFecGarantia = Convert.ToDateTime(dt.Rows[0]["dFecGarantia"]);
                obj.cCodTipoGarantia = Convert.ToString(dt.Rows[0]["cCodTipoGarantia"]);
                obj.cCodClaseGarantia = Convert.ToString(dt.Rows[0]["cCodClaseGarantia"]);
                obj.cCodEntidadFinanciera = Convert.ToString(dt.Rows[0]["cCodEntidadFinanciera"]);
                obj.fMontoTotal = Convert.ToDouble(dt.Rows[0]["fMontoTotal"]);
                obj.dFecInicio = Convert.ToDateTime(dt.Rows[0]["dFecInicio"]);
                obj.dFecFinal = Convert.ToDateTime(dt.Rows[0]["dFecFinal"]);
            }
            return obj;
        }
        public Model.ContratoGarantia recupera_ContratoGarantia(int intIdContrato_Garantia)
        {
            Model.ContratoGarantia obj = new Model.ContratoGarantia();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_sel_mvto_ContratoGarantia",
                                             intIdContrato_Garantia
                                           );
            if (dt.Rows.Count > 0)
            {
                obj.iIdContrato_Garantia = Convert.ToInt32(dt.Rows[0]["iIdContrato_Garantia"]);
                obj.cCodCompañia = Convert.ToString(dt.Rows[0]["cCodCompañia"]);
                obj.cNroContrato = Convert.ToString(dt.Rows[0]["cNroContrato"]);
                obj.cNroGarantia = Convert.ToString(dt.Rows[0]["cNroGarantia"]);
                obj.tDesGarantia = Convert.ToString(dt.Rows[0]["tDesGarantia"]);
                obj.dFecGarantia = Convert.ToDateTime(dt.Rows[0]["dFecGarantia"]);
                obj.cCodTipoGarantia = Convert.ToString(dt.Rows[0]["cCodTipoGarantia"]);
                obj.cCodClaseGarantia = Convert.ToString(dt.Rows[0]["cCodClaseGarantia"]);
                obj.cCodEntidadFinanciera = Convert.ToString(dt.Rows[0]["cCodEntidadFinanciera"]);
                obj.fMontoTotal = Convert.ToDouble(dt.Rows[0]["fMontoTotal"]);
                obj.dFecInicio = Convert.ToDateTime(dt.Rows[0]["dFecInicio"]);
                obj.dFecFinal = Convert.ToDateTime(dt.Rows[0]["dFecFinal"]);
            }
            return obj;
        }
        public Model.ContratoGarantia graba_ContratoGarantia(Model.ContratoGarantia obj
                                                            )
        {
            Model.ContratoGarantia MCG = new Model.ContratoGarantia();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_ins_mvto_ContratoGarantia",
                                             obj.cCodCompañia,
                                             obj.cNroContrato,
                                             obj.cNroGarantia,
                                             obj.tDesGarantia,
                                             obj.dFecGarantia,
                                             obj.cCodTipoGarantia,
                                             obj.cCodClaseGarantia,
                                             obj.cCodEntidadFinanciera,
                                             obj.fMontoTotal,
                                             obj.dFecInicio,
                                             obj.dFecFinal
                                           );
            if (dt.Rows.Count > 0)
            {
                MCG.iIdContrato_Garantia = Convert.ToInt32(dt.Rows[0]["iIdContrato_Garantia"]);
                MCG.cNroGarantia = Convert.ToString(dt.Rows[0]["cNroGarantia"]);
            }


            return MCG;
        }

        public Model.ContratoGarantia modifica_ContratoGarantia(Model.ContratoGarantia obj
                                                    )
        {
            Model.ContratoGarantia MCG = new Model.ContratoGarantia();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_upd_mvto_ContratoGarantia",
                                             obj.iIdContrato_Garantia,
                                             obj.cCodCompañia,
                                             obj.cNroContrato,
                                             obj.cNroGarantia,
                                             obj.tDesGarantia,
                                             obj.dFecGarantia,
                                             obj.cCodTipoGarantia,
                                             obj.cCodClaseGarantia,
                                             obj.cCodEntidadFinanciera,
                                             obj.fMontoTotal,
                                             obj.dFecInicio,
                                             obj.dFecFinal
                                           );
            if (dt.Rows.Count > 0)
            {
                MCG.iIdContrato_Garantia = Convert.ToInt32(dt.Rows[0]["iIdContrato_Garantia"]);
                MCG.cNroGarantia = Convert.ToString(dt.Rows[0]["cNroGarantia"]);
            }


            return MCG;
        }
        public Boolean elimina_ContratoGarantia(Model.ContratoGarantia obj
                                            )
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                                 "Logistica.spp_upd_mvto_ContratoGarantia",
                                                 obj.iIdContrato_Garantia
                                               );
            }
            catch (Exception)
            {
                blnResult = false;
                throw;
            }

            return blnResult;
        }


        #endregion

        #region "Inicio Actividad"

        public DataSet lista_ContratoInicioActividad(string strCodCompañia,
                                                string strNroContrato
                                             )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_ContratoInicioActividad",
                                             strCodCompañia,
                                             strNroContrato
                                            );
        }

        public Model.ContratoInicioActividad graba_ContratoInicioActividad(Model.ContratoInicioActividad obj
                                                            )
        {
            Model.ContratoInicioActividad MIA = new Model.ContratoInicioActividad();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_ins_mvto_ContratoInicioActividad",
                                             obj.cCodCompañia,
                                             obj.cNroContrato,
                                             obj.dFecInicio,
                                             obj.tNota
                                           );
            if (dt.Rows.Count > 0)
            {
                MIA.IidContrato_InicioActividad = Convert.ToInt32(dt.Rows[0]["IidContrato_InicioActividad"]);
            }


            return MIA;
        }

        public Model.ContratoInicioActividad modifica_ContratoInicioActividad(Model.ContratoInicioActividad obj
                                                            )
        {
            Model.ContratoInicioActividad MIA = new Model.ContratoInicioActividad();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_upd_mvto_ContratoGarantia",
                                             obj.IidContrato_InicioActividad,
                                             obj.cCodCompañia,
                                             obj.cNroContrato,
                                             obj.dFecInicio,
                                             obj.tNota
                                           );
            if (dt.Rows.Count > 0)
            {
            }


            return MIA;
        }
        public Boolean elimina_ContratoInicioActividad(Model.ContratoInicioActividad obj
                                            )
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                                 "Logistica.spp_upd_mvto_ContratoInicioActividad",
                                                 obj.IidContrato_InicioActividad
                                               );
            }
            catch (Exception)
            {
                blnResult = false;
            }

            return blnResult;
        }


        #endregion

        #endregion


        #region "Viatico"
        public List<Model.Viatico> recupera_Viatico_App(string strCodEmpleado)
        {
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection, "RRHH.spp_lst_msto_Empleado_ComisionServicio_Aprobacion_App", strCodEmpleado);
            List<Model.Viatico> ListaobjMES = new List<Model.Viatico>();
            ListaobjMES = new List<Model.Viatico>(
                           (from dRow in dt.AsEnumerable()
                            select (GetViaticoDataTableRow(dRow)))
                           );


            return ListaobjMES;
        }

        private Model.Viatico GetViaticoDataTableRow(DataRow dr)
        {
            Model.Viatico objMES = new Model.Viatico();

            // Viatico
            objMES.NumeroProceso_Formateado = Convert.ToString(dr["NumeroProceso_Formateado"]);
            objMES.NumeroProceso = Convert.ToString(dr["NumeroProceso"]);
            objMES.PreparadoPor = Convert.ToString(dr["PreparadoPor"]);
            objMES.NombreCompleto = Convert.ToString(dr["NombreCompleto"]);
            objMES.FechaProceso = Convert.ToString(dr["FechaProceso"]);
            objMES.MontoAdelanto = Convert.ToDouble(dr["MontoAdelanto"]);
            objMES.Estado = Convert.ToString(dr["Estado"]);
            objMES.AprobadoPor = Convert.ToString(dr["AprobadoPor"]);
            objMES.UltimaFechaModif = Convert.ToString(dr["UltimaFechaModif"]);
            objMES.observaciones = Convert.ToString(dr["observaciones"]);
            objMES.FechaSalida = Convert.ToString(dr["FechaSalida"]);
            objMES.FechaRetorno = Convert.ToString(dr["FechaRetorno"]);
            objMES.Destino = Convert.ToString(dr["Destino"]);
            objMES.Procedencia = Convert.ToString(dr["Procedencia"]);
            return (objMES);
        }

        public Model.Viatico_Paso graba_Viatico_Firma_App(string strNumeroProceso)
        {
            DataTable dt = new DataTable();


            dt = SqlHelper.ExecuteDataTable(strConnection, "RRHH.spp_upd_msto_Viatico_Firma_App", strNumeroProceso);

            Model.Viatico_Paso objMES = new Model.Viatico_Paso();

            foreach (DataRow row in dt.Rows)
            {
                objMES = GetViaticoPasoDataTableRow(row);
            }

            return objMES;
        }


        private Model.Viatico_Paso GetViaticoPasoDataTableRow(DataRow dr)
        {
            Model.Viatico_Paso objMES = new Model.Viatico_Paso();

            objMES.CnumeroProceso = Convert.ToString(dr["CnumeroProceso"]);
            objMES.DfecPaso = Convert.ToDateTime(dr["DfecPaso"]);
            objMES.CPaso = Convert.ToString(dr["CPaso"]);
            objMES.CestadoPaso = Convert.ToString(dr["CestadoPaso"]);

            return (objMES);
        }


        #endregion


        #region "CajaChica"
        public List<Model.CajaChica> recupera_CajaChica_App(string strCodEmpleado)
        {
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection, "RRHH.spp_lst_msto_Empleado_CajaChica_Aprobacion_App", strCodEmpleado);
            List<Model.CajaChica> ListaobjMES = new List<Model.CajaChica>();
            ListaobjMES = new List<Model.CajaChica>(
                           (from dRow in dt.AsEnumerable()
                            select (GetCajaChicaDataTableRow(dRow)))
                           );


            return ListaobjMES;
        }

        private Model.CajaChica GetCajaChicaDataTableRow(DataRow dr)
        {
            Model.CajaChica objMES = new Model.CajaChica();

            // CajaChica
            objMES.NumeroProceso_Formateado = Convert.ToString(dr["NumeroProceso_Formateado"]);
            objMES.NumeroProceso = Convert.ToString(dr["NumeroProceso"]);
            objMES.PreparadoPor = Convert.ToString(dr["PreparadoPor"]);
            objMES.NombreCompleto = Convert.ToString(dr["NombreCompleto"]);
            objMES.FechaProceso = Convert.ToString(dr["FechaProceso"]);
            objMES.MontoAdelanto = Convert.ToDouble(dr["MontoAdelanto"]);
            objMES.Estado = Convert.ToString(dr["Estado"]);
            objMES.AprobadoPor = Convert.ToString(dr["AprobadoPor"]);
            objMES.UltimaFechaModif = Convert.ToString(dr["UltimaFechaModif"]);
            objMES.observaciones = Convert.ToString(dr["observaciones"]);
            return (objMES);
        }

        public Model.CajaChica_Paso graba_CajaChica_Firma_App(string strNumeroProceso)
        {
            DataTable dt = new DataTable();


            dt = SqlHelper.ExecuteDataTable(strConnection, "RRHH.spp_upd_msto_CajaChica_Firma_App", strNumeroProceso);

            Model.CajaChica_Paso objMES = new Model.CajaChica_Paso();

            foreach (DataRow row in dt.Rows)
            {
                objMES = GetCajaChicaPasoDataTableRow(row);
            }

            return objMES;
        }

        private Model.CajaChica_Paso GetCajaChicaPasoDataTableRow(DataRow dr)
        {
            Model.CajaChica_Paso objMES = new Model.CajaChica_Paso();

            objMES.CnumeroProceso = Convert.ToString(dr["CnumeroProceso"]);
            objMES.DfecPaso = Convert.ToDateTime(dr["DfecPaso"]);
            objMES.CPaso = Convert.ToString(dr["CPaso"]);
            objMES.CestadoPaso = Convert.ToString(dr["CestadoPaso"]);

            return (objMES);
        }


        #endregion


        #region "FichaPresupuestal"
        public List<Model.FichaPresupuestal> recupera_FichaPresupuestal_App(string strCodEmpresa)
        {
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_lst_msto_ProcesoLogistico_FichaPresupuestal_App", strCodEmpresa);
            List<Model.FichaPresupuestal> ListaobjMES = new List<Model.FichaPresupuestal>();
            ListaobjMES = new List<Model.FichaPresupuestal>(
                           (from dRow in dt.AsEnumerable()
                            select (GetFichaDataTableRow(dRow)))
                           );


            return ListaobjMES;
        }

        private Model.FichaPresupuestal GetFichaDataTableRow(DataRow dr)
        {
            Model.FichaPresupuestal objMES = new Model.FichaPresupuestal();

            // Valor Estimado
            objMES.CNumProcedimiento = Convert.ToString(dr["cNumProcedimiento"]);
            objMES.DFecMovimiento = Convert.ToString(dr["DFecMovimiento"]);
            objMES.TDesContratacion = Convert.ToString(dr["TDesContratacion"]);
            objMES.FPrecioEstimado = Convert.ToDouble(dr["FPrecioEstimado"]);

            // Proveedor
            objMES.RUC = Convert.ToString(dr["RUC"]);
            objMES.RazonSocial = Convert.ToString(dr["RazonSocial"]);
            objMES.Direccion = Convert.ToString(dr["Direccion"]);

            //Requerimiento
            objMES.CNumRequerimiento = Convert.ToString(dr["cNumRequerimiento"]);
            objMES.DFecRequerimiento = Convert.ToString(dr["DFecRequerimiento"]);
            objMES.VTipoAdquisicion = Convert.ToString(dr["VTipoAdquisicion"]);
            objMES.TImporte = Convert.ToDouble(dr["TImporte"]);
            objMES.TDetalleContratacion = Convert.ToString(dr["TDetalleContratacion"]);
            objMES.TJustificacion = Convert.ToString(dr["TJustificacion"]);

            objMES.Fresto = Convert.ToDouble(dr["fResto"]);
            objMES.Frequerimiento = Convert.ToDouble(dr["fRequerimiento"]);
            objMES.CnumRequerimiento_Nuevo = Convert.ToString(dr["cNumRequerimiento_Nuevo"]);
            objMES.DfecRequerimiento_Nuevo = Convert.ToString(dr["dFecRequerimiento_Nuevo"]);

            return (objMES);
        }

        public Model.FichaPresupuestal_Paso graba_FichaPresupuestal_Firma_App(string strNumProcedimiento)
        {
            DataTable dt = new DataTable();


            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_lst_msto_ProcesoLogistico_FichaPresupuestal_Firma_App", strNumProcedimiento);

            Model.FichaPresupuestal_Paso objMES = new Model.FichaPresupuestal_Paso();

            foreach (DataRow row in dt.Rows)
            {
                objMES = GetPasoDataTableRow(row);
            }

            return objMES;
        }


        private Model.FichaPresupuestal_Paso GetPasoDataTableRow(DataRow dr)
        {
            Model.FichaPresupuestal_Paso objMES = new Model.FichaPresupuestal_Paso();

            objMES.CnumProcedimiento = Convert.ToString(dr["CnumProcedimiento"]);
            objMES.DfecPaso = Convert.ToDateTime(dr["DfecPaso"]);
            objMES.CPaso = Convert.ToString(dr["CPaso"]);
            objMES.CestadoPaso = Convert.ToString(dr["CestadoPaso"]);

            return (objMES);
        }


        #endregion

        #region "ProcesoLogistico_Aprobacion"

        public Model.Pac_HojaTrabajo Graba_PAC(Model.Pac_HojaTrabajo obj )
        {
            Model.Pac_HojaTrabajo MG = new Model.Pac_HojaTrabajo();

            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "PAC.spp_ins_msto_PAC",
                                                obj.cAñoProceso,
                                                obj.cCodPac,
                                                obj.cCodObjetoContratacion,
                                                obj.tDesContratacion,
                                                obj.cCodCeCo,
                                                obj.vDesUnidad,
                                                obj.cCodTipoProceso,
                                                obj.tJustificacion,
                                                obj.dfecReqLogistica,
                                                obj.dfecProConvocatoria,
                                                obj.cCodMoneda,
                                                obj.fValIncluyeIgv,
                                                obj.fValIncluyeTipoCambio,
                                                obj.iPlazoEjecucionContractual
                                                );

                MG.iIdPac = Convert.ToInt32(dt.Rows[0][0]);
                MG.cCodPac = Convert.ToString(dt.Rows[0][1]);

            }
            catch
            {
                MG.iIdPac = 0;
            }
            return MG;
        }

        public Model.Pac_HojaTrabajo Modifica_PAC(Model.Pac_HojaTrabajo obj)
        {
            Model.Pac_HojaTrabajo MG = new Model.Pac_HojaTrabajo();

            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "PAC.spp_upd_msto_PAC",
                                                obj.iIdPac,
                                                obj.cAñoProceso,
                                                obj.cCodPac,
                                                obj.cCodObjetoContratacion,
                                                obj.tDesContratacion,
                                                obj.cCodCeCo,
                                                obj.vDesUnidad,
                                                obj.cCodTipoProceso,
                                                obj.tJustificacion,
                                                obj.dfecReqLogistica,
                                                obj.dfecProConvocatoria,
                                                obj.cCodMoneda,
                                                obj.fValIncluyeIgv,
                                                obj.fValIncluyeTipoCambio,
                                                obj.iPlazoEjecucionContractual
                                                );

                MG.iIdPac = obj.iIdPac;
                MG.cCodPac = obj.cCodPac;

            }
            catch
            {
                MG.iIdPac = 0;
            }
            return MG;
        }

        public Model.Pac_HojaTrabajo Recupera_PAC(string strCodEmpresa,
                                 string strCodPAC
                                )
        {
            DataTable dt;

            dt = SqlHelper.ExecuteDataset(strConnection,
                                                "PAC.spp_sel_msto_PAC",
                                                strCodEmpresa,
                                                strCodPAC
                                                ).Tables[0];


            var PAC = (from order in dt.AsEnumerable()
                        select new Model.Pac_HojaTrabajo
                        {
                            iIdPac = order.Field<int>("iIdPac"),
                            cAñoProceso = order.Field<string>("cAñoProceso"),
                            cCodPac = order.Field<string>("cCodPac"),
                            cCodObjetoContratacion = order.Field<string>("cCodObjetoContratacion"),
                            tDesContratacion = order.Field<string>("tDesContratacion"),
                            cCodCeGe = order.Field<string>("cCodCeGe"),
                            cCodCeCo = order.Field<string>("cCodCeCo"),
                            vDesUnidad = order.Field<string>("vDesUnidad"),
                            cCodTipoProceso = order.Field<string>("cCodTipoProceso"),
                            tJustificacion = order.Field<string>("tJustificacion"),
                            dfecReqLogistica = order.Field<DateTime>("dfecReqLogistica"),
                            dfecProConvocatoria = order.Field<DateTime>("dfecProConvocatoria"),
                            cCodMoneda = order.Field<string>("cCodMoneda"),
                            fValIncluyeIgv = order.Field<double>("fValIncluyeIgv"),
                            fValIncluyeTipoCambio = order.Field<double>("fValIncluyeTipoCambio"),
                            iPlazoEjecucionContractual = order.Field<int>("iPlazoEjecucionContractual"),
                        }
                        ).SingleOrDefault();

            return PAC;

        }

        public Model.SolicitudAdquisicion Recupera_SolicitudAdquisicion( int intIdSolicitud
                                                                    )
        {
            DataTable dt;

            dt = SqlHelper.ExecuteDataset(strConnection,
                                                "PAC.spp_sel_mvto_SolicitudAdquisicion",
                                                intIdSolicitud
                                                ).Tables[0];


            var PAC = (from order in dt.AsEnumerable()
                       select new Model.SolicitudAdquisicion
                       {
                           iIdSolicitud = order.Field<int>("iIdSolicitud"),
                           cCodEmpresa = order.Field<string>("cCodEmpresa"),
                           cAñoProceso = order.Field<string>("cAñoProceso"),
                           cNumExpediente = order.Field<string>("cNumExpediente"),
                           dFecExpediente = order.Field<DateTime>("dfecExpediente"),
                           tDesAdquisicion = order.Field<string>("tDesAdquisicion"),
                           vTipoAdquisicion = order.Field<string>("vTipoAdquisicion"),
                           cNumTDR = order.Field<string>("cNumTDR"),
                           fImporte = order.Field<double>("fImporte"),
                       }
                        ).SingleOrDefault();

            return PAC;

        }


        public DataSet Lista_PAC(string strCodEmpresa,
                      string strAñoProceso
                     )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("PAC.spp_lst_msto_PAC", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Int);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodEmpresa;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;
        }

        public DataSet Lista_PAC_SolicitudAdquisicion(string strCodEmpresa,
              string strAñoProceso
             )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("PAC.spp_lst_mvto_SolicitudAdquisicion", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Int);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodEmpresa;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;
        }

        public DataSet lista_ProcesoLogistico_CreaProceso_Detalle(string strNumRequerimiento)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_msto_ProcesoLogistico_CreaProceso_Detalle",
                                             strNumRequerimiento
                                            );
        }
        public DataSet lista_ProcesoLogistico_CreaProceso(string strCodOperadorLogistico)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_msto_ProcesoLogistico_CreaProceso",
                                             strCodOperadorLogistico
                                            );
        }

        public DataSet ayuda_ProcesoLogistico(  string strCodEmpresa,
                                                string strAñoProceso
                                            )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_help_msto_ProcesoLogistico",
                                             strCodEmpresa,
                                             strAñoProceso
                                            );
        }
        public DataSet lista_ProcesoLogistico_Aprobacion(string strEstado)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_msto_ProcesoLogistico_Aprobacion",
                                             strEstado
                                            );
        }

        public bool graba_procesoLogistico_Aprobacion_DescarteFirma(string strNumRequerimiento,
                                                                      string strCodMotivoDescarte,
                                                                      DateTime dtpFecDescarte,
                                                                      string strNotaDescarte,
                                                                      string strCodEmpleado
                                                                    )
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                           "Logistica.spp_ins_msto_procesoLogistico_Aprobacion_DescarteFirma",
                                           strNumRequerimiento,
                                           strCodMotivoDescarte,
                                           dtpFecDescarte,
                                           strNotaDescarte,
                                           strCodEmpleado
                                         );
            }
            catch (Exception)
            {
                blnResult = false;
            }
            return blnResult;
        }

        public bool graba_procesoLogistico_Aprobacion_Firma(string strCodCentroGestor,
                                                                string strPaso,
                                                                string strNumRequerimiento,
                                                                string strCodEmpleado,
                                                                string strCodOperadorLogistico,
                                                                string strEsUnProceso,
                                                                string strCodPac
                                                            )
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                           "Logistica.spp_ins_msto_procesoLogistico_Aprobacion_Firma",
                                           strCodCentroGestor,
                                           strPaso,
                                           strNumRequerimiento,
                                           strCodEmpleado,
                                           strCodOperadorLogistico,
                                           strEsUnProceso,
                                           strCodPac
                                         );
            }
            catch (Exception)
            {
                blnResult = false;
            }
            return blnResult;
        }


        #endregion

        #region "ProcesoLogistico_FichaPresupuestal"
        public Boolean graba_ProcesoLogistico_FichaPresupuestal(Model.ProcesoLogistico_FichaPresupuestal obj)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                           "Logistica.spp_ins_msto_ProcesoLogistico_FichaPresupuestal",
                                           obj.cCodEmpresa,
                                            obj.cNumProcedimiento,
                                            obj.fImporte,
                                            obj.dFecMovimiento,
                                            obj.cCodEmpleado,
                                            obj.tObservacion,
                                            obj.cCodEstadoProcesoLogistico_FichaPresupuestal,
                                            obj.iIdPaso
                                         );
            }
            catch (Exception)
            {
                blnResult = false;
            }
            return blnResult;
        }
        #endregion

        #region "ValorEstimado"

        public Model.ValorEstimado recupera_ValorEstimado_Codigo(string strCodEmpresa,
                                                                 string strAñoProceso,
                                                                 string strNumProcedimiento
                                                                )
        {
            Model.ValorEstimado MC = new Model.ValorEstimado();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_sel_msto_procesoLogistico_ValorEstimado_Codigo",
                                             strCodEmpresa,
                                             strAñoProceso,
                                             strNumProcedimiento
                                           );
            if (dt.Rows.Count > 0)
            {
                MC.iIdValorEstimado = Convert.ToInt32(dt.Rows[0]["iIdValorEstimado"]);
                MC.cCodProveedor = Convert.ToString(dt.Rows[0]["cCodProveedor"]);
                MC.CcodTipoMoneda = Convert.ToString(dt.Rows[0]["CcodTipoMoneda"]);
                MC.FtipoCambio = Convert.ToDouble(dt.Rows[0]["FtipoCambio"]);
                MC.FprecioUnitario_Local = Convert.ToDouble(dt.Rows[0]["FprecioUnitario_Local"]);
                MC.FprecioUnitario_Extranjero = Convert.ToDouble(dt.Rows[0]["FprecioUnitario_Extranjero"]);
                MC.CcodTipoImpuesto = Convert.ToString(dt.Rows[0]["CcodTipoImpuesto"]);
                MC.Fimpuesto_Local = Convert.ToDouble(dt.Rows[0]["Fimpuesto_Local"]);
                MC.Fimpuesto_Extranjero = Convert.ToDouble(dt.Rows[0]["Fimpuesto_Extranjero"]);
                MC.dFecEstimacion = Convert.ToDateTime(dt.Rows[0]["dFecEstimacion"]);
                MC.tObservacion = Convert.ToString(dt.Rows[0]["tObservacion"]);
                MC.cCodEstadoValorEstimado = Convert.ToString(dt.Rows[0]["cCodEstadoValorEstimado"]);
            }
            return MC;
        }
        public Model.ValorEstimado recupera_ValorEstimado(int intIdValorEstimado)
        {
            Model.ValorEstimado MC = new Model.ValorEstimado();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_sel_msto_procesoLogistico_ValorEstimado",
                                             intIdValorEstimado
                                           );
            if (dt.Rows.Count > 0)
            {
                MC.iIdValorEstimado = Convert.ToInt32(dt.Rows[0]["iIdValorEstimado"]);
                MC.cCodProveedor = Convert.ToString(dt.Rows[0]["cCodProveedor"]);
                MC.CcodTipoMoneda = Convert.ToString(dt.Rows[0]["CcodTipoMoneda"]);
                MC.FtipoCambio = Convert.ToDouble(dt.Rows[0]["FtipoCambio"]);
                MC.FprecioUnitario_Local = Convert.ToDouble(dt.Rows[0]["FprecioUnitario_Local"]);
                MC.FprecioUnitario_Extranjero = Convert.ToDouble(dt.Rows[0]["FprecioUnitario_Extranjero"]);
                MC.CcodTipoImpuesto = Convert.ToString(dt.Rows[0]["CcodTipoImpuesto"]);
                MC.Fimpuesto_Local = Convert.ToDouble(dt.Rows[0]["Fimpuesto_Local"]);
                MC.Fimpuesto_Extranjero = Convert.ToDouble(dt.Rows[0]["Fimpuesto_Extranjero"]);
                MC.dFecEstimacion = Convert.ToDateTime(dt.Rows[0]["dFecEstimacion"]);
                MC.tObservacion = Convert.ToString(dt.Rows[0]["tObservacion"]);
                MC.cCodEstadoValorEstimado = Convert.ToString(dt.Rows[0]["cCodEstadoValorEstimado"]);
            }
            return MC;
        }

        public DataSet lista_ValorEstimado(string strCodEmpresa,
                                            string strAñoProceso,
                                         string strNumProcedimiento
                                        )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_msto_ProcesoLogistico_ValorEstimado",
                                             strCodEmpresa,
                                             strAñoProceso,
                                             strNumProcedimiento
                                            );
        }

        public bool graba_ValorEstimado_Cronograma(Model.ValorEstimado_Cronograma obj)
        {

            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                            "Logistica.spp_ins_msto_ProcesoLogistico_ValorEstimado_Cronograma",
                                            obj.cCodEmpresa,
                                            obj.cAñoProceso,
                                            obj.cNumProcedimiento,
                                            obj.Fene_0,
                                            obj.Ffeb_0,
                                            obj.Fmar_0,
                                            obj.Fabr_0,
                                            obj.Fmay_0,
                                            obj.Fjun_0,
                                            obj.Fjul_0,
                                            obj.Fago_0,
                                            obj.Fset_0,
                                            obj.Foct_0,
                                            obj.Fnov_0,
                                            obj.Fdic_0,
                                            obj.Fene_1,
                                            obj.Ffeb_1,
                                            obj.Fmar_1,
                                            obj.Fabr_1,
                                            obj.Fmay_1,
                                            obj.Fjun_1,
                                            obj.Fjul_1,
                                            obj.Fago_1,
                                            obj.Fset_1,
                                            obj.Foct_1,
                                            obj.Fnov_1,
                                            obj.Fdic_1,
                                            obj.Fene_2,
                                            obj.Ffeb_2,
                                            obj.Fmar_2,
                                            obj.Fabr_2,
                                            obj.Fmay_2,
                                            obj.Fjun_2,
                                            obj.Fjul_2,
                                            obj.Fago_2,
                                            obj.Fset_2,
                                            obj.Foct_2,
                                            obj.Fnov_2,
                                            obj.Fdic_2,
                                            obj.Fene_3,
                                            obj.Ffeb_3,
                                            obj.Fmar_3,
                                            obj.Fabr_3,
                                            obj.Fmay_3,
                                            obj.Fjun_3,
                                            obj.Fjul_3,
                                            obj.Fago_3,
                                            obj.Fset_3,
                                            obj.Foct_3,
                                            obj.Fnov_3,
                                            obj.Fdic_3,
                                            obj.cCodEstadoValorEstimado_Cronograma

                                        );
            }
            catch (Exception)
            {
                blnResult = false;
            }

            return blnResult;

        }

        public int graba_ValorEstimado(Model.ValorEstimado obj)
        {
            Model.ValorEstimado MC = new Model.ValorEstimado();
            DataTable dt = new DataTable();
            int intIdValorEstimado = obj.iIdValorEstimado;

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_ins_msto_ProcesoLogistico_ValorEstimado",
                                             obj.cCodEmpresa,
                                             obj.cAñoProceso,
                                             obj.cNumProcedimiento,
                                             obj.cCodProveedor,
                                             obj.CcodTipoMoneda,
                                             obj.FtipoCambio,
                                             obj.FprecioUnitario_Local,
                                             obj.FprecioUnitario_Extranjero,
                                             obj.CcodTipoImpuesto,
                                             obj.Fimpuesto_Local,
                                             obj.Fimpuesto_Extranjero,
                                             obj.dFecEstimacion,
                                             obj.tObservacion
                                           );
            if (dt.Rows.Count > 0)
            {
                intIdValorEstimado = Convert.ToInt32(dt.Rows[0]["iIdValorEstimado"]);
            }

            return intIdValorEstimado;

        }

        public Boolean modifica_ValorEstimado(Model.ValorEstimado obj)
        {
            Boolean blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                             "Logistica.spp_upd_msto_ProcesoLogistico_ValorEstimado",
                                             obj.iIdValorEstimado,
                                             obj.cCodEmpresa,
                                             obj.cAñoProceso,
                                             obj.cNumProcedimiento,
                                             obj.cCodProveedor,
                                             obj.CcodTipoMoneda,
                                             obj.FtipoCambio,
                                             obj.FprecioUnitario_Local,
                                             obj.FprecioUnitario_Extranjero,
                                             obj.CcodTipoImpuesto,
                                             obj.Fimpuesto_Local,
                                             obj.Fimpuesto_Extranjero,
                                             obj.dFecEstimacion,
                                             obj.tObservacion
                                           );
            }
            catch (Exception)
            {
                blnResult = false;
            }

            return blnResult;

        }

        public Boolean elimina_ValorEstimado(int intIdValorEstimado)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_msto_ProcesoLogistico_ValorEstimado",
                                          intIdValorEstimado
                                         );
            }
            catch (Exception)
            {
                blnResult = false;

            }
            return blnResult;
        }

        #endregion

        #region "Proveedor"

        public DataSet ayuda_Proveedor_Invitacion(string strCodEmpresa,
                                                  string strNumProcedimiento,
                                                  string strNumRequerimiento
                                                 )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_help_msto_Proveedor_Invitacion",
                                             strCodEmpresa,
                                             strNumProcedimiento,
                                             strNumRequerimiento
                                           );
        }
        public DataSet ayuda_Proveedor(string strCodEmpresa)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_help_msto_Proveedor",
                                             strCodEmpresa
                                           );
        }

        public Model.Proveedor recupera_Proveedor_Codigo(string strCodEmpresa,
                                                 string strCodProveedor
                                                )
        {

            DataTable dt = new DataTable();
            Model.Proveedor obj = new Model.Proveedor();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_sel_msto_Proveedor_Codigo",
                                             strCodEmpresa,
                                             strCodProveedor
                                           );
            if (dt.Rows.Count > 0)
            {
                obj.iIdProveedor = Convert.ToInt32(dt.Rows[0]["iIdProveedor"]);
                obj.cCodEmpresa = Convert.ToString(dt.Rows[0]["cCodEmpresa"]);
                obj.cCodProveedor = Convert.ToString(dt.Rows[0]["cCodProveedor"]);
                obj.vRazonSocial = Convert.ToString(dt.Rows[0]["vRazonSocial"]);
                obj.vEmail = Convert.ToString(dt.Rows[0]["vEmail"]);
                obj.cTelefono = Convert.ToString(dt.Rows[0]["cTelefono"]);
                obj.vDireccion = Convert.ToString(dt.Rows[0]["vDireccion"]);
                obj.cCodTipoDocumentoIdentidad = Convert.ToString(dt.Rows[0]["cCodTipoDocumentoIdentidad"]);
                obj.cNumDocumentoIdentidad = Convert.ToString(dt.Rows[0]["cNumDocumentoIdentidad"]);
                obj.cCodUbigeo = Convert.ToString(dt.Rows[0]["cCodUbigeo"]);
                obj.vDepartamento = Convert.ToString(dt.Rows[0]["vNomDepartamento"]);
                obj.vProvincia = Convert.ToString(dt.Rows[0]["vNomProvincia"]);
                obj.vDistrito = Convert.ToString(dt.Rows[0]["vNomDistrito"]);
            }
            return obj;
        }

        #endregion

        #region "Invitacion"

        public DataSet ayuda_Invitacion(string strCodEmpresa,
                                         string strNumProcedimiento,
                                         string strNumRequerimiento
                                        )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Logistica.spp_help_mvto_Invitacion",
                                            strCodEmpresa,
                                            strNumProcedimiento,
                                            strNumRequerimiento
                                            );
        }
        public Model.Invitacion recupera_Invitacion(int intIdInvitacion)
        {
            Model.Invitacion MC = new Model.Invitacion();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_sel_mvto_Invitacion",
                                             intIdInvitacion
                                           );
            if (dt.Rows.Count > 0)
            {
                MC.iIdInvitacion = Convert.ToInt32(dt.Rows[0]["iIdInvitacion"]);
                MC.cCodProveedor = Convert.ToString(dt.Rows[0]["cCodProveedor"]);
                MC.cRucProveedor = Convert.ToString(dt.Rows[0]["cRucProveedor"]);
                MC.vNomProveedor = Convert.ToString(dt.Rows[0]["vNomProveedor"]);
                MC.vEmail = Convert.ToString(dt.Rows[0]["vEmail"]);
                MC.dFecInvitacion = Convert.ToDateTime(dt.Rows[0]["dFecInvitacion"]);
                MC.bEsProveedor = Convert.ToBoolean(dt.Rows[0]["bEsProveedor"]);
            }
            return MC;
        }

        public DataSet lista_Invitacion(string strCodEmpresa,
                                         string strNumProcedimiento,
                                         string strNumRequerimiento
                                        )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_Invitacion",
                                             strCodEmpresa,
                                             strNumProcedimiento,
                                             strNumRequerimiento
                                            );
        }

        public int graba_Invitacion(Model.Invitacion obj)
        {
            Model.Invitacion MC = new Model.Invitacion();
            DataTable dt = new DataTable();
            int intIdInvitacion = obj.iIdInvitacion;

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_ins_mvto_Invitacion",
                                             obj.cCodEmpresa,
                                             obj.cNumProcedimiento,
                                             obj.cCodProveedor,
                                             obj.cRucProveedor,
                                             obj.vNomProveedor,
                                             obj.vEmail,
                                             obj.dFecInvitacion,
                                             obj.bEsProveedor,
                                             obj.cNumRequerimiento
                                           );
            if (dt.Rows.Count > 0)
            {
                intIdInvitacion = Convert.ToInt32(dt.Rows[0]["iIdInvitacion"]);
            }

            return intIdInvitacion;

        }

        public Boolean modifica_Invitacion(Model.Invitacion obj)
        {
            Boolean blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                             "Logistica.spp_ins_mvto_Invitacion",
                                             obj.iIdInvitacion,
                                             obj.cCodEmpresa,
                                             obj.cNumProcedimiento,
                                             obj.cCodProveedor,
                                             obj.cRucProveedor,
                                             obj.vNomProveedor,
                                             obj.vEmail,
                                             obj.dFecInvitacion,
                                             obj.bEsProveedor,
                                             obj.cNumRequerimiento
                                           );
            }
            catch (Exception)
            {
                blnResult = false;
            }

            return blnResult;

        }

        public Boolean elimina_Invitacion(int intIdInvitacion)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_mvto_Invitacion",
                                          intIdInvitacion
                                         );
            }
            catch (Exception)
            {
                blnResult = false;

            }
            return blnResult;
        }

        #endregion

        #region "Cotizacion"

        public DataSet ayuda_Cotizacion(string strCodEmpresa,
                                         string strNumProcedimiento
                                        )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Logistica.spp_help_mvto_Cotizacion",
                                            strCodEmpresa,
                                            strNumProcedimiento
                                            );
        }
        public Model.Cotizacion recupera_Cotizacion(int intIdCotizacion)
        {
            Model.Cotizacion MC = new Model.Cotizacion();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_sel_mvto_Cotizacion",
                                             intIdCotizacion
                                           );
            if (dt.Rows.Count > 0)
            {
                MC.iIdCotizacion = Convert.ToInt32(dt.Rows[0]["iIdCotizacion"]);
                MC.cCodProveedor = Convert.ToString(dt.Rows[0]["cCodProveedor"]);
                MC.cCodTipoMoneda = Convert.ToString(dt.Rows[0]["cCodTipoMoneda"]);
                MC.fImporteCotizacion = Convert.ToDouble(dt.Rows[0]["fImporteCotizacion"]);
                MC.dFecRecepcion = Convert.ToDateTime(dt.Rows[0]["dFecRecepcion"]);
                MC.tObservacion = Convert.ToString(dt.Rows[0]["tObservacion"]);
            }
            return MC;
        }

        public DataSet lista_Cotizacion(string strCodEmpresa,
                                         string strNumProcedimiento
                                        )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_Cotizacion",
                                             strCodEmpresa,
                                             strNumProcedimiento
                                            );
        }

        public int graba_Cotizacion(Model.Cotizacion obj)
        {
            Model.Cotizacion MC = new Model.Cotizacion();
            DataTable dt = new DataTable();
            int intIdCotizacion = obj.iIdCotizacion;

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_ins_mvto_Cotizacion",
                                             obj.cCodEmpresa,
                                             obj.cNumProcedimiento,
                                             obj.cCodProveedor,
                                             obj.cCodTipoMoneda,
                                             obj.fImporteCotizacion,
                                             obj.dFecRecepcion,
                                             obj.tObservacion
                                           );
            if (dt.Rows.Count > 0)
            {
                intIdCotizacion = Convert.ToInt32(dt.Rows[0]["iIdCotizacion"]);
            }

            return intIdCotizacion;

        }

        public Boolean modifica_Cotizacion(Model.Cotizacion obj)
        {
            Boolean blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                             "Logistica.spp_ins_mvto_Cotizacion",
                                             obj.iIdCotizacion,
                                             obj.cCodEmpresa,
                                             obj.cNumProcedimiento,
                                             obj.cCodProveedor,
                                             obj.cCodTipoMoneda,
                                             obj.fImporteCotizacion,
                                             obj.dFecRecepcion,
                                             obj.tObservacion
                                           );
            }
            catch (Exception)
            {
                blnResult = false;
            }

            return blnResult;

        }

        public Boolean elimina_Cotizacion(int intIdCotizacion)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_mvto_Cotizacion",
                                          intIdCotizacion
                                         );
            }
            catch (Exception)
            {
                blnResult = false;

            }
            return blnResult;
        }

        #endregion

        #region "OperadorLogistico"
        public DataSet Ayuda_OperadorLogistico_Reemplazo(string strCodOperadorLogistico)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_msto_OperadorLogistico_Reemplazo"
                                     );

            return ds;
        }

        public DataSet Ayuda_OperadorLogistico()
        {

            DataSet Ds = new DataSet();

            Ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_msto_OperadorLogistico"
                                     );

            return Ds;
        }

        public DataSet Ayuda_OperadorLogistico_Jefatura(string strCodJefatura)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_msto_OperadorLogistico_Jefatura",
                                      strCodJefatura
                                     );

            return ds;
        }



        public DataSet Lista_OperadorLogistico()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_msto_OperadorLogistico"
                                     );
        }

        public int Graba_OperadorLogistico(Model.OperadorLogistico obj)
        {

            int intIdEmpleado = 0;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_msto_OperadorLogistico",
                                            obj.cCodEmpleado,
                                            obj.cCodDependencia,
                                            obj.cCodCentroGestor,
                                            obj.vEmail,
                                            obj.vPasosAtras,
                                            obj.vPasosAdelante,
                                            obj.vLogUsuario
                                         );

                intIdEmpleado = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdEmpleado = 0;
            }

            return intIdEmpleado;
        }

        public int Modifica_OperadorLogistico(Model.OperadorLogistico obj)
        {

            int intIdEmpleado = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_msto_OperadorLogistico",
                                            obj.iIdEmpleado,
                                            obj.cCodEmpleado,
                                            obj.cCodDependencia,
                                            obj.cCodCentroGestor,
                                            obj.vEmail,
                                            obj.vPasosAtras,
                                            obj.vPasosAdelante,
                                            obj.vLogUsuario
                                         );

                intIdEmpleado = obj.iIdEmpleado;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdEmpleado = 0;
            }

            return intIdEmpleado;
        }

        public bool Elimina_OperadorLogistico(int intIdEmpleado)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_msto_OperadorLogistico",
                                           intIdEmpleado
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        #endregion

        #region "CargoComite"
        public DataSet Combo_CargoComite()
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_ctrl_CargoComite"
                                           );

        }

        #endregion

        #region "TipoIntegrante"
        public DataSet Combo_TipoIntegrante()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_ctrl_TipoIntegrante"
                                           );

        }

        #endregion


        #region "TipoPaso"
        public DataSet Combo_TipoPaso()
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_ctrl_TipoPaso"
                                           );

        }

        public DataSet Ayuda_TipoPaso()
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_help_ctrl_TipoPaso"
                                           );

        }

        #endregion

        #region "TipoComite"
        public DataSet Combo_TipoComite()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_ctrl_TipoComite"
                                           );

        }

        #endregion

        #region "TipoPlantilla_Paso"
        public DataSet Combo_TipoPlantilla()
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_cbo_ctrl_TipoPlantillaPaso"
                                     );

            return ds;
        }

        public DataSet Ayuda_TipoPlantilla()
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_ctrl_TipoPlantillaPaso"
                                     );

            return ds;
        }

        public Model.TipoPlantillaPaso Recupera_TipoPlantilla(int intIdTipoPlantilla
                                                             )
        {

            Model.TipoPlantillaPaso MTPP = new Model.TipoPlantillaPaso();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Logistica.spp_sel_ctrl_TipoPlantillaPaso",
                                      intIdTipoPlantilla
                                     );

            if (dt.Rows.Count > 0)
            {
                MTPP.iIdTipoPlantilla = Convert.ToInt32(dt.Rows[0]["iIdTipoPlantilla"]);
                MTPP.cCodTipoPlantilla = Convert.ToString(dt.Rows[0]["cCodTipoPlantilla"]);
                MTPP.vDesTipoPlantilla = Convert.ToString(dt.Rows[0]["vDesTipoPlantilla"]);
            }
            return MTPP;
        }

        public Model.TipoPlantillaPaso Recupera_TipoPlantilla_Codigo(string strCodTipoPlantilla
                                                             )
        {

            Model.TipoPlantillaPaso MTPP = new Model.TipoPlantillaPaso();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Logistica.spp_sel_ctrl_TipoPlantillaPaso_Codigo",
                                      strCodTipoPlantilla
                                     );

            if (dt.Rows.Count > 0)
            {
                MTPP.iIdTipoPlantilla = Convert.ToInt32(dt.Rows[0]["iIdTipoPlantilla"]);
                MTPP.cCodTipoPlantilla = Convert.ToString(dt.Rows[0]["cCodTipoPlantilla"]);
                MTPP.vDesTipoPlantilla = Convert.ToString(dt.Rows[0]["vDesTipoPlantilla"]);
            }
            return MTPP;
        }

        public int Graba_TipoPlantilla(Model.TipoPlantillaPaso obj
                                                     )
        {
            int intIdTipoPlantilla = obj.iIdTipoPlantilla;

            Model.TipoPlantillaPaso MTPP = new Model.TipoPlantillaPaso();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Logistica.spp_ins_ctrl_TipoPlantillaPaso",
                                      obj.cCodTipoPlantilla,
                                      obj.vDesTipoPlantilla
                                     );

            if (dt.Rows.Count > 0)
            {
                intIdTipoPlantilla = Convert.ToInt32(dt.Rows[0]["iIdTipoPlantilla"]);

            }
            return intIdTipoPlantilla;
        }

        public int Modifica_TipoPlantilla(Model.TipoPlantillaPaso obj
                                                     )
        {
            int intIdTipoPlantilla = obj.iIdTipoPlantilla;

            Model.TipoPlantillaPaso MTPP = new Model.TipoPlantillaPaso();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Logistica.spp_upd_ctrl_TipoPlantillaPaso",
                                      obj.iIdTipoPlantilla,
                                      obj.cCodTipoPlantilla,
                                      obj.vDesTipoPlantilla
                                     );

            return intIdTipoPlantilla;
        }

        public Boolean Elimina_TipoPlantilla(int intIdTipoPlantilla)
        {
            Boolean blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                      "Logistica.spp_del_ctrl_TipoPlantillaPaso",
                                      intIdTipoPlantilla
                                     );
            }
            catch (Exception)
            {

                blnResult = false;
            }
            return blnResult;
        }

        public DataSet Lista_TipoPlantilla()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_ctrl_TipoPlantillaPaso"
                                            );
        }

        #endregion

        #region "TipoProceso_Duracion"
        public DataSet Lista_TipoProceso_Duracion(string strAñoProceso,
                                            string strCodTipoProceso,
                                            string strCodObjetoContratacion
                                           )
        {

            return SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_lst_ctrl_TipoProceso_Duracion", strAñoProceso,
                                                                                                          strCodTipoProceso,
                                                                                                          strCodObjetoContratacion
                                                                                                          );
        }

        public DataSet Reporte_TipoProceso_Duracion(string strAñoProceso,
                                    string strCodTipoProceso,
                                    string strCodObjetoContratacion
                                   )
        {

            return SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_rpt_ctrl_TipoProceso_Duracion", strAñoProceso,
                                                                                                          strCodTipoProceso,
                                                                                                          strCodObjetoContratacion
                                                                                                          );
        }


        public Model.TipoProceso_Duracion Recupera_TipoProceso_Duracion(int intIdTipoProceso_Duracion)
        {

            DataTable dt = new DataTable();
            Model.TipoProceso_Duracion obj = new Model.TipoProceso_Duracion();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_TipoProceso_Duracion", intIdTipoProceso_Duracion);

            if (dt.Rows.Count > 0)
            {
                obj.iIdTipoProceso_Duracion = Convert.ToInt32(dt.Rows[0]["iIdTipoProceso_Duracion"]);
                obj.cAñoProceso = Convert.ToString(dt.Rows[0]["cAñoProceso"]);
                obj.cCodTipoProceso = Convert.ToString(dt.Rows[0]["cCodTipoProceso"]);
                obj.cCodObjetoContratacion = Convert.ToString(dt.Rows[0]["cCodObjetoContratacion"]);
                obj.iIdPaso = Convert.ToInt32(dt.Rows[0]["iIdPaso"]);
                obj.iDuracion = Convert.ToInt32(dt.Rows[0]["iDuracion"]);
                obj.iTipoDuracion = Convert.ToInt32(dt.Rows[0]["iTipoDuracion"]);
                obj.iDiaEmail = Convert.ToInt32(dt.Rows[0]["iDiaEmail"]);
                obj.cCodEstadoDuracionPaso = Convert.ToString(dt.Rows[0]["cCodEstadoDuracionPaso"]);
                obj.iOrden = Convert.ToInt32(dt.Rows[0]["iOrden"]);
            }
            return obj;

        }
        public int[] Graba_TipoProceso_Duracion(Model.TipoProceso_Duracion obj)
        {

            int[] intResult = new int[2];
            intResult[0] = 0;
            intResult[1] = 0;

            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_ins_ctrl_TipoProceso_Duracion", obj.cAñoProceso,
                                                                                    obj.cCodTipoProceso,
                                                                                    obj.cCodObjetoContratacion,
                                                                                    obj.iIdPaso,
                                                                                    obj.iDuracion,
                                                                                    obj.iTipoDuracion,
                                                                                    obj.iDiaEmail,
                                                                                    obj.cCodEstadoDuracionPaso
                                                          );
                intResult[0] = Convert.ToInt32(dt.Rows[0][0]);
                intResult[1] = Convert.ToInt32(dt.Rows[0][1]);
            }
            catch
            {
                intResult[0] = 0;
                intResult[1] = 0;
            }
            return intResult;
        }
        public int Modifica_TipoProceso_Duracion(Model.TipoProceso_Duracion obj)
        {
            int intIdTipoProceso_Duracion = 0;


            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Logistica.spp_upd_ctrl_TipoProceso_Duracion", obj.iIdTipoProceso_Duracion,
                                                                                    obj.cAñoProceso,
                                                                                    obj.cCodTipoProceso,
                                                                                    obj.cCodObjetoContratacion,
                                                                                    obj.iIdPaso,
                                                                                    obj.iDuracion,
                                                                                    obj.iTipoDuracion,
                                                                                    obj.iDiaEmail,
                                                                                    obj.cCodEstadoDuracionPaso,
                                                                                    obj.iOrden
                                                          );
                intIdTipoProceso_Duracion = obj.iIdTipoProceso_Duracion;
            }
            catch
            {
                intIdTipoProceso_Duracion = 0;
            }
            return intIdTipoProceso_Duracion;
        }

        public bool Elimina_TipoProceso_Duracion(int intIdTipoProceso_Duracion)
        {

            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Logistica.spp_del_ctrl_TipoProceso_Duracion", intIdTipoProceso_Duracion
                                          );

            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region "Comite"
        public DataSet Lista_Comite(int intIdDocumentoComite)
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_Comite",
                                            intIdDocumentoComite
                                           );

        }

        public Model.Comite Recupera_Comite(int intIdComite)
        {

            DataTable dt = new DataTable();
            Model.Comite obj = new Model.Comite();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_mvto_Comite", intIdComite);

            if (dt.Rows.Count == 0)
            {
                obj.iIdComite = 0;
                obj.iIdDocumentoComite = 0;
                obj.cNumProcedimiento = "";
                obj.tDesContratacion = "";
                obj.cCodTipoComite = "";
                obj.vDesTipoComite = "";
                obj.cCodEstadoComite = "";
            }
            else
            {
                obj.iIdComite = Convert.ToInt32(dt.Rows[0][0]);
                obj.iIdDocumentoComite = Convert.ToInt32(dt.Rows[0][1]);
                obj.cNumProcedimiento = Convert.ToString(dt.Rows[0][2]);
                obj.tDesContratacion = Convert.ToString(dt.Rows[0][3]);
                obj.cCodTipoComite = Convert.ToString(dt.Rows[0][4]);
                obj.vDesTipoComite = Convert.ToString(dt.Rows[0][5]);
                obj.cCodEstadoComite = Convert.ToString(dt.Rows[0][6]);
            }
            return obj;


        }
        public int Graba_Comite(Model.Comite obj)
        {

            int intIdComite = 0;
            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_mvto_Comite",
                                        obj.iIdDocumentoComite,
                                         obj.cNumProcedimiento,
                                        obj.cCodTipoComite
                                       );

                intIdComite = Convert.ToInt32(dt.Rows[0][0]);

            }
            catch
            {
                intIdComite = 0;
            }

            return intIdComite;

        }
        public int Modifica_Comite(Model.Comite obj)
        {
            int intIdComite = obj.iIdComite;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_mvto_Comite",
                                        obj.iIdComite,
                                         obj.cNumProcedimiento,
                                        obj.cCodTipoComite
                                       );
            }
            catch
            {
                intIdComite = 0;
            }

            return intIdComite;

        }

        public bool Elimina_Comite(int intIdComite)
        {


            bool blnResult = true;

            try
            {

                SqlHelper.ExecuteDataset(strConnection,
                                          "Logistica.spp_del_mvto_Comite",
                                        intIdComite
                                       );
            }
            catch
            {
                blnResult = false;
            }


            return blnResult;


        }

        #endregion

        #region "Comite_Integrante"
        public DataSet Ayuda_Comite_Integrante(string strAñoProceso)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_help_msto_Integrante", strAñoProceso);
        }
        public DataSet Lista_Comite_Integrante_Pac(string strAñoProceso,
                                                     string strCodIntegrante
                                                    )
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_msto_Comite_Integrante_Pac",
                                             strAñoProceso,
                                             strCodIntegrante
                                           );

        }
        public DataSet Lista_Comite_Integrante(int intIdComite)
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_Comite_Integrante",
                                             intIdComite
                                           );

        }

        public DataSet Lista_Comite_Integrante_Procedimiento(string strNumProcedimiento)
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_Comite_Integrante_Procedimiento",
                                             strNumProcedimiento
                                           );

        }


        public Model.Comite_Integrante Recupera_Comite_Integrante(int intIdComite_Integrante)
        {

            DataTable dt = new DataTable();
            Model.Comite_Integrante obj = new Model.Comite_Integrante();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_mvto_Comite_Integrante",
                                             intIdComite_Integrante);

            if (dt.Rows.Count == 0)
            {
                obj.iIdComite_Integrante = 0;
                obj.iIdComite = 0;
                obj.cCodTipoIntegrante = "";
                obj.cCodIntegrante = "";
                obj.cCodCargoComite = "";
                obj.cCodCondicionComite = "";
                obj.bFirmaActa = false;
            }
            else
            {
                obj.iIdComite_Integrante = Convert.ToInt32(dt.Rows[0][0]);
                obj.iIdComite = Convert.ToInt32(dt.Rows[0][1]);
                obj.cCodTipoIntegrante = Convert.ToString(dt.Rows[0][2]);
                obj.cCodIntegrante = Convert.ToString(dt.Rows[0][3]);
                obj.cCodCargoComite = Convert.ToString(dt.Rows[0][4]);
                obj.cCodCondicionComite = Convert.ToString(dt.Rows[0][5]);
                obj.bFirmaActa = Convert.ToBoolean(dt.Rows[0][6]);

            }
            return obj;
        }


        public int Graba_Comite_Integrante(Model.Comite_Integrante obj)
        {

            int intIdComite_Integrante = 0;
            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_mvto_Comite_Integrante",
                                        obj.iIdComite,
                                        obj.cCodTipoIntegrante,
                                        obj.cCodIntegrante,
                                        obj.cCodCargoComite,
                                        obj.cCodCondicionComite,
                                        obj.bFirmaActa
                                       );
                intIdComite_Integrante = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdComite_Integrante = 0;
            }

            return intIdComite_Integrante;

        }
        public int Modifica_Comite_Integrante(Model.Comite_Integrante obj)
        {
            int intIdComite_Integrante = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_mvto_Comite_Integrante",
                                          obj.iIdComite_Integrante,
                                        obj.iIdComite,
                                        obj.cCodTipoIntegrante,
                                        obj.cCodIntegrante,
                                        obj.cCodCargoComite,
                                        obj.cCodCondicionComite,
                                        obj.bFirmaActa
                                       );
                intIdComite_Integrante = obj.iIdComite_Integrante;

            }
            catch
            {
                intIdComite_Integrante = 0;
            }

            return intIdComite_Integrante;

        }
        public bool Elimina_Comite_Integrante(int intIdComite_Integrante)
        {


            bool blnResult = true;

            try
            {

                SqlHelper.ExecuteDataset(strConnection,
                                          "Logistica.spp_del_mvto_Comite_Integrante",
                                        intIdComite_Integrante
                                       );
            }
            catch
            {
                blnResult = false;
            }


            return blnResult;


        }

        #endregion

        #region "Comite_Integrnte_Reemplazo"
        public int Graba_Comite_Integrante_Reemplazo(Model.Comite_Integrante_Reemplazo obj)
        {
            int intIdComite_Integrante = 0;
            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_mvto_Comite_Integrante_Reemplazo",
                                        obj.iIdComite_Integrante,
                                        obj.cCodEstadoReemplazoComite,
                                        obj.cCodEstadoComiteIntegrante,
                                        obj.cCodReemplazo,
                                        obj.dFecInicio,
                                        obj.dFecFinal
                                       );
                intIdComite_Integrante = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdComite_Integrante = 0;
            }

            return intIdComite_Integrante;

        }

        #endregion

        #region "Comite_Resolucion"
        public DataSet Combo_ComiteResolucion()
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_mvto_DocumentoComite"
                                           );

        }
        public DataSet Combo_Comite_Resolucion_AñoProceso()
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_mvto_DocumentoComite_AñoProceso"
                                           );

        }
        public DataSet combo_Comite_Resolucion_NumDocumento(string strAñoProceso)
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_mvto_DocumentoComite_NumDocumento",
                                            strAñoProceso
                                           );

        }

        public DataSet Lista_Comite_Resolucion()
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_DocumentoComite"
                                           );

        }
        public Model.Comite_Resolucion Recupera_Comite_Resolucion(int intIdDocumentoComite)
        {

            DataTable dt = new DataTable();
            Model.Comite_Resolucion obj = new Model.Comite_Resolucion();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_mvto_DocumentoComite",
                                             intIdDocumentoComite);

            if (dt.Rows.Count == 0)
            {
                obj.iIdDocumentoComite = 0;
                obj.cPerProceso = "";
                obj.dFecDocumento = DateTime.Today;
                obj.cCodTipoDocumento = "";
                obj.cNumDocumento = "";
                obj.tNota = "";
                obj.bEstado = false;
            }
            else
            {
                obj.iIdDocumentoComite = Convert.ToInt32(dt.Rows[0][0]);
                obj.cPerProceso = Convert.ToString(dt.Rows[0][1]);
                obj.dFecDocumento = Convert.ToDateTime(dt.Rows[0][2]);
                obj.cCodTipoDocumento = Convert.ToString(dt.Rows[0][3]);
                obj.cNumDocumento = Convert.ToString(dt.Rows[0][4]);
                obj.tNota = Convert.ToString(dt.Rows[0][5]);
                obj.bEstado = Convert.ToBoolean(dt.Rows[0][6]);
            }
            return obj;

        }
        public int Graba_Comite_Resolucion(Model.Comite_Resolucion obj)
        {

            int intIdDocumentoComite = 0;
            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_mvto_DocumentoComite",
                                        obj.cPerProceso,
                                        obj.dFecDocumento,
                                        obj.cCodTipoDocumento,
                                        obj.cNumDocumento,
                                        obj.tNota
                                       );
                intIdDocumentoComite = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdDocumentoComite = 0;
            }

            return intIdDocumentoComite;

        }
        public int Modifica_Comite_Resolucion(Model.Comite_Resolucion obj)
        {
            int intIdDocumentoComite = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_mvto_DocumentoComite",
                                          obj.iIdDocumentoComite,
                                        obj.cPerProceso,
                                        obj.cCodTipoDocumento,
                                        obj.dFecDocumento,
                                        obj.cNumDocumento,
                                        obj.tNota
                                       );

                intIdDocumentoComite = obj.iIdDocumentoComite;
            }
            catch
            {
                intIdDocumentoComite = 0;
            }

            return intIdDocumentoComite;

        }

        public bool Elimina_Comite_Resolucion(int intIdDocumentoComite)
        {


            bool blnResultado = true;

            try
            {

                SqlHelper.ExecuteDataset(strConnection,
                                          "Logistica.spp_del_mvto_DocumentoComite",
                                        intIdDocumentoComite
                                       );
            }
            catch
            {
                blnResultado = false;
            }


            return blnResultado;


        }

        #endregion

        #region "CondicionComite"
        public DataSet Combo_CondicionComite()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_ctrl_CondicionComite"
                                           );

        }

        #endregion

        #region "Paso"
        public DataSet Lista_Paso(string strCodEmpresa)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_lst_ctrl_Paso", strCodEmpresa);
        }
        public DataSet Reporte_Paso(string strCodTipoPlantilla)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_rpt_ctrl_Paso", strCodTipoPlantilla);
        }

        public DataSet Combo_Paso_Reporte(string strCodTipoPlantilla)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_cbo_ctrl_Paso_Reporte", strCodTipoPlantilla);
        }

        public DataSet Combo_Paso(string strCodTipoPlantilla)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_cbo_ctrl_Paso", strCodTipoPlantilla);
        }

        public DataSet Combo_Paso_ID(string strCodTipoPlantilla)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_cbo_ctrl_Paso_ID", strCodTipoPlantilla);
        }

        public DataSet Ayuda_Paso_ID(string strCodTipoPlantilla)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_help_ctrl_Paso_ID", strCodTipoPlantilla);
        }

        public Model.Paso Recupera_Paso(int intIdPaso)
        {
            DataTable dt = new DataTable();
            Model.Paso obj = new Model.Paso();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_Paso", intIdPaso);

            if (dt.Rows.Count > 0)
            {
                obj.iIdPaso = Convert.ToInt32(dt.Rows[0]["iIdPaso"]);
                obj.cCodPaso = Convert.ToString(dt.Rows[0]["cCodPaso"]);
                obj.vDesPaso = Convert.ToString(dt.Rows[0]["vDesPaso"]);
                obj.cCodTipoPaso = Convert.ToString(dt.Rows[0]["cCodTipoPaso"]);
                obj.vDesTipoPaso = Convert.ToString(dt.Rows[0]["vDesTipoPaso"]);
                obj.vFormulario = Convert.ToString(dt.Rows[0]["vFormulario"]);
                obj.cCodTipoPlantilla = Convert.ToString(dt.Rows[0]["cCodTipoPlantilla"]);
                obj.vDesTipoPlantilla = Convert.ToString(dt.Rows[0]["vDesTipoPlantilla"]);
            }
            return obj;
        }

        public Model.Paso Recupera_Paso_codigo(string strCodTipoPlantilla,
                                                 string strCodPaso
                                               )
        {

            DataTable dt = new DataTable();
            Model.Paso obj = new Model.Paso();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Logistica.spp_sel_ctrl_Paso_codigo",
                                            strCodTipoPlantilla,
                                            strCodPaso
                                            );

            if (dt.Rows.Count > 0)
            {
                obj.iIdPaso = Convert.ToInt32(dt.Rows[0]["iIdPaso"]);
                obj.cCodPaso = Convert.ToString(dt.Rows[0]["cCodPaso"]);
                obj.vDesPaso = Convert.ToString(dt.Rows[0]["vDesPaso"]);
                obj.cCodTipoPaso = Convert.ToString(dt.Rows[0]["cCodTipoPaso"]);
                obj.vDesTipoPaso = Convert.ToString(dt.Rows[0]["vDesTipoPaso"]);
                obj.vFormulario = Convert.ToString(dt.Rows[0]["vFormulario"]);
                obj.cCodTipoPlantilla = Convert.ToString(dt.Rows[0]["cCodTipoPlantilla"]);
            }
            return obj;

        }
        public int Graba_Paso(Model.Paso obj)
        {
            int intIdPaso = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_ins_ctrl_Paso", obj.cCodPaso,
                                                                                     obj.vDesPaso,
                                                                                     obj.vDesPasoCorto,
                                                                                     obj.cCodTipoPaso,
                                                                                    obj.vFormulario,
                                                                                    obj.cCodTipoPlantilla
                                                          );
                intIdPaso = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdPaso = 0;
            }
            return intIdPaso;
        }
        public int Modifica_Paso(Model.Paso obj)
        {

            int intIdPaso = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Logistica.spp_upd_ctrl_Paso", obj.iIdPaso,
                                                                                     obj.cCodPaso,
                                                                                     obj.vDesPaso,
                                                                                     obj.cCodTipoPaso,
                                                                                    obj.vFormulario,
                                                                                    obj.cCodTipoPlantilla
                                                          );
                intIdPaso = obj.iIdPaso;
            }
            catch
            {
                intIdPaso = 0;
            }
            return intIdPaso;
        }

        public bool Elimina_Paso(int intIdPaso)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Logistica.spp_del_ctrl_Paso", intIdPaso);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region "TipoDocumento_ProcesoLogistico"
        public DataSet Ayuda_TipoDocumento_ProcesoLogistico()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_ctrl_TipoDocumento_ProcesoLogistico"
                                     );
        }
        public DataSet Combo_TipoDocumento_ProcesoLogistico()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_cbo_ctrl_TipoDocumento_ProcesoLogistico"
                                     );
        }

        #endregion

        #region "ProcesoLogistico_Version"
        public DataSet Combo_AñoProceso_Logistica()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_cbo_msto_ProcesoLogistico_AñoProceso");
        }

        public DataSet Combo_Version_Logistica(string strAñoProceso)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_cbo_msto_ProcesoLogistico_Version", strAñoProceso);
        }

        public Model.ProcesoLogistico_Version Recupera_Version_Logistica()
        {
            DataTable dt = new DataTable();
            Model.ProcesoLogistico_Version obj = new Model.ProcesoLogistico_Version();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_msto_ProcesoLogistico_Version");

            if (dt.Rows.Count == 0)
            {
                obj.CañoProceso = "";
                obj.Cversion = "";
            }
            else
            {
                obj.CañoProceso = Convert.ToString(dt.Rows[0]["CañoProceso"]);
                obj.Cversion = Convert.ToString(dt.Rows[0]["Cversion"]);
            }
            return obj;
        }

        #endregion

        #region "ProcesoLogistico_Paso_Cierre"
        public int Graba_ProcesoLogistico_Paso_Cierre(Model.ProcesoLogistico_Paso_Cierre obj)
        {


            int intIdProcesoLogistico_Paso_Cierre = 0;

            DataTable dt = new DataTable();


            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_msto_ProcesoLogistico_Paso_Cierre",
                                                obj.iIdProcesoLogistico_Paso,
                                                obj.cCodTipoCierrePaso,
                                                obj.dFecCierre,
                                                obj.cCodEmpleado,
                                                obj.cCodEstadoCierrePaso,
                                                obj.tNota
                                          );
                intIdProcesoLogistico_Paso_Cierre = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdProcesoLogistico_Paso_Cierre = 0;
            }

            return intIdProcesoLogistico_Paso_Cierre;

        }

        #endregion

        #region "ProcesoLogistico_Paso_CambioEstado"
        public DataSet Recupera_ProcesoLogistico_Paso_CambiaEstado(string strNumProcedimiento)
        {




            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_sel_msto_ProcesoLogistico_Paso_CambiaEstado",
                                             strNumProcedimiento
                                           );

        }
        public int Graba_ProcesoLogistico_Paso_CambioEstado(Model.ProcesoLogistico_Paso_CambioEstado obj)
        {

            int intIdProcesoLogistico_Estado = 0;
            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_Ins_msto_ProcesoLogistico_Paso_CambioEstado",
                                                obj.cNumProcedimiento,
                                                obj.cCodPaso_Actual,
                                                obj.cCodPaso_Inicial,
                                                obj.cCodPaso_Final,
                                                obj.cCodEstadoPaso,
                                                obj.tNota
                                          );

                intIdProcesoLogistico_Estado = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdProcesoLogistico_Estado = 0;
            }

            return intIdProcesoLogistico_Estado;

        }

        #endregion

        #region "ProcesoLogistico_Paso_Apertura"
        public Model.ProcesoLogistico_Paso_Apertura Recupera_ProcesoLogistico_Paso_Apertura(int intIdProcesoLogistico_Paso_Apertura)
        {

            DataTable dt = new DataTable();
            Model.ProcesoLogistico_Paso_Apertura obj = new Model.ProcesoLogistico_Paso_Apertura();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                         "Logistica.spp_sel_msto_ProcesoLogistico_Paso_Apertura",
                                          intIdProcesoLogistico_Paso_Apertura
                                        );

            if (dt.Rows.Count > 0)
            {
                obj.iIdProcesoLogistico_Paso_Apertura = Convert.ToInt32(dt.Rows[0]["iIdProcesoLogistico_Paso_Apertura"]);
                obj.iIdProcesoLogistico_Paso = Convert.ToInt32(dt.Rows[0]["iIdProcesoLogistico_Paso"]);
                obj.cCodTipoAperturaPaso = Convert.ToString(dt.Rows[0]["cCodTipoAperturaPaso"]);
                obj.dFecApertura = Convert.ToDateTime(dt.Rows[0]["dFecApertura"]);
                obj.cCodEmpleado = Convert.ToString(dt.Rows[0]["cCodEmpleado"]);
                obj.cCodEstadoAperturaPaso = Convert.ToString(dt.Rows[0]["cCodEstadoAperturaPaso"]);
                obj.tNota = Convert.ToString(dt.Rows[0]["tNota"]);
            }
            return obj;

        }

        public DateTime[] Recupera_ProcesoLogistico_Paso_Apertura_Inicio(string strNumProcedimiento)
        {

            DataTable dt = new DataTable();
            DateTime[] dateResult = new DateTime[2];
            dateResult[0] = DateTime.Today;
            dateResult[1] = DateTime.Today;

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_sel_msto_ProcesoLogistico_Paso_Apertura_Inicio",
                                             strNumProcedimiento
                                           );

                dateResult[0] = Convert.ToDateTime(dt.Rows[0][0]);
                dateResult[1] = Convert.ToDateTime(dt.Rows[0][1]);
            }
            catch
            {
                dateResult[0] = DateTime.Today;
                dateResult[1] = DateTime.Today;
            }


            return dateResult;

        }

        public DateTime[] Recupera_ProcesoLogistico_Paso_Apertura_Proceso(string strNumProcedimiento,
                                                                          string strCodTipoPlantilla,
                                                                          int intIdPaso
                                                                         )
        {

            DataTable dt = new DataTable();
            DateTime[] dateResult = new DateTime[2];
            dateResult[0] = DateTime.Today;
            dateResult[1] = DateTime.Today;

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_sel_msto_ProcesoLogistico_Paso_Apertura_Proceso",
                                             strNumProcedimiento,
                                             strCodTipoPlantilla,
                                             intIdPaso
                                           );

                dateResult[0] = Convert.ToDateTime(dt.Rows[0][0]);
                dateResult[1] = Convert.ToDateTime(dt.Rows[0][1]);
            }
            catch
            {
                dateResult[0] = DateTime.Today;
                dateResult[1] = DateTime.Today;
            }


            return dateResult;

        }


        public int Graba_ProcesoLogistico_Paso_Apertura(Model.ProcesoLogistico_Paso_Apertura objPA,
                                                        Model.ProcesoLogistico_Paso objP
                                                       )
        {


            int intIdProcesoLogistico_Paso_Apertura = 0;

            DataTable dt = new DataTable();


            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_msto_ProcesoLogistico_Paso_Apertura",
                                                objP.cNumProcedimiento,
                                                objP.iIdPaso,
                                                objP.dFecInicio,
                                                objP.dFecFinal,
                                                objPA.cCodTipoAperturaPaso,
                                                objPA.dFecApertura,
                                                objPA.cCodEmpleado,
                                                objPA.cCodEstadoAperturaPaso,
                                                objPA.tNota
                                          );
                intIdProcesoLogistico_Paso_Apertura = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdProcesoLogistico_Paso_Apertura = 0;
            }

            return intIdProcesoLogistico_Paso_Apertura;

        }

        public int Graba_ProcesoLogistico_Paso_Apertura_Inicio(Model.ProcesoLogistico_Paso objP,
                                                               Model.ProcesoLogistico_Paso_Apertura objPA
                                                              )
        {

            int intIdProcesoLogistico_Paso_Apertura = 0;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_msto_ProcesoLogistico_Paso_Apertura_inicio",
                                                objP.cNumProcedimiento,
                                                objP.iIdPaso,
                                                objP.dFecInicio,
                                                objP.dFecFinal,
                                                objPA.dFecApertura,
                                                objPA.cCodEmpleado,
                                                objPA.tNota
                                          );
                intIdProcesoLogistico_Paso_Apertura = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdProcesoLogistico_Paso_Apertura = 0;
            }

            return intIdProcesoLogistico_Paso_Apertura;

        }

        #endregion

        #region "ProcesoLogistico_Paso_Adjunto"
        public DataSet Lista_ProcesoLogistico_Paso_Adjunto(string strNumProcedimiento, int intIdPaso)
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_msto_ProcesoLogistico_Paso_Adjunto",
                                            strNumProcedimiento,
                                            intIdPaso
                                           );

        }

        public DataSet Lista_ProcesoLogistico_Paso_Adjunto_Consulta(string strNumProcedimiento, string strCodPaso)
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_msto_ProcesoLogistico_Paso_Adjunto_Consulta",
                                            strNumProcedimiento,
                                            strCodPaso
                                           );

        }

        public Model.ProcesoLogistico_Paso_Adjunto Recupera_ProcesoLogistico_Paso_Adjunto(int intIdAdjunto)
        {

            DataTable dt = new DataTable();
            Model.ProcesoLogistico_Paso_Adjunto obj = new Model.ProcesoLogistico_Paso_Adjunto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_msto_ProcesoLogistico_Paso_Adjunto", intIdAdjunto);

            if (dt.Rows.Count > 0)
            {
                obj.IidAdjunto = Convert.ToInt32(dt.Rows[0]["IidAdjunto"]);
                obj.CnumProcedimiento = Convert.ToString(dt.Rows[0]["CnumProcedimiento"]);
                obj.IidPaso = Convert.ToInt32(dt.Rows[0]["IidPaso"]);
                obj.VarchivoOriginal = Convert.ToString(dt.Rows[0]["VarchivoOriginal"]);
                obj.VarchivoActual = Convert.ToString(dt.Rows[0]["VarchivoActual"]);
                obj.Vnombre = Convert.ToString(dt.Rows[0]["Vnombre"]);
                obj.DfechaCreacion = Convert.ToDateTime(dt.Rows[0]["DfechaCreacion"]);
                obj.CcodEmpleado = Convert.ToString(dt.Rows[0]["CcodEmpleado"]);
                obj.CcodEstadoAdjunto = Convert.ToString(dt.Rows[0]["CcodEstadoAdjunto"]);
                obj.Tnota = Convert.ToString(dt.Rows[0]["Tnota"]);
            }
            return obj;


        }
        public int Graba_ProcesoLogistico_Paso_Adjunto(Model.ProcesoLogistico_Paso_Adjunto obj)
        {

            int intIdProcesoLogistico_Paso_Adjunto = 0;
            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_msto_ProcesoLogistico_Paso_Adjunto",
                                            obj.CnumProcedimiento,
                                            obj.IidPaso,
                                            obj.VarchivoOriginal,
                                            obj.VarchivoActual,
                                            obj.Vnombre,
                                            obj.DfechaCreacion,
                                            obj.CcodEmpleado,
                                            obj.CcodEstadoAdjunto,
                                            obj.Tnota
                                       );

                intIdProcesoLogistico_Paso_Adjunto = Convert.ToInt32(dt.Rows[0][0]);

            }
            catch
            {
                intIdProcesoLogistico_Paso_Adjunto = 0;
            }

            return intIdProcesoLogistico_Paso_Adjunto;

        }
        public int Modifica_ProcesoLogistico_Paso_Adjunto(Model.ProcesoLogistico_Paso_Adjunto obj)
        {
            int intIdProcesoLogistico_Paso_Adjunto = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_msto_ProcesoLogistico_Paso_Adjunto",
                                            obj.IidAdjunto,
                                            obj.CnumProcedimiento,
                                            obj.IidPaso,
                                            obj.VarchivoOriginal,
                                            obj.VarchivoActual,
                                            obj.Vnombre,
                                            obj.DfechaCreacion,
                                            obj.CcodEmpleado,
                                            obj.CcodEstadoAdjunto,
                                            obj.Tnota
                                       );
            }
            catch
            {
                intIdProcesoLogistico_Paso_Adjunto = 0;
            }

            return intIdProcesoLogistico_Paso_Adjunto;

        }

        public bool Elimina_ProcesoLogistico_Paso_Adjunto(int intIdAdjunto)
        {


            bool blnResult = true;

            try
            {

                SqlHelper.ExecuteDataset(strConnection,
                                          "Logistica.spp_del_msto_ProcesoLogistico_Paso_Adjunto",
                                        intIdAdjunto
                                       );
            }
            catch
            {
                blnResult = false;
            }


            return blnResult;


        }

        #endregion

        #region "ProcesoLogistico_Paso"
        public DataSet Combo_EstadoAperturaPaso()
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_ctrl_EstadoAperturaPaso"
                                           );

        }
        public DataSet Lista_ProcesoLogistico_Paso(string strAñoProceso,
                                                 string strNumProcedimiento
                                                )
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_msto_ProcesoLogistico_Paso",
                                             strAñoProceso,
                                             strNumProcedimiento
                                           );

        }
        public Model.ProcesoLogistico_Paso Recupera_ProcesoLogistico_Paso(int intIdProcesoLogistico_Paso)
        {
            DataTable dt = new DataTable();

            Model.ProcesoLogistico_Paso obj = new Model.ProcesoLogistico_Paso();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_sel_msto_ProcesoLogistico_Paso",
                                             intIdProcesoLogistico_Paso
                                           );

            if (dt.Rows.Count > 0)
            {
                obj.iIdProcesoLogistico_Paso = Convert.ToInt32(dt.Rows[0][0]);
                obj.cNumProcedimiento = Convert.ToString(dt.Rows[0][1]);
                obj.iIdPaso = Convert.ToInt32(dt.Rows[0][2]);
                obj.dFecInicio = Convert.ToDateTime(dt.Rows[0][3]);
                obj.dFecFinal = Convert.ToDateTime(dt.Rows[0][4]);
            }
            return obj;

        }

        public Model.ProcesoLogistico_Paso Recupera_ProcesoLogistico_Paso_Apertura_Procedimiento(string strNumProcedimiento)
        {
            DataTable dt = new DataTable();

            Model.ProcesoLogistico_Paso obj = new Model.ProcesoLogistico_Paso();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_sel_msto_ProcesoLogistico_paso_apertura_Procedimiento",
                                             strNumProcedimiento
                                           );

            if (dt.Rows.Count > 0)
            {
                obj.iIdProcesoLogistico_Paso = Convert.ToInt32(dt.Rows[0][0]);
                obj.cNumProcedimiento = Convert.ToString(dt.Rows[0][1]);
                obj.iIdPaso = Convert.ToInt32(dt.Rows[0][2]);
                obj.dFecInicio = Convert.ToDateTime(dt.Rows[0][3]);
                obj.dFecFinal = Convert.ToDateTime(dt.Rows[0][4]);
            }
            return obj;

        }

        public int Graba_ProcesoLogistico_Paso(Model.ProcesoLogistico_Paso obj)
        {
            int intIdProcesoLogistico_Detalle_Paso = 0;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_msto_ProcesoLogistico_Paso",
                                                obj.cNumProcedimiento,
                                                obj.iIdPaso,
                                                obj.cCodEmpleado,
                                                obj.dFecInicio,
                                                obj.dFecFinal,
                                                obj.dFecApertura,
                                                obj.tNota
                                          );
                intIdProcesoLogistico_Detalle_Paso = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdProcesoLogistico_Detalle_Paso = 0;
            }

            return intIdProcesoLogistico_Detalle_Paso;

        }



        public int Modifica_ProcesoLogistico_Paso(Model.ProcesoLogistico_Paso obj)
        {
            int intIdProcesoLogistico_Paso = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_msto_ProcesoLogistico_Paso",
                                                obj.iIdProcesoLogistico_Paso,
                                                obj.cNumProcedimiento,
                                                obj.iIdPaso,
                                                obj.dFecInicio,
                                                obj.dFecFinal,
                                                obj.dFecApertura,
                                                obj.dFecCierre,
                                                obj.tNota
                                          );

                intIdProcesoLogistico_Paso = obj.iIdProcesoLogistico_Paso;

            }
            catch
            {
                intIdProcesoLogistico_Paso = 0;
            }

            return intIdProcesoLogistico_Paso;

        }

        public bool Elimina_ProcesoLogistico_Paso(int intIdProcesoLogistico_Paso)
        {


            bool blnResult = true;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_msto_ProcesoLogistico_Paso",
                                        intIdProcesoLogistico_Paso
                                       );
            }
            catch
            {
                blnResult = false;
            }


            return blnResult;

        }

        #endregion

        #region "PeriodoProceso_OperadorLogistico"
        public Model.ProcesoLogistico_OperadorLogistico Recupera_ProcesoLogistico_OperadorLogistico(int intIdProcesoLogistico_OperadorLogistico)
        {
            DataTable dt = new DataTable();
            Model.ProcesoLogistico_OperadorLogistico obj = new Model.ProcesoLogistico_OperadorLogistico();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_msto_ProcesoLogistico_OperadorLogistico", intIdProcesoLogistico_OperadorLogistico);

            if (dt.Rows.Count > 0)
            {
                obj.iIdProcesoLogistico_OperadorLogistico = Convert.ToInt32(dt.Rows[0][0]);
                obj.cAñoProceso = Convert.ToString(dt.Rows[0][1]);
                obj.cCodProcesoLogistico = Convert.ToString(dt.Rows[0][2]);
                obj.cCodOperadorLogistico = Convert.ToString(dt.Rows[0][3]);
                obj.vApeOperadorLogistico = Convert.ToString(dt.Rows[0][4]);
            }
            return obj;
        }

        public Model.ProcesoLogistico_OperadorLogistico Recupera_ProcesoLogistico_OperadorLogistico_ItemProcesoLogistico(string strCodProcesoLogistico)
        {
            DataTable dt = new DataTable();
            Model.ProcesoLogistico_OperadorLogistico obj = new Model.ProcesoLogistico_OperadorLogistico();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_msto_ProcesoLogistico_OperadorLogistico_ItemProcesoLogistico", strCodProcesoLogistico);

            if (dt.Rows.Count > 0)
            {
                obj.iIdProcesoLogistico_OperadorLogistico = Convert.ToInt32(dt.Rows[0][0]);
                obj.cAñoProceso = Convert.ToString(dt.Rows[0][1]);
                obj.cCodProcesoLogistico = Convert.ToString(dt.Rows[0][2]);
                obj.cCodOperadorLogistico = Convert.ToString(dt.Rows[0][3]);
                obj.vApeOperadorLogistico = Convert.ToString(dt.Rows[0][4]);
            }
            return obj;
        }

        public Boolean Graba_ProcesoLogistico_OperadorLogistico_Reemplazo(int intIdProcesoLogistico_OperadorLogistico,
                                                                        string strCodTipoOperadorLogistico,
                                                                        string strCodMotivoReemplazo,
                                                                        string strCodReemplazo,
                                                                        DateTime dateFecInicio,
                                                                        DateTime dateFecFinal
                                                                       )
        {
            bool blnResult = true;
            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_ins_msto_ProcesoLogistico_OperadorLogistico_Reemplazo",
                                        intIdProcesoLogistico_OperadorLogistico,
                                        strCodTipoOperadorLogistico,
                                        strCodMotivoReemplazo,
                                        strCodReemplazo,
                                        dateFecInicio,
                                        dateFecFinal
                                       );
            }
            catch (Exception ex)
            {
                blnResult = false;
            }

            return blnResult;

        }

        public DataSet Lista_ProcesoLogistico_OperadorLogistico(string strCodCompañia,
                                                                 string strAñoProceso,
                                                                 string strCodOperadorLogistico
                                                               )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_ProcesoLogistico_OperadorLogistico",
                                             strCodCompañia,
                                             strAñoProceso,
                                             strCodOperadorLogistico
                                            );
        }

        public DataSet Lista_ProcesoLogistico_Programacion(string strCodCompañia,
                                                            string strCodTipoProceso,
                                                            string strCodObjetoContratacion,
                                                            DateTime dateFecPosibleCierre,
                                                            int intTipoReporte
                                                       )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_rpt_msto_ProcesoLogistico_Seguimiento_CurvaS",
                                             strCodCompañia,
                                             strCodTipoProceso,
                                             strCodObjetoContratacion,
                                             dateFecPosibleCierre,
                                             intTipoReporte
                                            );
        }


        public int Graba_ProcesoLogistico_OperadorLogistico(Model.ProcesoLogistico_OperadorLogistico obj)
        {

            int intIdProcesoLogistico_OperadorLogistico = 0;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_msto_ProcesoLogistico_OperadorLogistico",
                                            obj.cAñoProceso,
                                            obj.cCodProcesoLogistico,
                                            obj.cCodOperadorLogistico
                                         );

                intIdProcesoLogistico_OperadorLogistico = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdProcesoLogistico_OperadorLogistico = 0;
            }

            return intIdProcesoLogistico_OperadorLogistico;
        }

        public int Modifica_ProcesoLogistico_OperadorLogistico(Model.ProcesoLogistico_OperadorLogistico obj)
        {



            int intIdProcesoLogistico_OperadorLogistico = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_msto_ProcesoLogistico_OperadorLogistico",
                                            obj.iIdProcesoLogistico_OperadorLogistico,
                                            obj.cAñoProceso,
                                            obj.cCodProcesoLogistico,
                                            obj.cCodOperadorLogistico
                                         );

                intIdProcesoLogistico_OperadorLogistico = obj.iIdProcesoLogistico_OperadorLogistico;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdProcesoLogistico_OperadorLogistico = 0;
            }

            return intIdProcesoLogistico_OperadorLogistico;
        }

        public bool Elimina_ProcesoLogistico_OperadorLogistico(int intIdProcesoLogistico_OperadorLogistico)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_msto_ProcesoLogistico_OperadorLogistico",
                                           intIdProcesoLogistico_OperadorLogistico
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_ProcesoLogistico_OperadorLogistico(string strAñoProceso,
                                                        string strCodOperadorLogistico
                                                    )
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_msto_ProcesoLogistico_OperadorLogistico",
                                      strAñoProceso,
                                      strCodOperadorLogistico
                                     );

            return ds;
        }

        public DataSet Ayuda_ProcesoLogistico_OperadorLogistico_itemProcesoLogistico_Todos(string strAñoProceso)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_help_msto_ProcesoLogistico_OperadorLogistico_itemProcesoLogistico_Todos", strAñoProceso);
        }

        #endregion

        #region "ProcesoLogistico_Modificado"
        public Model.ProcesoLogistico_Modificado Recupera_ProcesoLogistico_Modificado(int intIdProcesoLogistico_Modificado)
        {
            DataTable dt = new DataTable();
            Model.ProcesoLogistico_Modificado obj = new Model.ProcesoLogistico_Modificado();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_msto_ProcesoLogistico_Modificado", intIdProcesoLogistico_Modificado);

            if (dt.Rows.Count > 0)
            {
                obj.iIdProcesoLogistico_Modificado = Convert.ToInt32(dt.Rows[0]["iIdProcesoLogistico_Modificado"]);
                obj.cNumProcedimiento = Convert.ToString(dt.Rows[0]["cNumProcedimiento"]);
                obj.cAñoProceso = Convert.ToString(dt.Rows[0]["cAñoProceso"]);
                obj.cVersion = Convert.ToString(dt.Rows[0]["cVersion"]);
                obj.dFecModificado = Convert.ToDateTime(dt.Rows[0]["dFecModificado"]);
                obj.tMotModificado = Convert.ToString(dt.Rows[0]["tMotModificado"]);
                obj.cCodEmpleado = Convert.ToString(dt.Rows[0]["cCodEmpleado"]);
                obj.vApeEmpleado = Convert.ToString(dt.Rows[0]["vApeEmpleado"]);
                obj.cCodTipoDocumento = Convert.ToString(dt.Rows[0]["cCodTipoDocumento"]);
                obj.vDesTipoDocumento = Convert.ToString(dt.Rows[0]["vDesTipoDocumento"]);
                obj.cNumDocumento = Convert.ToString(dt.Rows[0]["cNumDocumento"]);
                obj.cCodMotivoModificacion = Convert.ToString(dt.Rows[0]["cCodMotivoModificacion"]);
                obj.vDesTipoMotivo = Convert.ToString(dt.Rows[0]["vDesTipoMotivo"]);
            }

            return obj;
        }

        #endregion

        #region "ProcesoLogistico_Insertado"
        public Model.ProcesoLogistico_Insertado Recupera_ProcesoLogistico_Insertado(int intIdProcesoLogistico_Insertado)
        {
            DataTable dt = new DataTable();
            Model.ProcesoLogistico_Insertado obj = new Model.ProcesoLogistico_Insertado();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_msto_ProcesoLogistico_Insertado", intIdProcesoLogistico_Insertado);

            if (dt.Rows.Count > 0)
            {
                obj.iIdProcesoLogistico_Insertado = Convert.ToInt32(dt.Rows[0]["iIdProcesoLogistico_Insertado"]);
                obj.cNumProcedimiento = Convert.ToString(dt.Rows[0]["cNumProcedimiento"]);
                obj.cAñoProceso = Convert.ToString(dt.Rows[0]["cAñoProceso"]);
                obj.cVersion = Convert.ToString(dt.Rows[0]["cVersion"]);
                obj.dFecInsertado = Convert.ToDateTime(dt.Rows[0]["dFecInsertado"]);
                obj.tMotInsertado = Convert.ToString(dt.Rows[0]["tMotInsertado"]);
                obj.cCodEmpleado = Convert.ToString(dt.Rows[0]["cCodEmpleado"]);
                obj.vApeEmpleado = Convert.ToString(dt.Rows[0]["vApeEmpleado"]);
                obj.cCodTipoDocumento = Convert.ToString(dt.Rows[0]["cCodTipoDocumento"]);
                obj.vDesTipoDocumento = Convert.ToString(dt.Rows[0]["vDesTipoDocumento"]);
                obj.cNumDocumento = Convert.ToString(dt.Rows[0]["cNumDocumento"]);
                obj.cCodMotivoInserccion = Convert.ToString(dt.Rows[0]["cCodMotivoInserccion"]);
                obj.vDesTipoMotivo = Convert.ToString(dt.Rows[0]["vDesTipoMotivo"]);
            }

            return obj;
        }

        #endregion

        #region "ProcesoLogistico_Eliminado"
        public Model.ProcesoLogistico_Eliminado Recupera_ProcesoLogistico_Eliminado(int intIdProcesoLogistico_Eliminado)
        {
            DataTable dt = new DataTable();
            Model.ProcesoLogistico_Eliminado obj = new Model.ProcesoLogistico_Eliminado();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_msto_ProcesoLogistico_Eliminado", intIdProcesoLogistico_Eliminado);

            if (dt.Rows.Count > 0)
            {
                obj.iIdProcesoLogistico_Eliminado = Convert.ToInt32(dt.Rows[0]["iIdProcesoLogistico_Eliminado"]);
                obj.cNumProcedimiento = Convert.ToString(dt.Rows[0]["cNumProcedimiento"]);
                obj.cAñoProceso = Convert.ToString(dt.Rows[0]["cAñoProceso"]);
                obj.cVersion = Convert.ToString(dt.Rows[0]["cVersion"]);
                obj.dFecEliminado = Convert.ToDateTime(dt.Rows[0]["dFecEliminado"]);
                obj.tMotEliminado = Convert.ToString(dt.Rows[0]["tMotEliminado"]);
                obj.cCodEmpleado = Convert.ToString(dt.Rows[0]["cCodEmpleado"]);
                obj.vApeEmpleado = Convert.ToString(dt.Rows[0]["vApeEmpleado"]);
                obj.cCodTipoDocumento = Convert.ToString(dt.Rows[0]["cCodTipoDocumento"]);
                obj.vDesTipoDocumento = Convert.ToString(dt.Rows[0]["vDesTipoDocumento"]);
                obj.cNumDocumento = Convert.ToString(dt.Rows[0]["cNumDocumento"]);
                obj.cCodMotivoEliminacion = Convert.ToString(dt.Rows[0]["cCodMotivoEliminacion"]);
                obj.vDesTipoMotivo = Convert.ToString(dt.Rows[0]["vDesTipoMotivo"]);

            }

            return obj;
        }

        #endregion

        #region "ProcesoLogistico_Cabecera_Adjunto"
        public DataSet Lista_ProcesoLogistico_Cabecera_Adjunto(string strAñoProceso,
                                            string strVersion
                                           )
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_ProcesoLogistico_Cabecera_Adjunto",
                                            strAñoProceso,
                                            strVersion
                                           );

        }

        public DataSet Lista_ProcesoLogistico_Cabecera_Adjunto_Consulta(string strAñoProceso,
                                                    string strVersion
                                                   )
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_ProcesoLogistico_Cabecera_Adjunto_Consulta",
                                            strAñoProceso,
                                            strVersion
                                           );

        }

        public Model.ProcesoLogistico_Cabecera_Adjunto Recupera_ProcesoLogistico_Cabecera_Adjunto(int intIdAdjunto)
        {

            DataTable dt = new DataTable();
            Model.ProcesoLogistico_Cabecera_Adjunto obj = new Model.ProcesoLogistico_Cabecera_Adjunto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_mvto_ProcesoLogistico_Cabecera_Adjunto", intIdAdjunto);

            if (dt.Rows.Count > 0)
            {
                obj.IidAdjunto = Convert.ToInt32(dt.Rows[0]["IidAdjunto"]);
                obj.CañoProceso = Convert.ToString(dt.Rows[0]["CañoProceso"]);
                obj.Cversion = Convert.ToString(dt.Rows[0]["Cversion"]);
                obj.VarchivoOriginal = Convert.ToString(dt.Rows[0]["VarchivoOriginal"]);
                obj.VarchivoActual = Convert.ToString(dt.Rows[0]["VarchivoActual"]);
                obj.Vnombre = Convert.ToString(dt.Rows[0]["Vnombre"]);
                obj.DfechaCreacion = Convert.ToDateTime(dt.Rows[0]["DfechaCreacion"]);
                obj.CcodEmpleado = Convert.ToString(dt.Rows[0]["CcodEmpleado"]);
                obj.CcodEstadoAdjunto = Convert.ToString(dt.Rows[0]["CcodEstadoAdjunto"]);
                obj.Tnota = Convert.ToString(dt.Rows[0]["Tnota"]);
            }
            return obj;


        }
        public int Graba_ProcesoLogistico_Cabecera_Adjunto(Model.ProcesoLogistico_Cabecera_Adjunto obj)
        {

            int intIdProcesoLogistico_Cabecera_Adjunto = 0;
            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_mvto_ProcesoLogistico_Cabecera_Adjunto",
                                            obj.CañoProceso,
                                            obj.Cversion,
                                            obj.VarchivoOriginal,
                                            obj.VarchivoActual,
                                            obj.Vnombre,
                                            obj.DfechaCreacion,
                                            obj.CcodEmpleado,
                                            obj.CcodEstadoAdjunto,
                                            obj.Tnota
                                       );

                intIdProcesoLogistico_Cabecera_Adjunto = Convert.ToInt32(dt.Rows[0][0]);

            }
            catch
            {
                intIdProcesoLogistico_Cabecera_Adjunto = 0;
            }

            return intIdProcesoLogistico_Cabecera_Adjunto;

        }
        public int Modifica_ProcesoLogistico_Cabecera_Adjunto(Model.ProcesoLogistico_Cabecera_Adjunto obj)
        {
            int intIdProcesoLogistico_Cabecera_Adjunto = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_mvto_ProcesoLogistico_Cabecera_Adjunto",
                                            obj.IidAdjunto,
                                            obj.CañoProceso,
                                            obj.Cversion,
                                            obj.VarchivoOriginal,
                                            obj.VarchivoActual,
                                            obj.Vnombre,
                                            obj.DfechaCreacion,
                                            obj.CcodEmpleado,
                                            obj.CcodEstadoAdjunto,
                                            obj.Tnota
                                       );
            }
            catch
            {
                intIdProcesoLogistico_Cabecera_Adjunto = 0;
            }

            return intIdProcesoLogistico_Cabecera_Adjunto;

        }

        public bool Elimina_ProcesoLogistico_Cabecera_Adjunto(int intIdAdjunto)
        {


            bool blnResult = true;

            try
            {

                SqlHelper.ExecuteDataset(strConnection,
                                          "Logistica.spp_del_mvto_ProcesoLogistico_Cabecera_Adjunto",
                                        intIdAdjunto
                                       );
            }
            catch
            {
                blnResult = false;
            }


            return blnResult;


        }

        #endregion

        #region "ProcesoLogistico_Adjunto"
        public DataSet Lista_ProcesoLogistico_Adjunto(string strNumProcedimiento)
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_msto_ProcesoLogistico_Adjunto",
                                            strNumProcedimiento
                                           );

        }

        public DataSet Lista_ProcesoLogistico_Adjunto_Consulta(string strNumProcedimiento)
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_msto_ProcesoLogistico_Adjunto_Consulta",
                                            strNumProcedimiento
                                           );

        }

        public Model.ProcesoLogistico_Adjunto Recupera_ProcesoLogistico_Adjunto(int intIdAdjunto)
        {

            DataTable dt = new DataTable();
            Model.ProcesoLogistico_Adjunto obj = new Model.ProcesoLogistico_Adjunto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_msto_ProcesoLogistico_Adjunto", intIdAdjunto);

            if (dt.Rows.Count > 0)
            {
                obj.IidAdjunto = Convert.ToInt32(dt.Rows[0]["IidAdjunto"]);
                obj.CnumProcedimiento = Convert.ToString(dt.Rows[0]["CnumProcedimiento"]);
                obj.VarchivoOriginal = Convert.ToString(dt.Rows[0]["VarchivoOriginal"]);
                obj.DfechaCreacion = Convert.ToDateTime(dt.Rows[0]["DfechaCreacion"]);
                obj.CcodEmpleado = Convert.ToString(dt.Rows[0]["CcodEmpleado"]);
                obj.CcodEstadoAdjunto = Convert.ToString(dt.Rows[0]["CcodEstadoAdjunto"]);
                obj.Tnota = Convert.ToString(dt.Rows[0]["Tnota"]);
            }
            return obj;


        }
        public int Graba_ProcesoLogistico_Adjunto(Model.ProcesoLogistico_Adjunto obj)
        {

            int intIdProcesoLogistico_Adjunto = 0;
            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_msto_ProcesoLogistico_Adjunto",
                                            obj.CnumProcedimiento,
                                            obj.VarchivoOriginal,
                                            obj.DfechaCreacion,
                                            obj.CcodEmpleado,
                                            obj.CcodEstadoAdjunto,
                                            obj.Tnota
                                       );

                intIdProcesoLogistico_Adjunto = Convert.ToInt32(dt.Rows[0]["iIdAdjunto"]);

            }
            catch
            {
                intIdProcesoLogistico_Adjunto = 0;
            }

            return intIdProcesoLogistico_Adjunto;

        }
        public int Modifica_ProcesoLogistico_Adjunto(Model.ProcesoLogistico_Adjunto obj)
        {
            int intIdProcesoLogistico_Adjunto = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_msto_ProcesoLogistico_Adjunto",
                                            obj.IidAdjunto,
                                            obj.CnumProcedimiento,
                                            obj.VarchivoOriginal,
                                            obj.DfechaCreacion,
                                            obj.CcodEmpleado,
                                            obj.CcodEstadoAdjunto,
                                            obj.Tnota
                                       );
            }
            catch
            {
                intIdProcesoLogistico_Adjunto = 0;
            }

            return intIdProcesoLogistico_Adjunto;

        }

        public bool Elimina_ProcesoLogistico_Adjunto(int intIdAdjunto)
        {


            bool blnResult = true;

            try
            {

                SqlHelper.ExecuteDataset(strConnection,
                                          "Logistica.spp_del_msto_ProcesoLogistico_Adjunto",
                                        intIdAdjunto
                                       );
            }
            catch
            {
                blnResult = false;
            }


            return blnResult;


        }

        #endregion

        #region "Duracion"
        public DataSet Lista_ProcesoLogistico_Duracion(string strAñoProceso,
                                    string strVersion,
                                    string strNumProcedimiento
                                 )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_lst_msto_ProcesoLogistico_Duracion",
                                                            strAñoProceso,
                                                            strVersion,
                                                            strNumProcedimiento
                                           );
        }

        public DataSet Lista_ProcesoLogistico_Duracion_Consulta(string strAñoProceso,
                                            string strVersion,
                                            string strNumProcedimiento
                                         )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_lst_msto_ProcesoLogistico_Duracion_Consulta",
                                                            strAñoProceso,
                                                            strVersion,
                                                            strNumProcedimiento
                                           );
        }


        public Model.ProcesoLogistico_Duracion Graba_ProcesoLogistico_Duracion(Model.ProcesoLogistico_Duracion obj)
        {


            DataSet ds = new DataSet();
            try
            {
                ds = SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_ins_msto_ProcesoLogistico_Duracion", obj.CnumProcedimiento,
                                                                                    obj.CcodPaso,
                                                                                    obj.Iduracion,
                                                                                    obj.ItipoDuracion,
                                                                                    obj.IdiaEmail,
                                                                                    obj.CcodEstadoDuracionPaso
                                                          );
                obj.IidProcesoLogistico_Duracion = Convert.ToInt32(ds.Tables[0].Rows[0]["iIdProcesoLogistico_Duracion"]);
                obj.Iorden = Convert.ToInt32(ds.Tables[0].Rows[0]["iOrden"]);
            }
            catch (Exception ex)
            {
            }
            return obj;
        }


        public int Modifica_ProcesoLogistico_Duracion(Model.ProcesoLogistico_Duracion obj)
        {
            int intIdProcesoLogistico_Duracion = 0;

            DataSet ds = new DataSet();
            try
            {
                ds = SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_upd_msto_ProcesoLogistico_Duracion",
                                                                                    obj.IidProcesoLogistico_Duracion,
                                                                                    obj.CcodPaso,
                                                                                    obj.Iduracion,
                                                                                    obj.ItipoDuracion,
                                                                                    obj.IdiaEmail,
                                                                                    obj.CcodEstadoDuracionPaso
                                                          );
                intIdProcesoLogistico_Duracion = obj.IidProcesoLogistico_Duracion;
            }
            catch (Exception ex)
            {
                intIdProcesoLogistico_Duracion = 0;
            }
            return intIdProcesoLogistico_Duracion;
        }






        public object recupera_ProcesoLogistico_Duracion(string strNumProcedimiento,
                                            string strCodPaso
                                           )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_sel_mvto_ProcesoLogistico_Detalle_Duracion_Detalle", strNumProcedimiento, strCodPaso);
        }

        public int Recupera_ProcesoLogistico_Duracion_Orden(string strNumProcedimiento)
        {

            int intIdProcesoLogistico_Duracion = 0;
            DataSet ds = new DataSet();
            try
            {
                ds = SqlHelper.ExecuteDataset(strConnection, "Logistica.spp_sel_msto_ProcesoLogistico_Duracion_Orden", strNumProcedimiento);
                intIdProcesoLogistico_Duracion = Convert.ToInt32(ds.Tables[0].Rows[0]["iIdProcesoLogistico_Duracion"]);
            }
            catch (Exception ex)
            {
                intIdProcesoLogistico_Duracion = 0;
            }
            return intIdProcesoLogistico_Duracion;
        }






        public bool elimina_mvto_ProcesoLogistico_Detalle_Duracion(int intIdProcesoLogistico_Detalle_Duracion)
        {

            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Logistica.spp_del_mvto_ProcesoLogistico_Detalle_Duracion", intIdProcesoLogistico_Detalle_Duracion
                                          );

            }
            catch (Exception ex)
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region "MotivoEliminacion_ProcesoLogistico"
        public DataSet Ayuda_TipoMotivoEliminacionProcesoLogistico()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_ctrl_TipoMotivoEliminacionProcesoLogistico"
                                     );
        }
        public DataSet Combo_TipoMotivoEliminacionProcesoLogistico()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_cbo_ctrl_TipoMotivoEliminacionProcesoLogistico"
                                     );
        }

        #endregion

        #region "MotivoModificacion_ProcesoLogistico"
        public DataSet Ayuda_TipoMotivoModificacionProcesoLogistico()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_ctrl_TipoMotivoModificacionProcesoLogistico"
                                     );
        }
        public DataSet Combo_TipoMotivoModificacionProcesoLogistico()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_cbo_ctrl_TipoMotivoModificacionProcesoLogistico"
                                     );
        }

        #endregion

        #region "MotivoInserccion_ProcesoLogistico"
        public DataSet Ayuda_TipoMotivoInserccionProcesoLogistico()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_ctrl_TipoMotivoInserccionProcesoLogistico"
                                     );
        }
        public DataSet Combo_TipoMotivoInserccionProcesoLogistico()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_cbo_ctrl_TipoMotivoInserccionProcesoLogistico"
                                     );
        }

        #endregion

        #region "TipoAdquisicion"
        public DataSet Combo_TipoAdquisicion()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_cbo_ctrl_TipoAdquisicion"
                                     );
        }

        public DataSet Ayuda_TipoAdquisicion()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_ctrl_TipoAdquisicion"
                                     );
        }

        public Model.TipoAdquisicion Recupera_TipoAdquisicion(int intIdTipoAdquisicion)
        {
            DataTable dt = new DataTable();
            Model.TipoAdquisicion obj = new Model.TipoAdquisicion();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_TipoAdquisicion", intIdTipoAdquisicion);

            if (dt.Rows.Count > 0)
            {
                obj.iIdTipoAdquisicion = Convert.ToInt32(dt.Rows[0]["iIdTipoAdquisicion"]);
                obj.cCodTipoAdquisicion = Convert.ToString(dt.Rows[0]["cCodTipoAdquisicion"]);
                obj.vDesTipoAdquisicion = Convert.ToString(dt.Rows[0]["vDesTipoAdquisicion"]);
            }
            return obj;
        }


        public Model.TipoAdquisicion Recupera_TipoAdquisicion_Codigo(string strCodTipoAdquisicion)
        {
            DataTable dt = new DataTable();
            Model.TipoAdquisicion obj = new Model.TipoAdquisicion();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_TipoAdquisicion_Codigo", strCodTipoAdquisicion);

            if (dt.Rows.Count > 0)
            {
                obj.iIdTipoAdquisicion = Convert.ToInt32(dt.Rows[0]["iIdTipoAdquisicion"]);
                obj.cCodTipoAdquisicion = Convert.ToString(dt.Rows[0]["cCodTipoAdquisicion"]);
                obj.vDesTipoAdquisicion = Convert.ToString(dt.Rows[0]["vDesTipoAdquisicion"]);
            }
            return obj;
        }

        public int Graba_TipoAdquisicion(Model.TipoAdquisicion obj)
        {

            int intIdTipoAdquisicion;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_ctrl_TipoAdquisicion",
                                            obj.cCodTipoAdquisicion,
                                            obj.vDesTipoAdquisicion
                                         );

                intIdTipoAdquisicion = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdTipoAdquisicion = 0;
            }

            return intIdTipoAdquisicion;
        }

        public int Modifica_TipoAdquisicion(Model.TipoAdquisicion obj)
        {



            int intIdTipoAdquisicion = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_ctrl_TipoAdquisicion",
                                            obj.iIdTipoAdquisicion,
                                            obj.cCodTipoAdquisicion,
                                            obj.vDesTipoAdquisicion

                                         );

                intIdTipoAdquisicion = obj.iIdTipoAdquisicion;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdTipoAdquisicion = 0;
            }

            return intIdTipoAdquisicion;
        }

        public bool Elimina_TipoAdquisicion(int intIdTipoAdquisicion)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_ctrl_TipoAdquisicion",
                                           intIdTipoAdquisicion
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_TipoAdquisicion()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_ctrl_TipoAdquisicion"
                                     );
        }

        #endregion

        #region "ProcesoLogistico_Cabecera"

        public DataSet ayuda_ProcesoLogistico_Reasignacion()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_help_msto_ProcesoLogistico_Reasignacion"
                                            );
        }
        public DataSet lista_ProcesoLogistico_Reasignacion(string strAñoProceso,
                                                             string strNumProcedimiento
                                                            )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_msto_ProcesoLogistico_Reasignacion",
                                             strAñoProceso,
                                             strNumProcedimiento
                                            );
        }
        public Model.ProcesoLogistico_Cabecera Recupera_ProcesoLogistico_Cabecera(int intIdProcesoLogistico_Cabecera)
        {
            DataTable dt = new DataTable();
            Model.ProcesoLogistico_Cabecera obj = new Model.ProcesoLogistico_Cabecera();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_mvto_ProcesoLogistico_Cabecera", intIdProcesoLogistico_Cabecera);

            if (dt.Rows.Count > 0)
            {
                obj.iIdProcesoLogistico_Cabecera = Convert.ToInt32(dt.Rows[0]["iIdProcesoLogistico_Cabecera"]);
                obj.cAñoProceso = Convert.ToString(dt.Rows[0]["cAñoProceso"]);
                obj.cVersion = Convert.ToString(dt.Rows[0]["cVersion"]);
                obj.cCodTipoDocumento = Convert.ToString(dt.Rows[0]["cCodTipoDocumento"]);
                obj.vDesTipoDocumento = Convert.ToString(dt.Rows[0]["vDesTipoDocumento"]);
                obj.cNumDocumento = Convert.ToString(dt.Rows[0]["cNumDocumento"]);
                obj.tNota = Convert.ToString(dt.Rows[0]["tNota"]);
                obj.bActivo = Convert.ToBoolean(dt.Rows[0]["bActivo"]);
            }
            return obj;
        }

        public List<Model.Dashboard_ProcesoLogistico_TipoProceso> Reporte_ProcesoLogistico_Dashboard(string strCodCompañia,
                                          string strAñoProceso,
                                          string strVersion,
                                          bool blnTodasLasVersiones
                                        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Logistica.spp_rpt_mvto_ProcesoLogistico_Dashboard", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@bTodasLasVersiones", SqlDbType.Bit);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@bTodasLasVersiones"].Value = blnTodasLasVersiones;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            var lista = (from order in ds.Tables[0].AsEnumerable()
                         select new Model.Dashboard_ProcesoLogistico_TipoProceso
                         {

                             Version = order.Field<string>("Version"),
                             Gerencia = order.Field<string>("Gerencia"),
                             Area = order.Field<string>("Area"),
                             Procedimiento = order.Field<string>("Procedimiento"),
                             ProcesoLogistico = order.Field<string>("ProcesoLogistico"),
                             Descripcion = order.Field<string>("Descripcion"),
                             TipoProceso = order.Field<string>("TipoProceso"),
                             Mes = order.Field<string>("Mes"),
                             Cantidad = order.Field<int>("Cantidad"),
                             PrecioEstimado = order.Field<double>("PrecioEstimado"),
                         }
                        ).ToList();


            return lista;
        }


        public DataSet Combo_ProcesoLogistico_Año(string strCodEmpresa)
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection, 
                                          "Logistica.spp_cbo_mvto_ProcesoLogistico_Año",
                                          strCodEmpresa
                                         );

            return ds;
        }

        public DataSet Combo_ProcesoLogistico_Version(string strCodEmpresa,
                                                      string strAñoProceso
                                                    )
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                          "Logistica.spp_cbo_mvto_ProcesoLogistico_Version",
                                          strCodEmpresa,
                                          strAñoProceso
                                         );

            return ds;
        }

        public Model.ProcesoLogistico_Cabecera Recupera_ProcesoLogistico_Cabecera_Id()
        {
            DataTable dt = new DataTable();
            Model.ProcesoLogistico_Cabecera obj = new Model.ProcesoLogistico_Cabecera();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_mvto_ProcesoLogistico_Cabecera_Id");

            if (dt.Rows.Count > 0)
            {
                obj.iIdProcesoLogistico_Cabecera = Convert.ToInt32(dt.Rows[0]["iIdProcesoLogistico_Cabecera"]);
                obj.cAñoProceso = Convert.ToString(dt.Rows[0]["cAñoProceso"]);
                obj.cVersion = Convert.ToString(dt.Rows[0]["cVersion"]);
                obj.cCodTipoDocumento = Convert.ToString(dt.Rows[0]["cCodTipoDocumento"]);
                obj.vDesTipoDocumento = Convert.ToString(dt.Rows[0]["vDesTipoDocumento"]);
                obj.cNumDocumento = Convert.ToString(dt.Rows[0]["cNumDocumento"]);
                obj.tNota = Convert.ToString(dt.Rows[0]["tNota"]);
                obj.bActivo = Convert.ToBoolean(dt.Rows[0]["bActivo"]);
            }
            return obj;
        }

        public int Graba_ProcesoLogistico_Cabecera(Model.ProcesoLogistico_Cabecera obj)
        {

            int intIdProcesoLogistico_Cabecera = obj.iIdProcesoLogistico_Cabecera;

            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_ins_mvto_ProcesoLogistico_Cabecera",
                                            obj.cAñoProceso,
                                            obj.cVersion,
                                            obj.cCodTipoDocumento,
                                            obj.cNumDocumento,
                                            obj.tNota
                                         );
            if (dt.Rows.Count > 0)
            {
                intIdProcesoLogistico_Cabecera = Convert.ToInt32(dt.Rows[0]["intIdProcesoLogistico_Cabecera"]);
            }


            return intIdProcesoLogistico_Cabecera;
        }

        public int Modifica_ProcesoLogistico_Cabecera(Model.ProcesoLogistico_Cabecera obj)
        {

            int intIdProcesoLogistico_Cabecera = obj.iIdProcesoLogistico_Cabecera;

            SqlHelper.ExecuteNonQuery(strConnection,
                                      "Logistica.spp_upd_mvto_ProcesoLogistico_Cabecera",
                                        obj.iIdProcesoLogistico_Cabecera,
                                        obj.cAñoProceso,
                                        obj.cVersion,
                                        obj.cCodTipoDocumento,
                                        obj.cNumDocumento,
                                        obj.tNota
                                     );

            return intIdProcesoLogistico_Cabecera;
        }

        public bool Elimina_ProcesoLogistico_Cabecera(int intIdProcesoLogistico_Cabecera)
        {
            bool blnResult = true;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_mvto_ProcesoLogistico_Cabecera",
                                           intIdProcesoLogistico_Cabecera
                                         );
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_ProcesoLogistico_Cabecera(string strAñoProceso)
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_mvto_ProcesoLogistico_Cabecera",
                                      strAñoProceso
                                     );
        }
        #endregion

        #region "TipoProceso"

        public DataSet Combo_TipoProceso()
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_cbo_ctrl_TipoProceso"
                                     );
        }

        public DataSet Ayuda_TipoProceso()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_ctrl_TipoProceso"
                                     );
        }

        public Model.TipoProceso Recupera_TipoProceso(int intIdTipoProceso)
        {
            DataTable dt = new DataTable();
            Model.TipoProceso obj = new Model.TipoProceso();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_TipoProceso", intIdTipoProceso);

            if (dt.Rows.Count == 0)
            {
                obj.iIdTipoProceso = 0;
                obj.cCodTipoProceso = "";
                obj.vDesTipoProceso = "";
                obj.cSigla = "";
                obj.cCodTipoPlantilla = "";
            }
            else
            {
                obj.iIdTipoProceso = Convert.ToInt32(dt.Rows[0]["iIdTipoProceso"]);
                obj.cCodTipoProceso = Convert.ToString(dt.Rows[0]["cCodTipoProceso"]);
                obj.vDesTipoProceso = Convert.ToString(dt.Rows[0]["vDesTipoProceso"]);
                obj.cSigla = Convert.ToString(dt.Rows[0]["cSigla"]);
                obj.cCodTipoPlantilla = Convert.ToString(dt.Rows[0]["cCodTipoPlantilla"]);
            }
            return obj;
        }


        public Model.TipoProceso Recupera_TipoProceso_Codigo(string strCodTipoProceso)
        {
            DataTable dt = new DataTable();
            Model.TipoProceso obj = new Model.TipoProceso();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_TipoProceso_Codigo", strCodTipoProceso);

            if (dt.Rows.Count == 0)
            {
                obj.iIdTipoProceso = 0;
                obj.cCodTipoProceso = "";
                obj.vDesTipoProceso = "";
                obj.cSigla = "";
                obj.cCodTipoPlantilla = "";
            }
            else
            {
                obj.iIdTipoProceso = Convert.ToInt32(dt.Rows[0]["iIdTipoProceso"]);
                obj.cCodTipoProceso = Convert.ToString(dt.Rows[0]["cCodTipoProceso"]);
                obj.vDesTipoProceso = Convert.ToString(dt.Rows[0]["vDesTipoProceso"]);
                obj.cSigla = Convert.ToString(dt.Rows[0]["cSigla"]);
                obj.cCodTipoPlantilla = Convert.ToString(dt.Rows[0]["cCodTipoPlantilla"]);
            }
            return obj;
        }

        public int Graba_TipoProceso(Model.TipoProceso obj)
        {

            int intIdTipoProceso;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_ctrl_TipoProceso",
                                            obj.cCodTipoProceso,
                                            obj.vDesTipoProceso,
                                            obj.cSigla,
                                            obj.cCodTipoPlantilla
                                         );

                intIdTipoProceso = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdTipoProceso = 0;
            }

            return intIdTipoProceso;
        }

        public int Modifica_TipoProceso(Model.TipoProceso obj)
        {



            int intIdTipoProceso = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_ctrl_TipoProceso",
                                            obj.iIdTipoProceso,
                                            obj.cCodTipoProceso,
                                            obj.vDesTipoProceso,
                                            obj.cSigla,
                                            obj.cCodTipoPlantilla

                                         );

                intIdTipoProceso = obj.iIdTipoProceso;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdTipoProceso = 0;
            }

            return intIdTipoProceso;
        }

        public bool Elimina_TipoProceso(int intIdTipoProceso)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_ctrl_TipoProceso",
                                           intIdTipoProceso
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_TipoProceso()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_ctrl_TipoProceso"
                                     );
        }


        #endregion

        #region "ObjetoContratacion"
        public DataSet Ayuda_ObjetoContratacion()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_ctrl_ObjetoContratacion"
                                     );

            return ds;
        }

        public DataSet Combo_ObjetoContratacion(string strCodTipoProceso)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_cbo_ctrl_ObjetoContratacion",
                                      strCodTipoProceso
                                     );

            return ds;
        }

        public DataSet Ayuda_ObjetoContratacion_TipoProceso(string strCodTipoProceso)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_ctrl_ObjetoContratacion_TipoProceso",
                                      strCodTipoProceso
                                     );

            return ds;
        }


        public DataSet Combo_ObjetoContratacion_SinFiltro()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_cbo_ctrl_ObjetoContratacion_SinFiltro"
                                     );

            return ds;
        }


        public Model.ObjetoContratacion Recupera_ObjetoContratacion(int intIdObjetoContratacion)
        {
            DataTable dt = new DataTable();
            Model.ObjetoContratacion obj = new Model.ObjetoContratacion();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_ObjetoContratacion", intIdObjetoContratacion);

            if (dt.Rows.Count > 0)
            {
                obj.iIdObjetoContratacion = Convert.ToInt32(dt.Rows[0]["iIdObjetoContratacion"]);
                obj.cCodObjetoContratacion = Convert.ToString(dt.Rows[0]["cCodObjetoContratacion"]);
                obj.vDesObjetoContratacion = Convert.ToString(dt.Rows[0]["vDesObjetoContratacion"]);
            }
            return obj;
        }


        public Model.ObjetoContratacion Recupera_ObjetoContratacion_Codigo(string strCodObjetoContratacion)
        {
            DataTable dt = new DataTable();
            Model.ObjetoContratacion obj = new Model.ObjetoContratacion();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_ObjetoContratacion_Codigo", strCodObjetoContratacion);

            if (dt.Rows.Count > 0)
            {
                obj.iIdObjetoContratacion = Convert.ToInt32(dt.Rows[0]["iIdObjetoContratacion"]);
                obj.cCodObjetoContratacion = Convert.ToString(dt.Rows[0]["cCodObjetoContratacion"]);
                obj.vDesObjetoContratacion = Convert.ToString(dt.Rows[0]["vDesObjetoContratacion"]);
            }
            return obj;
        }

        public int Graba_ObjetoContratacion(Model.ObjetoContratacion obj)
        {

            int intIdObjetoContratacion;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_ctrl_ObjetoContratacion",
                                            obj.cCodObjetoContratacion,
                                            obj.vDesObjetoContratacion
                                         );

                intIdObjetoContratacion = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdObjetoContratacion = 0;
            }

            return intIdObjetoContratacion;
        }

        public int Modifica_ObjetoContratacion(Model.ObjetoContratacion obj)
        {



            int intIdObjetoContratacion = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_ctrl_ObjetoContratacion",
                                            obj.iIdObjetoContratacion,
                                            obj.cCodObjetoContratacion,
                                            obj.vDesObjetoContratacion

                                         );

                intIdObjetoContratacion = obj.iIdObjetoContratacion;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdObjetoContratacion = 0;
            }

            return intIdObjetoContratacion;
        }

        public bool Elimina_ObjetoContratacion(int intIdObjetoContratacion)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_ctrl_ObjetoContratacion",
                                           intIdObjetoContratacion
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_ObjetoContratacion()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_ctrl_ObjetoContratacion"
                                     );

            return ds;
        }

        #endregion

        #region "UnidadMedida"
        //public DataSet Combo_UnidadMedida()
        //{
        //    return SqlHelper.ExecuteDataset(strConnection,
        //                              "Logistica.spp_cbo_ctrl_UnidadMedida"
        //                             );
        //}

        //public DataSet Ayuda_UnidadMedida()
        //{
        //    return SqlHelper.ExecuteDataset(strConnection,
        //                              "Logistica.spp_help_ctrl_UnidadMedida"
        //                             );
        //}
        public Model.UnidadMedida Recupera_UnidadMedida(int intIdUnidadMedida)
        {
            DataTable dt = new DataTable();
            Model.UnidadMedida obj = new Model.UnidadMedida();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_UnidadMedida", intIdUnidadMedida);

            if (dt.Rows.Count == 0)
            {
                obj.iIdUnidadMedida = 0;
                obj.cCodUnidadMedida = "";
                obj.vDesUnidadMedida = "";
            }
            else
            {
                obj.iIdUnidadMedida = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodUnidadMedida = Convert.ToString(dt.Rows[0][1]);
                obj.vDesUnidadMedida = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }


        public Model.UnidadMedida Recupera_UnidadMedida_Codigo(string strCodUnidadMedida)
        {
            DataTable dt = new DataTable();
            Model.UnidadMedida obj = new Model.UnidadMedida();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_UnidadMedida_Codigo", strCodUnidadMedida);

            if (dt.Rows.Count == 0)
            {
                obj.iIdUnidadMedida = 0;
                obj.cCodUnidadMedida = "";
                obj.vDesUnidadMedida = "";
            }
            else
            {
                obj.iIdUnidadMedida = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodUnidadMedida = Convert.ToString(dt.Rows[0][1]);
                obj.vDesUnidadMedida = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public int Graba_UnidadMedida(Model.UnidadMedida obj)
        {

            int intIdUnidadMedida;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_ctrl_UnidadMedida",
                                            obj.cCodUnidadMedida,
                                            obj.vDesUnidadMedida
                                         );

                intIdUnidadMedida = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdUnidadMedida = 0;
            }

            return intIdUnidadMedida;
        }

        public int Modifica_UnidadMedida(Model.UnidadMedida obj)
        {



            int intIdUnidadMedida = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_ctrl_UnidadMedida",
                                            obj.iIdUnidadMedida,
                                            obj.cCodUnidadMedida,
                                            obj.vDesUnidadMedida

                                         );

                intIdUnidadMedida = obj.iIdUnidadMedida;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdUnidadMedida = 0;
            }

            return intIdUnidadMedida;
        }

        public bool Elimina_UnidadMedida(int intIdUnidadMedida)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_ctrl_UnidadMedida",
                                           intIdUnidadMedida
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_UnidadMedida()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_ctrl_UnidadMedida"
                                     );
        }

        #endregion


        #region "TipoTipoFuenteFinanciamiento"
        public DataSet Combo_TipoFuenteFinanciamiento()
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_cbo_ctrl_TipoFuenteFinanciamiento"
                                     );

        }

        public DataSet Ayuda_TipoFuenteFinanciamiento()
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_ctrl_TipoFuenteFinanciamiento"
                                     );
        }
        public Model.TipoFuenteFinanciamiento Recupera_TipoFuenteFinanciamiento(int intIdTipoFuenteFinanciamiento)
        {
            DataTable dt = new DataTable();
            Model.TipoFuenteFinanciamiento obj = new Model.TipoFuenteFinanciamiento();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_TipoFuenteFinanciamiento", intIdTipoFuenteFinanciamiento);

            if (dt.Rows.Count == 0)
            {
                obj.iIdTipoFuenteFinanciamiento = 0;
                obj.cCodTipoFuenteFinanciamiento = "";
                obj.vDesTipoFuenteFinanciamiento = "";
            }
            else
            {
                obj.iIdTipoFuenteFinanciamiento = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodTipoFuenteFinanciamiento = Convert.ToString(dt.Rows[0][1]);
                obj.vDesTipoFuenteFinanciamiento = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }


        public Model.TipoFuenteFinanciamiento Recupera_TipoFuenteFinanciamiento_Codigo(string strCodTipoFuenteFinanciamiento)
        {
            DataTable dt = new DataTable();
            Model.TipoFuenteFinanciamiento obj = new Model.TipoFuenteFinanciamiento();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_TipoFuenteFinanciamiento_Codigo", strCodTipoFuenteFinanciamiento);

            if (dt.Rows.Count == 0)
            {
                obj.iIdTipoFuenteFinanciamiento = 0;
                obj.cCodTipoFuenteFinanciamiento = "";
                obj.vDesTipoFuenteFinanciamiento = "";
            }
            else
            {
                obj.iIdTipoFuenteFinanciamiento = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodTipoFuenteFinanciamiento = Convert.ToString(dt.Rows[0][1]);
                obj.vDesTipoFuenteFinanciamiento = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public int Graba_TipoFuenteFinanciamiento(Model.TipoFuenteFinanciamiento obj)
        {

            int intIdTipoFuenteFinanciamiento;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_ctrl_TipoFuenteFinanciamiento",
                                            obj.cCodTipoFuenteFinanciamiento,
                                            obj.vDesTipoFuenteFinanciamiento
                                         );

                intIdTipoFuenteFinanciamiento = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdTipoFuenteFinanciamiento = 0;
            }

            return intIdTipoFuenteFinanciamiento;
        }

        public int Modifica_TipoFuenteFinanciamiento(Model.TipoFuenteFinanciamiento obj)
        {



            int intIdTipoFuenteFinanciamiento = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_ctrl_TipoFuenteFinanciamiento",
                                            obj.iIdTipoFuenteFinanciamiento,
                                            obj.cCodTipoFuenteFinanciamiento,
                                            obj.vDesTipoFuenteFinanciamiento

                                         );

                intIdTipoFuenteFinanciamiento = obj.iIdTipoFuenteFinanciamiento;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdTipoFuenteFinanciamiento = 0;
            }

            return intIdTipoFuenteFinanciamiento;
        }

        public bool Elimina_TipoFuenteFinanciamiento(int intIdTipoFuenteFinanciamiento)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_ctrl_TipoFuenteFinanciamiento",
                                           intIdTipoFuenteFinanciamiento
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_TipoFuenteFinanciamiento()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_ctrl_TipoFuenteFinanciamiento"
                                     );

        }

        #endregion

        #region "EntidadEncargadaConvocante"
        public DataSet Combo_EntidadEncargadaConvocante()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_cbo_ctrl_EntidadEncargadaConvocante"
                                     );
        }

        public DataSet Ayuda_EntidadEncargadaConvocante()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_ctrl_EntidadEncargadaConvocante"
                                     );
        }

        public Model.EntidadEncargadaConvocante Recupera_EntidadEncargadaConvocante(int intIdEntidadEncargadaConvocante)
        {
            DataTable dt = new DataTable();
            Model.EntidadEncargadaConvocante obj = new Model.EntidadEncargadaConvocante();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_EntidadEncargadaConvocante", intIdEntidadEncargadaConvocante);

            if (dt.Rows.Count == 0)
            {
                obj.iIdEntidadEncargadaConvocante = 0;
                obj.cCodEntidadEncargadaConvocante = "";
                obj.vDesEntidadEncargadaConvocante = "";
            }
            else
            {
                obj.iIdEntidadEncargadaConvocante = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodEntidadEncargadaConvocante = Convert.ToString(dt.Rows[0][1]);
                obj.vDesEntidadEncargadaConvocante = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }


        public Model.EntidadEncargadaConvocante Recupera_EntidadEncargadaConvocante_Codigo(string strCodEntidadEncargadaConvocante)
        {
            DataTable dt = new DataTable();
            Model.EntidadEncargadaConvocante obj = new Model.EntidadEncargadaConvocante();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_EntidadEncargadaConvocante_Codigo", strCodEntidadEncargadaConvocante);

            if (dt.Rows.Count == 0)
            {
                obj.iIdEntidadEncargadaConvocante = 0;
                obj.cCodEntidadEncargadaConvocante = "";
                obj.vDesEntidadEncargadaConvocante = "";
            }
            else
            {
                obj.iIdEntidadEncargadaConvocante = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodEntidadEncargadaConvocante = Convert.ToString(dt.Rows[0][1]);
                obj.vDesEntidadEncargadaConvocante = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public int Graba_EntidadEncargadaConvocante(Model.EntidadEncargadaConvocante obj)
        {

            int intIdEntidadEncargadaConvocante;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_ctrl_EntidadEncargadaConvocante",
                                            obj.cCodEntidadEncargadaConvocante,
                                            obj.vDesEntidadEncargadaConvocante
                                         );

                intIdEntidadEncargadaConvocante = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdEntidadEncargadaConvocante = 0;
            }

            return intIdEntidadEncargadaConvocante;
        }

        public int Modifica_EntidadEncargadaConvocante(Model.EntidadEncargadaConvocante obj)
        {



            int intIdEntidadEncargadaConvocante = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_ctrl_EntidadEncargadaConvocante",
                                            obj.iIdEntidadEncargadaConvocante,
                                            obj.cCodEntidadEncargadaConvocante,
                                            obj.vDesEntidadEncargadaConvocante

                                         );

                intIdEntidadEncargadaConvocante = obj.iIdEntidadEncargadaConvocante;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdEntidadEncargadaConvocante = 0;
            }

            return intIdEntidadEncargadaConvocante;
        }

        public bool Elimina_EntidadEncargadaConvocante(int intIdEntidadEncargadaConvocante)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_ctrl_EntidadEncargadaConvocante",
                                           intIdEntidadEncargadaConvocante
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_EntidadEncargadaConvocante()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_ctrl_EntidadEncargadaConvocante"
                                     );
        }

        #endregion

        //#region "ParametroLogistica"
        //public Model.ParametroLogistica Recupera_ParametroLogistica_Codigo(string strCodParametroLogistica)
        //{
        //    DataTable dt = new DataTable();
        //    Model.ParametroLogistica obj = new Model.ParametroLogistica();

        //    dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_cnfg_ParametroLogistica_Codigo", strCodParametroLogistica);

        //    if (dt.Rows.Count == 0)
        //    {
        //        obj.iIdParametroLogistica = 0;
        //        obj.cCodParametroLogistica = "";
        //        obj.vDesParametroLogistica = "";
        //        obj.vValParametroLogistica = "";
        //    }
        //    else
        //    {
        //        obj.iIdParametroLogistica = Convert.ToInt32(dt.Rows[0][0]);
        //        obj.cCodParametroLogistica = Convert.ToString(dt.Rows[0][1]);
        //        obj.vDesParametroLogistica = Convert.ToString(dt.Rows[0][2]);
        //        obj.vValParametroLogistica = Convert.ToString(dt.Rows[0][3]);
        //    }
        //    return obj;
        //}


        //#endregion

        #region "ModalidadSeleccion"
        public DataSet Combo_ModalidadSeleccion()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_cbo_ctrl_ModalidadSeleccion"
                                     );
        }

        public DataSet Ayuda_ModalidadSeleccion()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_ctrl_ModalidadSeleccion"
                                     );
        }

        public Model.ModalidadSeleccion Recupera_ModalidadSeleccion(int intIdModalidadSeleccion)
        {
            DataTable dt = new DataTable();
            Model.ModalidadSeleccion obj = new Model.ModalidadSeleccion();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_ModalidadSeleccion", intIdModalidadSeleccion);

            if (dt.Rows.Count == 0)
            {
                obj.iIdModalidadSeleccion = 0;
                obj.cCodModalidadSeleccion = "";
                obj.vDesModalidadSeleccion = "";
            }
            else
            {
                obj.iIdModalidadSeleccion = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodModalidadSeleccion = Convert.ToString(dt.Rows[0][1]);
                obj.vDesModalidadSeleccion = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }


        public Model.ModalidadSeleccion Recupera_ModalidadSeleccion_Codigo(string strCodModalidadSeleccion)
        {
            DataTable dt = new DataTable();
            Model.ModalidadSeleccion obj = new Model.ModalidadSeleccion();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_ctrl_ModalidadSeleccion_Codigo", strCodModalidadSeleccion);

            if (dt.Rows.Count == 0)
            {
                obj.iIdModalidadSeleccion = 0;
                obj.cCodModalidadSeleccion = "";
                obj.vDesModalidadSeleccion = "";
            }
            else
            {
                obj.iIdModalidadSeleccion = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodModalidadSeleccion = Convert.ToString(dt.Rows[0][1]);
                obj.vDesModalidadSeleccion = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public int Graba_ModalidadSeleccion(Model.ModalidadSeleccion obj)
        {

            int intIdModalidadSeleccion;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_ctrl_ModalidadSeleccion",
                                            obj.cCodModalidadSeleccion,
                                            obj.vDesModalidadSeleccion
                                         );

                intIdModalidadSeleccion = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdModalidadSeleccion = 0;
            }

            return intIdModalidadSeleccion;
        }

        public int Modifica_ModalidadSeleccion(Model.ModalidadSeleccion obj)
        {



            int intIdModalidadSeleccion = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_ctrl_ModalidadSeleccion",
                                            obj.iIdModalidadSeleccion,
                                            obj.cCodModalidadSeleccion,
                                            obj.vDesModalidadSeleccion

                                         );

                intIdModalidadSeleccion = obj.iIdModalidadSeleccion;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdModalidadSeleccion = 0;
            }

            return intIdModalidadSeleccion;
        }

        public bool Elimina_ModalidadSeleccion(int intIdModalidadSeleccion)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_ctrl_ModalidadSeleccion",
                                           intIdModalidadSeleccion
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_ModalidadSeleccion()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_ctrl_ModalidadSeleccion"
                                     );
        }

        #endregion

        #region "Centro"
        //public DataTable Combo_Centro()
        //{



        //    DataTable dt = new DataTable();

        //    dt = SqlHelper.ExecuteDataTable(strConnection,
        //                              "General.spp_cbo_ctrl_Centro"
        //                             );

        //    return dt;
        //}

        //public DataSet Ayuda_Centro()
        //{



        //    DataSet ds = new DataSet();

        //    ds = SqlHelper.ExecuteDataset(strConnection,
        //                              "General.spp_help_ctrl_Centro"
        //                             );

        //    return ds;
        //}

        public Model.Centro Recupera_Centro(int intIdCentro)
        {
            DataTable dt = new DataTable();
            Model.Centro obj = new Model.Centro();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_Centro", intIdCentro);

            if (dt.Rows.Count == 0)
            {
                obj.iIdCentro = 0;
                obj.cCodCentro = "";
                obj.vNomCentro = "";
            }
            else
            {
                obj.iIdCentro = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodCentro = Convert.ToString(dt.Rows[0][1]);
                obj.vNomCentro = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }


        public Model.Centro Recupera_Centro_Codigo(string strCodCentro)
        {
            DataTable dt = new DataTable();
            Model.Centro obj = new Model.Centro();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_Centro_Codigo", strCodCentro);

            if (dt.Rows.Count == 0)
            {
                obj.iIdCentro = 0;
                obj.cCodCentro = "";
                obj.vNomCentro = "";
            }
            else
            {
                obj.iIdCentro = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodCentro = Convert.ToString(dt.Rows[0][1]);
                obj.vNomCentro = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public int Graba_Centro(Model.Centro obj)
        {

            int intIdCentro;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "General.spp_ins_ctrl_Centro",
                                            obj.cCodCentro,
                                            obj.vNomCentro
                                         );

                intIdCentro = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdCentro = 0;
            }

            return intIdCentro;
        }

        public int Modifica_Centro(Model.Centro obj)
        {



            int intIdCentro = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "General.spp_upd_ctrl_Centro",
                                            obj.iIdCentro,
                                            obj.cCodCentro,
                                            obj.vNomCentro

                                         );

                intIdCentro = obj.iIdCentro;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdCentro = 0;
            }

            return intIdCentro;
        }

        public bool Elimina_Centro(int intIdCentro)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "General.spp_del_ctrl_Centro",
                                           intIdCentro
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataTable Lista_Centro()
        {



            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "General.spp_lst_ctrl_Centro"
                                     );

            return dt;
        }

        #endregion

        #region "ProcesoLogistico_Detalle"

        public string graba_ProcesoLogistico_Requerimiento(string strNumRequerimiento,
                                                            string strCodTipoProceso,
                                                            string strCodObjetoContratacion,
                                                            string strCodAdministradorContrato,
                                                            int intDiasPlazo,
                                                            string strPaso,
                                                            string strCodCentroGestor,
                                                            string strEsUnProceso,
                                                            string strCodPac,
                                                            string strCodEmpleado
                                                          )
        {
            string strNumProcedimiento = "";
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_upd_msto_ProcesoLogistico_Requerimiento",
                                             strNumRequerimiento,
                                             strCodTipoProceso,
                                             strCodObjetoContratacion,
                                             strCodAdministradorContrato,
                                             intDiasPlazo,
                                             strPaso,
                                            strCodCentroGestor,
                                            strEsUnProceso,
                                            strCodPac,
                                            strCodEmpleado
                                            );
            if (dt.Rows.Count > 0)
            {
                strNumProcedimiento = Convert.ToString(dt.Rows[0]["cNumProcedimiento"]);
            }
            return strNumProcedimiento;
        }

        public bool graba_ProcesoLogistico_Requerimiento_LineaFormulacion(string strNumRequerimiento,
                                                                          string strNumProcedimiento,
                                                                          int intIdRequerimiento_Detalle
                                                                         )
        {
            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_msto_ProcesoLogistico_Requerimiento_LineaFormulacion",
                                          strNumRequerimiento,
                                          strNumProcedimiento,
                                          intIdRequerimiento_Detalle
                                          );

            }
            catch (Exception)
            {

                blnResult = false;
            }


            return blnResult;
        }
        public DataSet ayuda_Pac_HojaTrabajo(string strCodCompañia,
                                              string strAñoProceso
                                            )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_help_mvto_Pac_HojaTrabajo",
                                             strCodCompañia,
                                             strAñoProceso
                                            );
        }

        public Model.Pac_HojaTrabajo recupera_Pac_HojaTrabajo(string strCodCompañia,
                                                string strAñoProceso,
                                                string strCodProcesoLogistico
                                    )
        {

            Model.Pac_HojaTrabajo MPHT = new Model.Pac_HojaTrabajo();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Logistica.spp_sel_mvto_Pac_HojaTrabajo",
                                             strCodCompañia,
                                             strAñoProceso,
                                             strCodProcesoLogistico
                                            );

            if (dt.Rows.Count > 0)
            {
                MPHT.iIdPac = 0;
                MPHT.cAñoProceso = strAñoProceso;
                MPHT.cCodPac = strCodProcesoLogistico;
                MPHT.cCodObjetoContratacion = Convert.ToString(dt.Rows[0]["cCodProcesoLogistico"]);
                MPHT.tDesContratacion = Convert.ToString(dt.Rows[0]["tDesContratacion"]);
            }
            return MPHT;
        }

        public bool Elimina_HojaTrabajo_Formulacion_Formato(string strCodEmpresa,
                                                             string strAñoProceso,
                                                             string strVersion,
                                                             string strPeriodo,
                                                             string strCodTipoFormulacion,
                                                             string strCodSubTipoFormulacion
                                                            )
        {
            SqlHelper.ExecuteNonQuery(  strConnection,
                                        "Formulacion.spp_del_mvto_Formulacion_HojaTrabajo_Detalle",
                                        strCodEmpresa,
                                        strAñoProceso,
                                        strVersion,
                                        strPeriodo,
                                        strCodTipoFormulacion,
                                        strCodSubTipoFormulacion
                                        );

            return true;
        }
        public Model.Formulacion_HojaTrabajo_Cabecera recupera_HojaTrabajo_Apertura( string strCodCompañia,
                                                                                     string strAñoProceso,
                                                                                     string strPeriodo
                                                                                    )
        {

            Model.Formulacion_HojaTrabajo_Cabecera HTC = new Model.Formulacion_HojaTrabajo_Cabecera();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Formulacion.spp_sel_mvto_Formulacion_HojaTrabajo_Cabecera_Apertura",
                                             strCodCompañia,
                                             strAñoProceso,
                                             strPeriodo
                                            );

            if (dt.Rows.Count > 0)
            {
                HTC.IidCabecera = Convert.ToInt32(dt.Rows[0]["iIdCabecera"]);
                HTC.CcodCompañia = Convert.ToString(dt.Rows[0]["cCodCompañia"]);
                HTC.CañoProceso = Convert.ToString(dt.Rows[0]["CañoProceso"]);
                HTC.Cversion = Convert.ToString(dt.Rows[0]["cVersion"]);
                HTC.Cperiodo = Convert.ToString(dt.Rows[0]["Cperiodo"]);
                HTC.DfecFormulacion = Convert.ToDateTime(dt.Rows[0]["DfecFormulacion"]);
                HTC.Tnota = Convert.ToString(dt.Rows[0]["Tnota"]);
                HTC.cCodTipoDocumento = Convert.ToString(dt.Rows[0]["cCodTipoDocumento"]);
                HTC.cNumDocumento = Convert.ToString(dt.Rows[0]["cNumDocumento"]);
                HTC.Bactivo = Convert.ToBoolean(dt.Rows[0]["Bactivo"]);
            }
            return HTC;
        }

        public string recupera_HojaTrabajo_HallarVersion( string strCodCompañia,
                                                     string strAñoProceso
                                                    )
        {

            string strPeriodo = "";
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Formulacion.spp_sel_mvto_HojaTrabajo_Cabecera_HallarPeriodoActivo",
                                             strCodCompañia,
                                             strAñoProceso
                                            );

            if (dt.Rows.Count > 0)
            {
                strPeriodo = Convert.ToString(dt.Rows[0]["Cperiodo"]);
            }

            return strPeriodo;
        }



        public Model.ProcesoLogistico_Detalle Recupera_ProcesoLogistico_Detalle(int intIdProcesoLogistico_Detalle)
        {
            DataTable dt = new DataTable();
            Model.ProcesoLogistico_Detalle obj = new Model.ProcesoLogistico_Detalle();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_mvto_ProcesoLogistico_Detalle", intIdProcesoLogistico_Detalle);

            if (dt.Rows.Count > 0)
            {
                obj.iIdProcesoLogistico_Detalle = Convert.ToInt32(dt.Rows[0]["iIdProcesoLogistico_Detalle"]);
                obj.iIdProcesoLogistico_Cabecera = Convert.ToInt32(dt.Rows[0]["iIdProcesoLogistico_Cabecera"]);
                obj.cAñoProceso = Convert.ToString(dt.Rows[0]["cAñoProceso"]);
                obj.cVersion = Convert.ToString(dt.Rows[0]["cVersion"]);
                obj.cCodProcesoLogistico = Convert.ToString(dt.Rows[0]["cCodProcesoLogistico"]);
                obj.cNumProcedimiento = Convert.ToString(dt.Rows[0]["cNumProcedimiento"]);
                obj.cCodTipoProceso = Convert.ToString(dt.Rows[0]["cCodTipoProceso"]);
                obj.vDesTipoProceso = Convert.ToString(dt.Rows[0]["vDesTipoProceso"]);
                obj.cCodObjetoContratacion = Convert.ToString(dt.Rows[0]["cCodObjetoContratacion"]);
                obj.vDesObjetoContratacion = Convert.ToString(dt.Rows[0]["vDesObjetoContratacion"]);
                obj.cCodUnidadMedida = Convert.ToString(dt.Rows[0]["cCodUnidadMedida"]);
                obj.vDesUnidadMedida = Convert.ToString(dt.Rows[0]["vDesUnidadMedida"]);
                obj.tDesContratacion = Convert.ToString(dt.Rows[0]["tDesContratacion"]);
                obj.fCantidad = Convert.ToDouble(dt.Rows[0]["fCantidad"]);
                obj.fPrecioEstimado = Convert.ToDouble(dt.Rows[0]["fPrecioEstimado"]);
                obj.cCodTipoMoneda = Convert.ToString(dt.Rows[0]["cCodTipoMoneda"]);
                obj.vNomTipoMoneda = Convert.ToString(dt.Rows[0]["vNomTipoMoneda"]);
                obj.cCodTipoFuenteFinanciamiento = Convert.ToString(dt.Rows[0]["cCodTipoFuenteFinanciamiento"]);
                obj.vDesTipoFuenteFinanciamiento = Convert.ToString(dt.Rows[0]["vDesTipoFuenteFinanciamiento"]);
                obj.dFechaPrevista = Convert.ToDateTime(dt.Rows[0]["dFechaPrevista"]);
                obj.cCodTipoAdquisicion = Convert.ToString(dt.Rows[0]["cCodTipoAdquisicion"]);
                obj.vDesTipoAdquisicion = Convert.ToString(dt.Rows[0]["vDesTipoAdquisicion"]);
                obj.cCodEntidadEncargadaConvocante = Convert.ToString(dt.Rows[0]["cCodEntidadEncargadaConvocante"]);
                obj.cCodModalidadSeleccion = Convert.ToString(dt.Rows[0]["cCodModalidadSeleccion"]);
                obj.vDesModalidadSeleccion = Convert.ToString(dt.Rows[0]["vDesModalidadSeleccion"]);
                obj.cCodCentro = Convert.ToString(dt.Rows[0]["cCodCentro"]);
                obj.vNomCentro = Convert.ToString(dt.Rows[0]["vNomCentro"]);
                obj.cCodCentroGestor = Convert.ToString(dt.Rows[0]["cCodCentroGestor"]);
                obj.vNomCentroGestor = Convert.ToString(dt.Rows[0]["vNomCentroGestor"]);
                obj.tObservacion = Convert.ToString(dt.Rows[0]["tObservacion"]);
                obj.iIdProcesoLogistico_Eliminado = Convert.ToInt32(dt.Rows[0]["iIdProcesoLogistico_Eliminado"]);
                obj.iIdProcesoLogistico_Modificado = Convert.ToInt32(dt.Rows[0]["iIdProcesoLogistico_Modificado"]);
                obj.cCodTipoPlantilla = Convert.ToString(dt.Rows[0]["cCodTipoPlantilla"]);

            }
            return obj;
        }


        public Model.ProcesoLogistico_Detalle Recupera_ProcesoLogistico_Detalle_Codigo(string strNumProcedimiento)
        {
            DataTable dt = new DataTable();
            Model.ProcesoLogistico_Detalle obj = new Model.ProcesoLogistico_Detalle();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_mvto_ProcesoLogistico_Detalle_Codigo", strNumProcedimiento);

            if (dt.Rows.Count > 0)
            {
                obj.iIdProcesoLogistico_Detalle = Convert.ToInt32(dt.Rows[0]["iIdProcesoLogistico_Detalle"]);
                obj.iIdProcesoLogistico_Cabecera = Convert.ToInt32(dt.Rows[0]["iIdProcesoLogistico_Cabecera"]);
                obj.cAñoProceso = Convert.ToString(dt.Rows[0]["cAñoProceso"]);
                obj.cVersion = Convert.ToString(dt.Rows[0]["cVersion"]);
                obj.cCodProcesoLogistico = Convert.ToString(dt.Rows[0]["cCodProcesoLogistico"]);
                obj.cNumProcedimiento = Convert.ToString(dt.Rows[0]["cNumProcedimiento"]);
                obj.cCodTipoProceso = Convert.ToString(dt.Rows[0]["cCodTipoProceso"]);
                obj.vDesTipoProceso = Convert.ToString(dt.Rows[0]["vDesTipoProceso"]);
                obj.cCodObjetoContratacion = Convert.ToString(dt.Rows[0]["cCodObjetoContratacion"]);
                obj.vDesObjetoContratacion = Convert.ToString(dt.Rows[0]["vDesObjetoContratacion"]);
                obj.cCodUnidadMedida = Convert.ToString(dt.Rows[0]["cCodUnidadMedida"]);
                obj.vDesUnidadMedida = Convert.ToString(dt.Rows[0]["vDesUnidadMedida"]);
                obj.tDesContratacion = Convert.ToString(dt.Rows[0]["tDesContratacion"]);
                obj.tDesJustificacion = Convert.ToString(dt.Rows[0]["tDesJustificacion"]);
                obj.fCantidad = Convert.ToDouble(dt.Rows[0]["fCantidad"]);
                obj.fPrecioEstimado = Convert.ToDouble(dt.Rows[0]["fPrecioEstimado"]);
                obj.cCodTipoMoneda = Convert.ToString(dt.Rows[0]["cCodTipoMoneda"]);
                obj.vNomTipoMoneda = Convert.ToString(dt.Rows[0]["vNomTipoMoneda"]);
                obj.cCodTipoFuenteFinanciamiento = Convert.ToString(dt.Rows[0]["cCodTipoFuenteFinanciamiento"]);
                obj.vDesTipoFuenteFinanciamiento = Convert.ToString(dt.Rows[0]["vDesTipoFuenteFinanciamiento"]);
                obj.dFechaPrevista = Convert.ToDateTime(dt.Rows[0]["dFechaPrevista"]);
                obj.cCodTipoAdquisicion = Convert.ToString(dt.Rows[0]["cCodTipoAdquisicion"]);
                obj.vDesTipoAdquisicion = Convert.ToString(dt.Rows[0]["vDesTipoAdquisicion"]);
                obj.cCodEntidadEncargadaConvocante = Convert.ToString(dt.Rows[0]["cCodEntidadEncargadaConvocante"]);
                obj.cCodModalidadSeleccion = Convert.ToString(dt.Rows[0]["cCodModalidadSeleccion"]);
                obj.vDesModalidadSeleccion = Convert.ToString(dt.Rows[0]["vDesModalidadSeleccion"]);
                obj.cCodCentro = Convert.ToString(dt.Rows[0]["cCodCentro"]);
                obj.vNomCentro = Convert.ToString(dt.Rows[0]["vNomCentro"]);
                obj.cCodCentroGestor = Convert.ToString(dt.Rows[0]["cCodCentroGestor"]);
                obj.vNomCentroGestor = Convert.ToString(dt.Rows[0]["vNomCentroGestor"]);
                obj.tObservacion = Convert.ToString(dt.Rows[0]["tObservacion"]);
                obj.iIdProcesoLogistico_Eliminado = Convert.ToInt32(dt.Rows[0]["iIdProcesoLogistico_Eliminado"]);
                obj.iIdProcesoLogistico_Modificado = Convert.ToInt32(dt.Rows[0]["iIdProcesoLogistico_Modificado"]);
                obj.cCodTipoPlantilla = Convert.ToString(dt.Rows[0]["cCodTipoPlantilla"]);
                obj.vApeOperadorLogistico = Convert.ToString(dt.Rows[0]["vApeOperadorLogistico"]);

            }
            return obj;
        }

        public int Graba_ProcesoLogistico_Detalle(Model.ProcesoLogistico_Detalle obj)
        {

            int intIdProcesoLogistico_Detalle = 0;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_mvto_ProcesoLogistico_Detalle",
                                            obj.iIdProcesoLogistico_Cabecera,
                                            obj.cCodTipoProcesoLogistico,
                                            obj.cNumeroRelacionado,
                                            obj.cCodProcesoLogistico,
                                            obj.cNumProcedimiento,
                                            obj.cCodTipoProceso,
                                            obj.cCodUnidadMedida,
                                            obj.cCodObjetoContratacion,
                                            obj.tDesContratacion,
                                            obj.tDesJustificacion,
                                            obj.fCantidad,
                                            obj.fPrecioEstimado,
                                            obj.cCodTipoMoneda,
                                            obj.cCodTipoFuenteFinanciamiento,
                                            obj.dFechaPrevista,
                                            obj.cCodTipoAdquisicion,
                                            obj.cCodModalidadSeleccion,
                                            obj.cCodCentro,
                                            obj.cCodCentroGestor,
                                            obj.tObservacion,
                                            obj.cCodEntidadEncargadaConvocante,
                                            obj.cCodMotivoInserccion,
                                            obj.dFecInsertado,
                                            obj.tMotInsertado,
                                            obj.cCodEmpleado,
                                            obj.cCodTipoDocumento,
                                            obj.cNumDocumento
                                         );

                intIdProcesoLogistico_Detalle = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdProcesoLogistico_Detalle = 0;
            }

            return intIdProcesoLogistico_Detalle;
        }

        public int Modifica_ProcesoLogistico_Detalle(Model.ProcesoLogistico_Detalle obj)
        {



            int intIdProcesoLogistico_Detalle = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_mvto_ProcesoLogistico_Detalle",
                                            obj.iIdProcesoLogistico_Detalle,
                                            obj.iIdProcesoLogistico_Cabecera,
                                            obj.cCodProcesoLogistico,
                                            obj.cNumProcedimiento,
                                            obj.cCodTipoProceso,
                                            obj.cCodUnidadMedida,
                                            obj.cCodObjetoContratacion,
                                            obj.tDesContratacion,
                                            obj.tDesJustificacion,
                                            obj.fCantidad,
                                            obj.fPrecioEstimado,
                                            obj.cCodTipoMoneda,
                                            obj.cCodTipoFuenteFinanciamiento,
                                            obj.dFechaPrevista,
                                            obj.cCodTipoAdquisicion,
                                            obj.cCodModalidadSeleccion,
                                            obj.cCodCentro,
                                            obj.cCodCentroGestor,
                                            obj.tObservacion,
                                            obj.cCodEntidadEncargadaConvocante,
                                            obj.cCodMotivoModificacion,
                                            obj.dFecModificado,
                                            obj.tMotModificado,
                                            obj.cCodEmpleado,
                                            obj.cCodTipoDocumento,
                                            obj.cNumDocumento


                                         );

                intIdProcesoLogistico_Detalle = obj.iIdProcesoLogistico_Detalle;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdProcesoLogistico_Detalle = 0;
            }

            return intIdProcesoLogistico_Detalle;
        }

        public bool Elimina_ProcesoLogistico_Detalle(Model.ProcesoLogistico_Detalle obj)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_mvto_ProcesoLogistico_Detalle",
                                           obj.cNumProcedimiento,
                                            obj.cCodMotivoEliminacion,
                                            obj.dFecEliminado,
                                            obj.tMotEliminado,
                                            obj.cCodEmpleado,
                                            obj.cCodTipoDocumento,
                                            obj.cNumDocumento
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_ProcesoLogistico_Detalle_CurvaS( )

        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_mvto_ProcesoLogistico_detalle_CurvaS"
                                     );

        }

        public DataSet Lista_ProcesoLogistico_Detalle_AperturaEtapa()

        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_mvto_ProcesoLogistico_detalle_AperturaEtapa"
                                     );

        }


        public DataSet Lista_ProcesoLogistico_Detalle_Cotizaciones()

        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_mvto_ProcesoLogistico_detalle_Cotizaciones"
                                     );

        }


        public DataSet Lista_ProcesoLogistico_Detalle(string strAñoProceso,
                                            string strVersion
            )

        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_mvto_ProcesoLogistico_Detalle",
                                      strAñoProceso,
                                      strVersion
                                     );

        }

        public string[] HallarTipoProcedimiento_ProcesoLogistico_Detalle(string strAñoProceso,
                                                            string strVersion,
                                                            string strCodTipoProceso
            )
        {

            string[] Codigo = { "", "" };
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Logistica.spp_sel_mvto_ProcesoLogistico_Detalle_TipoProcedimiento",
                                      strAñoProceso,
                                      strVersion,
                                      strCodTipoProceso
                                     );

            Codigo[0] = Convert.ToString(dt.Rows[0][0].ToString());
            Codigo[1] = Convert.ToString(dt.Rows[0][1].ToString());

            return Codigo;
        }

        public DataSet Lista_ProcesoLogistico_Detalle_PorOperadorLogistico(string strAñoProceso,
                                                                string strVersion,
                                                                string strCodOperadorLogistico
                                                               )
        {


            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_mvto_ProcesoLogistico_detalle_PorOperadorLogistico",
                                      strAñoProceso,
                                      strVersion,
                                      strCodOperadorLogistico
                                     );

        }

        public DataSet Lista_ProcesoLogistico_Detalle_PorCeges(string strAñoProceso,
                                                        string strVersion,
                                                        string strCodCeges
                                                     )

        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_lst_mvto_ProcesoLogistico_detalle_porCeges",
                                             strAñoProceso, strVersion, strCodCeges
                                           );
        }

        #endregion

        #region EstadoComite_Integrante
        public DataSet Combo_EstadoComiteIntegrante(int intTipo)
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_ctrl_EstadoComiteIntegrante",
                                            intTipo
                                           );

        }

        public DataSet Combo_EstadoComite_Integrante_Reemplazo()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_ctrl_EstadoReemplazoComite"
                                           );

        }


        #endregion

        #region EstadoOperadorLogistico
        public DataSet Combo_EstadoOperadorLogistico(int intTipo)
        {




            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_ctrl_EstadoOperadorLogistico",
                                            intTipo
                                           );

        }

        public DataSet Combo_EstadoOperadorLogistico_Reemplazo()
        {




            return SqlHelper.ExecuteDataset(strConnection,
                                             "Logistica.spp_cbo_ctrl_EstadoOperadorLogistico_Reemplazo"
                                           );

        }


        #endregion


        #region Adjunto
        public DataTable Lista_Pac_Adjunto_Consulta(int intTipoMovimiento)
        {

            return SqlHelper.ExecuteDataTable(strConnection,
                                                 "Logistica.spp_lst_mvto_pac_Adjunto_Consulta",
                                                 intTipoMovimiento
                                               );

        }

        public DataTable Lista_Pac_Adjunto(int intTipoMovimiento)
        {

            return SqlHelper.ExecuteDataTable(strConnection,
                                                 "Logistica.spp_lst_mvto_pac_Adjunto",
                                                 intTipoMovimiento
                                               );

        }

        public Model.Adjunto Recupera_Pac_Adjunto(int intIdAdjunto)
        {

            DataTable dt = new DataTable();
            Model.Adjunto obj = new Model.Adjunto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_mvto_pac_Adjunto", intIdAdjunto);

            if (dt.Rows.Count > 0)
            {
                obj.iIdAdjunto = Convert.ToInt32(dt.Rows[0][0]);
                obj.iTipoMovimiento = Convert.ToInt32(dt.Rows[0][1]);
                obj.iIdPac_Movimiento = Convert.ToInt32(dt.Rows[0][2]);
                obj.vArchivoOriginal = Convert.ToString(dt.Rows[0][3]);
                obj.vArchivoActual = Convert.ToString(dt.Rows[0][4]);
                obj.vNombre = Convert.ToString(dt.Rows[0][5]);
                obj.dFechaCreacion = Convert.ToDateTime(dt.Rows[0][6]);
                obj.cCodEmpleado = Convert.ToString(dt.Rows[0][7]);
                obj.cCodEstadoAdjunto = Convert.ToString(dt.Rows[0][8]);
            }
            return obj;

        }
        public int Graba_Pac_Adjunto(Model.Adjunto obj)
        {

            int intIdAdjunto = 0;
            DataTable dt = new DataTable();


            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_mvto_pac_Adjunto",
                                                obj.iTipoMovimiento,
                                                obj.iIdPac_Movimiento,
                                                obj.vArchivoOriginal,
                                                obj.vArchivoActual,
                                                obj.vNombre,
                                                obj.dFechaCreacion,
                                                obj.cCodEmpleado,
                                                obj.cCodEstadoAdjunto
                                             );

                intIdAdjunto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdAdjunto = 0;
            }

            return intIdAdjunto;

        }

        public bool Elimina_Pac_Adjunto(int intIdAdjunto)
        {


            bool blnResult = true;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_mvto_pac_adjunto",
                                        intIdAdjunto
                                       );

            }
            catch
            {
                blnResult = false;
            }


            return blnResult;


        }

        #endregion

        #region Proveedor
        public DataSet Ayuda_Proveedor()
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_msto_Proveedor"
                                     );

            return ds;
        }

        public Model.Proveedor Recupera_msto_Proveedor(string strCodProveedor)
        {
            DataTable dt = new DataTable();
            Model.Proveedor obj = new Model.Proveedor();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Viatico.spp_sel_msto_Proveedor", strCodProveedor);

            if (dt.Rows.Count > 0)
            {
                obj.cCodProveedor = Convert.ToString(dt.Rows[0][0]);
                obj.vRazonSocial = Convert.ToString(dt.Rows[0][1]);
            }

            return obj;

        }

        public int Graba_msto_Proveedor(Model.Proveedor objProveedor)
        {



            int intIdProveedor;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_ins_msto_Proveedor",
                                            objProveedor.cCodProveedor,
                                            objProveedor.vRazonSocial,
                                            objProveedor.vDireccion,
                                            objProveedor.vDepartamento,
                                            objProveedor.vProvincia,
                                            objProveedor.vDistrito
                                         );

                intIdProveedor = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdProveedor = 0;
            }

            return intIdProveedor;
        }


        public DataSet Ayuda_msto_Proveedor()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Proveedor.spp_help_msto_Proveedor"
                                     );

            return ds;
        }


        #endregion

        #region Material
        public Model.Material Recupera_Material(string strCodMaterial)
        {
            DataTable dt = new DataTable();
            Model.Material obj = new Model.Material();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_msto_Material", strCodMaterial);

            if (dt.Rows.Count == 0)
            {
                obj.CcodMaterial = "";
                obj.VnomMaterial = "";
                obj.CcodUnidadMedida = "";
                obj.Fstock = 0;
            }
            else
            {
                obj.CcodMaterial = Convert.ToString(dt.Rows[0][0]);
                obj.VnomMaterial = Convert.ToString(dt.Rows[0][1]);
                obj.CcodUnidadMedida = Convert.ToString(dt.Rows[0][2]);
                obj.Fstock = Convert.ToDouble(dt.Rows[0][3]);
            }

            return obj;

        }

        public Model.Servicio Recupera_Servicio(string strCodServicio)
        {
            DataTable dt = new DataTable();
            Model.Servicio obj = new Model.Servicio();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_msto_Servicio", strCodServicio);

            if (dt.Rows.Count == 0)
            {
                obj.CcodServicio = "";
                obj.VnomServicio = "";
            }
            else
            {
                obj.CcodServicio = Convert.ToString(dt.Rows[0][0]);
                obj.VnomServicio = Convert.ToString(dt.Rows[0][1]);
            }

            return obj;

        }

        public DataSet Ayuda_Material(string strTexto)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_msto_Material", strTexto
                                     );

            return ds;
        }

        public DataSet Ayuda_Servicio(string strCodPosPre)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_help_msto_Servicio", strCodPosPre
                                     );

            return ds;
        }
        #endregion

        #region Reporte
        public DataSet Reporte_Pac_Paso_Gantt(string strAñoProceso,
                                        string strVersion,
                                        string strNumProcedimiento
    )
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "logistica.spp_rpt_msto_ProcesoLogistico_Paso_Gantt",
                                      strAñoProceso,
                                      strVersion,
                                      strNumProcedimiento
                                     );

            return ds;
        }

        public DataSet Reporte_Pac_Paso_CurvaS( string strNumProcedimiento )
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "logistica.spp_rpt_msto_ProcesoLogistico_Paso_CurvaS",
                                      strNumProcedimiento
                                     );

            return ds;
        }

        public DataSet Reporte_Pac_Paso_Gantt(string strNumProcedimiento)
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                                "logistica.spp_rpt_msto_ProcesoLogistico_Gantt",
                                                strNumProcedimiento
                                                );


            //var lista = (from order in dt.AsEnumerable()
            //             select new Model.Gantt
            //             {
            //                 iIdPaso = order.Field<int>("iIdPaso"),
            //                 iCodTipoPaso = order.Field<int>("iCodTipoPaso"),
            //                 vDescripcionTipoPaso = order.Field<string>("vDescripcionTipoPaso"),
            //                 cCodPaso = order.Field<string>("cCodPaso"),
            //                 dFecInicio = order.Field<DateTime>("dFecInicio_Proyectado"),
            //                 dFecFinal = order.Field<DateTime>("dFecFinal_Proyectado"),
            //                 iPredecesora = order.Field<int>("iPredecesora"),
            //                 iCompletado = order.Field<int>("iCompletado"),
            //                 vRecurso  = order.Field<string>("vRecurso")
            //             }
            //            ).ToList();

            return ds;
        }


        public DataSet Reporte_Cotizaciones(string strCodEmpresa, 
                                            string strNumProcedimiento
                                            )
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "logistica.spp_lst_mvto_ProcesoLogistico_detalle_Cotizaciones_Proveedor",
                                      strCodEmpresa,
                                      strNumProcedimiento
                                     );

            return ds;
        }

        public DataSet Ayuda_ProcesoLogistico_CentroGestor( string strCodCentroGestor, 
                                                            string strCodEmpleado
                                                          )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Logistica.spp_help_msto_ProcesoLogistico_CentroGestor",
                                            strCodCentroGestor,
                                            strCodEmpleado
                                            );
        }

        #endregion

        #region Varios
        public DataSet Combo_PeriodoProceso()
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_cbo_mvto_ProcesoLogistico_Cabecera_AñoProceso"
                                     );
        }

        public DataSet Combo_Version(string strPeriodoProceso)
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_cbo_mvto_ProcesoLogistico_Cabecera_Version",
                                      strPeriodoProceso
                                     );
        }

        public DataSet Combo_Version_Formulacion(string strPeriodoProceso)
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_cbo_mvto_Formulacion_Cabecera_Version",
                                      strPeriodoProceso
                                     );
        }

        #endregion

        #endregion

        #region PATRIMONIO
        #region MotivoBaja
        public DataSet Combo_MotivoBaja()
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_cbo_ctrl_MotivoBaja");


            return ds;
        }

        public Model.MotivoBaja Recupera_MotivoBaja(int intIdMotivoBaja)
        {
            Model.MotivoBaja obj = new Model.MotivoBaja();
            DataSet ds = new DataSet();
            try
            {
                ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_sel_ctrl_MotivoBaja", intIdMotivoBaja);
                obj.IidMotivoBaja = Convert.ToInt32(ds.Tables[0].Rows[0]["IIDMotivoBaja"]);
                obj.CcodMotivoBaja = Convert.ToString(ds.Tables[0].Rows[0]["CCODMotivoBaja"]);
                obj.VdesMotivoBaja = Convert.ToString(ds.Tables[0].Rows[0]["VDESMotivoBaja"]);

            }
            catch (Exception ex)
            {
                obj.IidMotivoBaja = 0;
                obj.CcodMotivoBaja = "";
                obj.VdesMotivoBaja = "";
            }
            return obj;
        }

        public int Graba_MotivoBaja(string strCodMotivoBaja, string strDesMotivoBaja)
        {
            return Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Patrimonio.spp_ins_ctrl_MotivoBaja", strCodMotivoBaja, strDesMotivoBaja));
        }
        public int Modifica_MotivoBaja(int intIdMotivoBaja, string strCodMotivoBaja, string strDesMotivoBaja)
        {
            return Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Patrimonio.spp_upd_ctrl_MotivoBaja", intIdMotivoBaja, strCodMotivoBaja, strDesMotivoBaja));
        }

        public int Elimina_MotivoBaja(int intIdMotivoBaja)
        {
            return Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Patrimonio.spp_del_ctrl_MotivoBaja", intIdMotivoBaja));
        }

        #endregion

        #region OtrosDatos
        public DataSet Ayuda_TipoIncorporacion()
        {

            return SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_help_ctrl_TipoIncorporacion");
        }
        public DataSet Ayuda_ClasePatrimonio()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_help_ctrl_ClasePatrimonio");
        }

        public DataSet Ayuda_Actividad()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_help_ctrl_Actividad");
        }

        public DataSet Ayuda_SubActividad(string strCodActividad)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_help_ctrl_SubActividad", strCodActividad);
        }

        public DataSet Ayuda_Componente(string strCodActividad)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_help_ctrl_Componente", strCodActividad);
        }

        public DataSet Ayuda_TipoPatrimonio()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_help_ctrl_TipoPatrimonio");
        }

        public DataSet Ayuda_EstadoConservacion()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_help_ctrl_EstadoConservacion");
        }

        public DataSet Ayuda_MetodoDepreciacion()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_help_ctrl_MetodoDepreciacion");
        }

        public DataSet Ayuda_Componente_VidaUtil(string strCodActividad,
                                                  string strCodComponente
                                                )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_help_ctrl_Componente_VidaUtil", strCodActividad, strCodComponente);
        }

        public DataSet Ayuda_SupraNumero()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_help_ctrl_SupraNumero");
        }

        public DataSet Ayuda_TipoFactorCalculo()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_help_ctrl_TipoFactorCalculo");
        }

        #endregion

        #region Patrimonio
        public Model.Patrimonio Recupera_Patrimonio(string strCodPatrimonio)
        {
            DataTable dt = new DataTable();
            Model.Patrimonio obj = new Model.Patrimonio();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_sel_msto_Patrimonio", strCodPatrimonio);

            if (dt.Rows.Count > 0)
            {
                obj.IidPatrimonio = Convert.ToInt32(dt.Rows[0]["IidPatrimonio"]);
                obj.CcodPatrimonio = Convert.ToString(dt.Rows[0]["CcodPatrimonio"]);
                obj.CcodPatrimonio_SAP = Convert.ToString(dt.Rows[0]["CcodPatrimonio_SAP"]);
                obj.CcodPatrimonio_NIIF = Convert.ToString(dt.Rows[0]["CcodPatrimonio_NIIF"]);
                obj.CcodPatrimonio_GIS = Convert.ToString(dt.Rows[0]["CcodPatrimonio_GIS"]);
                obj.CcodPatrimonioAnt = Convert.ToString(dt.Rows[0]["CcodPatrimonioAnt"]);
                obj.VdesPatrimonio = Convert.ToString(dt.Rows[0]["VdesPatrimonio"]);
                obj.CcodTipoIncorporacion = Convert.ToString(dt.Rows[0]["CcodTipoIncorporacion"]);
                obj.CcodSubActividad = Convert.ToString(dt.Rows[0]["CcodSubActividad"]);
                obj.CcodComponente = Convert.ToString(dt.Rows[0]["CcodComponente"]);
                obj.CcodSed = Convert.ToString(dt.Rows[0]["CcodSed"]);
                obj.CcodTipoPatrimonio = Convert.ToString(dt.Rows[0]["CcodTipoPatrimonio"]);
                obj.CcodMarca = Convert.ToString(dt.Rows[0]["CcodMarca"]);
                obj.VdesModelo = Convert.ToString(dt.Rows[0]["VdesModelo"]);
                obj.VnumSerie = Convert.ToString(dt.Rows[0]["VnumSerie"]);
                obj.CcodClasePatrimonio = Convert.ToString(dt.Rows[0]["CcodClasePatrimonio"]);
                obj.CcodSupranumero = Convert.ToString(dt.Rows[0]["CcodSupranumero"]);
                obj.CcodActividad = Convert.ToString(dt.Rows[0]["CcodActividad"]);
                obj.CcodEstadoConservacion = Convert.ToString(dt.Rows[0]["CcodEstadoConservacion"]);
                obj.CcodUnidadMedida = Convert.ToString(dt.Rows[0]["CcodUnidadMedida"]);
                obj.Fpresentacion = Convert.ToDouble(dt.Rows[0]["Fpresentacion"]);
                obj.TespecificacionTecnica = Convert.ToString(dt.Rows[0]["TespecificacionTecnica"]);
                obj.CnumTransaccion = Convert.ToString(dt.Rows[0]["CnumTransaccion"]);
                obj.CcodTipoFactorCalculo_Tributario = Convert.ToString(dt.Rows[0]["CcodTipoFactorCalculo_Tributario"]);
                obj.CcodTipoFactorCalculo_Financiero = Convert.ToString(dt.Rows[0]["CcodTipoFactorCalculo_Financiero"]);
                obj.FvidaUtilFinanciera = Convert.ToDouble(dt.Rows[0]["FvidaUtilFinanciera"]);
                obj.FvidaUtilTributaria = Convert.ToDouble(dt.Rows[0]["FvidaUtilTributaria"]);
                obj.FvalorResidual_MN = Convert.ToDouble(dt.Rows[0]["FvalorResidual_MN"]);
                obj.FvalorResidual_ME = Convert.ToDouble(dt.Rows[0]["FvalorResidual_ME"]);
                obj.FvalorResidual_MN_tasa = Convert.ToDouble(dt.Rows[0]["FvalorResidual_MN_tasa"]);
                obj.FvalorResidual_ME_tasa = Convert.ToDouble(dt.Rows[0]["FvalorResidual_ME_tasa"]);
                obj.CcodTipoMoneda = Convert.ToString(dt.Rows[0]["CcodTipoMoneda"]);
                obj.FvalorPatrimonio_MN = Convert.ToDouble(dt.Rows[0]["FvalorPatrimonio_MN"]);
                obj.FvalorPatrimonio_ME = Convert.ToDouble(dt.Rows[0]["FvalorPatrimonio_ME"]);
                obj.FvalorPatrimonio_MN_tasa = Convert.ToDouble(dt.Rows[0]["FvalorPatrimonio_MN_tasa"]);
                obj.FvalorPatrimonio_ME_tasa = Convert.ToDouble(dt.Rows[0]["FvalorPatrimonio_ME_tasa"]);
                obj.TinsRRPP = Convert.ToString(dt.Rows[0]["TinsRRPP"]);
                obj.Tprocedencia = Convert.ToString(dt.Rows[0]["Tprocedencia"]);
                obj.CcodColor = Convert.ToString(dt.Rows[0]["CcodColor"]);
                obj.CnumMotor = Convert.ToString(dt.Rows[0]["CnumMotor"]);
                obj.CañoFabricacion = Convert.ToString(dt.Rows[0]["CañoFabricacion"]);
                obj.CnumPlaca = Convert.ToString(dt.Rows[0]["CnumPlaca"]);
                obj.DfecConstruccion = Convert.ToDateTime(dt.Rows[0]["DfecConstruccion"]);
                obj.CsubEstacion = Convert.ToString(dt.Rows[0]["CsubEstacion"]);
                obj.CcodMetodoDepreciacion_01 = Convert.ToString(dt.Rows[0]["CcodMetodoDepreciacion_01"]);
                obj.CcodMetodoDepreciacion_02 = Convert.ToString(dt.Rows[0]["CcodMetodoDepreciacion_02"]);
                obj.DfecIncorporacion = Convert.ToDateTime(dt.Rows[0]["DfecIncorporacion"]);
                obj.Cperiodo = Convert.ToString(dt.Rows[0]["Cperiodo"]);
            }

            return obj;
        }


        public Model.Patrimonio Graba_Patrimonio(Model.Patrimonio obj)
        {
            Model.Patrimonio MP = new Model.Patrimonio();
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_ins_msto_Patrimonio",
                                                  obj.CcodPatrimonio,
                                                  obj.CcodPatrimonio_SAP,
                                                  obj.CcodPatrimonio_GIS,
                                                  obj.CcodPatrimonio_NIIF,
                                                  obj.CcodPatrimonioAnt,
                                                  obj.VdesPatrimonio,
                                                  obj.CcodTipoIncorporacion,
                                                  obj.CcodSubActividad,
                                                  obj.CcodComponente,
                                                  obj.CcodSed,
                                                  obj.CcodTipoPatrimonio,
                                                  obj.CcodMarca,
                                                  obj.VdesModelo,
                                                  obj.VnumSerie,
                                                  obj.CcodClasePatrimonio,
                                                  obj.CcodSupranumero,
                                                  obj.CcodActividad,
                                                  obj.CcodEstadoConservacion,
                                                  obj.CcodUnidadMedida,
                                                  obj.Fpresentacion,
                                                  obj.TespecificacionTecnica,
                                                  obj.CcodTipoFactorCalculo_Tributario,
                                                  obj.CcodTipoFactorCalculo_Financiero,
                                                  obj.FvidaUtilFinanciera,
                                                  obj.FvidaUtilTributaria,
                                                  obj.FvalorResidual_MN,
                                                  obj.FvalorResidual_ME,
                                                  obj.FvalorResidual_MN_tasa,
                                                  obj.FvalorResidual_ME_tasa,
                                                  obj.CcodTipoMoneda,
                                                  obj.FvalorPatrimonio_MN,
                                                  obj.FvalorPatrimonio_ME,
                                                  obj.FvalorPatrimonio_MN_tasa,
                                                  obj.FvalorPatrimonio_ME_tasa,
                                                  obj.TinsRRPP,
                                                  obj.Tprocedencia,
                                                  obj.CcodColor,
                                                  obj.CnumMotor,
                                                  obj.CañoFabricacion,
                                                  obj.CnumPlaca,
                                                  obj.DfecConstruccion,
                                                  obj.CsubEstacion,
                                                  obj.CcodMetodoDepreciacion_01,
                                                  obj.CcodMetodoDepreciacion_02,
                                                  obj.DfecIncorporacion,
                                                  obj.Cperiodo
                                                );
                MP.CcodPatrimonio = Convert.ToString(dt.Rows[0][0]);
                MP.CnumTransaccion = Convert.ToString(dt.Rows[0][1]);
                MP.CcodPatrimonio_NIIF = Convert.ToString(dt.Rows[0][2]);
            }
            catch
            {
                MP.CcodPatrimonio = "";
            }
            return MP;


        }


        public Boolean Modifica_Patrimonio(Model.Patrimonio obj)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_upd_msto_Patrimonio",
                                                 obj.IidPatrimonio,
                                                 obj.CcodPatrimonio,
                                                 obj.CcodPatrimonio_SAP,
                                                 obj.CcodPatrimonio_GIS,
                                                 obj.CcodPatrimonio_NIIF,
                                                 obj.CcodPatrimonioAnt,
                                                 obj.VdesPatrimonio,
                                                 obj.CcodTipoIncorporacion,
                                                 obj.CcodSubActividad,
                                                 obj.CcodComponente,
                                                 obj.CcodSed,
                                                 obj.CcodTipoPatrimonio,
                                                 obj.CcodMarca,
                                                 obj.VdesModelo,
                                                 obj.VnumSerie,
                                                 obj.CcodClasePatrimonio,
                                                 obj.CcodSupranumero,
                                                 obj.CcodActividad,
                                                 obj.CcodEstadoConservacion,
                                                 obj.CcodUnidadMedida,
                                                 obj.Fpresentacion,
                                                 obj.TespecificacionTecnica,
                                                 obj.CcodTipoFactorCalculo_Tributario,
                                                 obj.CcodTipoFactorCalculo_Financiero,
                                                 obj.FvidaUtilFinanciera,
                                                 obj.FvidaUtilTributaria,
                                                 obj.FvalorResidual_MN,
                                                 obj.FvalorResidual_ME,
                                                 obj.FvalorResidual_MN_tasa,
                                                 obj.FvalorResidual_ME_tasa,
                                                 obj.CcodTipoMoneda,
                                                 obj.FvalorPatrimonio_MN,
                                                 obj.FvalorPatrimonio_ME,
                                                 obj.FvalorPatrimonio_MN_tasa,
                                                 obj.FvalorPatrimonio_ME_tasa,
                                                 obj.TinsRRPP,
                                                 obj.Tprocedencia,
                                                 obj.CcodColor,
                                                 obj.CnumMotor,
                                                 obj.CañoFabricacion,
                                                 obj.CnumPlaca,
                                                 obj.DfecConstruccion,
                                                 obj.CsubEstacion,
                                                 obj.CcodMetodoDepreciacion_01,
                                                 obj.CcodMetodoDepreciacion_02,
                                                 obj.DfecIncorporacion,
                                                 obj.Cperiodo
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;


        }

        public Boolean Elimina_Patrimonio(string strCodPatrimonio)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_del_msto_Patrimonio",
                                               strCodPatrimonio
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;


        }

        public DataSet Ayuda_Patrimonio()
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_help_msto_Patrimonio");

            return ds;

        }

        public DataSet Lista_Patrimonio_ErroresDepreciacion()
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_lst_msto_Patrimonio_ErroresDepreciacion");
            return ds;
        }

        #endregion

        #region Patrimonio_Depreciacion
        public Model.Patrimonio_Depreciacion Recupera_Patrimonio_Depreciacion(string strPeriodo,
                                                                        string strCodSegmento,
                                                                        string strCodPatrimonio
                                                                       )
        {
            Model.Patrimonio_Depreciacion obj = new Model.Patrimonio_Depreciacion();
            DataSet ds;

            try
            {
                ds = SqlHelper.ExecuteDataset(strConnection,
                                                "Patrimonio.spp_lst_msto_Patrimonio_Depreciacion",
                                                strPeriodo,
                                                strCodSegmento,
                                                strCodPatrimonio
                                             );

                obj.CcodPatrimonio = Convert.ToString(ds.Tables[0].Rows[0]["cCodPatrimonio"]);
                obj.FdepAñoAntes_Tributario_MN = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAñoAntes_Tributario_MN"]);
                obj.FdepAcumulado_Tributario_MN = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAcumulado_Tributario_MN"]);
                obj.FdepAñoAntes_Tributario_ME = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAñoAntes_Tributario_ME"]);
                obj.FdepAcumulado_Tributario_ME = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAcumulado_Tributario_ME"]);

                obj.FdepAñoAntes_Financiero_MN = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAñoAntes_Financiero_MN"]);
                obj.FdepAcumulado_Financiero_MN = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAcumulado_Financiero_MN"]);
                obj.FdepAñoAntes_Financiero_ME = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAñoAntes_Financiero_ME"]);
                obj.FdepAcumulado_Financiero_ME = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAcumulado_Financiero_ME"]);

            }
            catch (Exception ex)
            {
            }
            return obj;
        }
        public Model.Patrimonio_Depreciacion Recupera_Patrimonio_Depreciacion_Componente(string strPeriodo,
                                                                                         string strCodSegmento,
                                                                                         string strCodPatrimonio
                                                                                        )
        {
            Model.Patrimonio_Depreciacion obj = new Model.Patrimonio_Depreciacion();
            DataSet ds;

            try
            {
                ds = SqlHelper.ExecuteDataset(strConnection,
                                                "Patrimonio.spp_lst_msto_¨Patrimonio_Depreciacion_Componente",
                                                strPeriodo,
                                                strCodSegmento,
                                                strCodPatrimonio
                                             );

                obj.CcodPatrimonio = Convert.ToString(ds.Tables[0].Rows[0]["cCodPatrimonio"]);
                obj.FdepAñoAntes_Tributario_MN = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAñoAntes_Tributario_MN"]);
                obj.FdepAcumulado_Tributario_MN = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAcumulado_Tributario_MN"]);
                obj.FdepAñoAntes_Tributario_ME = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAñoAntes_Tributario_ME"]);
                obj.FdepAcumulado_Tributario_ME = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAcumulado_Tributario_ME"]);

                obj.FdepAñoAntes_Financiero_MN = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAñoAntes_Financiero_MN"]);
                obj.FdepAcumulado_Financiero_MN = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAcumulado_Financiero_MN"]);
                obj.FdepAñoAntes_Financiero_ME = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAñoAntes_Financiero_ME"]);
                obj.FdepAcumulado_Financiero_ME = Convert.ToDouble(ds.Tables[0].Rows[0]["fDepAcumulado_Financiero_ME"]);

            }
            catch (Exception ex)
            {
            }
            return obj;
        }

        #endregion

        #region Patrimonio_Origen
        public Model.Patrimonio_Origen Recupera_Patrimonio_Origen(int intIdPatrimonio_Origen)
        {
            DataTable dt = new DataTable();
            Model.Patrimonio_Origen obj = new Model.Patrimonio_Origen();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_sel_msto_Patrimonio_Origen", intIdPatrimonio_Origen);

            if (dt.Rows.Count > 0)
            {
                obj.IidPatrimonio_Origen = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodPatrimonio = Convert.ToString(dt.Rows[0][1]);
                obj.CcodEntidad = Convert.ToString(dt.Rows[0][2]);
                obj.CcodTipoDocumento = Convert.ToString(dt.Rows[0][3]);
                obj.CserDocumento = Convert.ToString(dt.Rows[0][4]);
                obj.CnumDocumento = Convert.ToString(dt.Rows[0][5]);
                obj.DfecDocumento = Convert.ToDateTime(dt.Rows[0][6]);
                obj.Tnota = Convert.ToString(dt.Rows[0][7]);
                obj.EsDocumentoInicial = Convert.ToBoolean(dt.Rows[0][8]);
            }

            return obj;
        }


        public Model.Patrimonio_Origen Graba_Patrimonio_Origen(Model.Patrimonio_Origen obj)
        {
            Model.Patrimonio_Origen MP = new Model.Patrimonio_Origen();
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_ins_msto_Patrimonio_Origen",
                                                obj.CcodPatrimonio,
                                                obj.CcodEntidad,
                                                obj.CcodTipoDocumento,
                                                obj.CserDocumento,
                                                obj.CnumDocumento,
                                                obj.DfecDocumento,
                                                obj.Tnota,
                                                obj.EsDocumentoInicial
                                                );
                MP.CcodPatrimonio = Convert.ToString(dt.Rows[0][0]);
            }
            catch
            {
                MP.CcodPatrimonio = "";
            }
            return MP;


        }


        public Boolean Modifica_Patrimonio_Origen(Model.Patrimonio_Origen obj)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_upd_msto_Patrimonio_Origen",
                                                  obj.IidPatrimonio_Origen,
                                                obj.CcodPatrimonio,
                                                obj.CcodEntidad,
                                                obj.CcodTipoDocumento,
                                                obj.CserDocumento,
                                                obj.CnumDocumento,
                                                obj.DfecDocumento,
                                                obj.Tnota,
                                                obj.EsDocumentoInicial
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;


        }

        public Boolean Elimina_Patrimonio_Origen(int intIdPatrimonio_Origen)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_del_msto_Patrimonio_Origen",
                                               intIdPatrimonio_Origen
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;


        }

        #endregion

        #region Patrimonio_Resguardo
        public Model.Patrimonio_Resguardo Recupera_Patrimonio_Resguardo(int intIdPatrimonio_Resguardo)
        {
            DataTable dt = new DataTable();
            Model.Patrimonio_Resguardo obj = new Model.Patrimonio_Resguardo();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_sel_msto_Patrimonio_Resguardo", intIdPatrimonio_Resguardo);

            if (dt.Rows.Count > 0)
            {
                obj.IidPatrimonio_Resguardo = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodPatrimonio = Convert.ToString(dt.Rows[0][1]);
                obj.CcodResponsable = Convert.ToString(dt.Rows[0][2]);
                obj.DfecResguardo = Convert.ToDateTime(dt.Rows[0][3]);
                obj.Bestado = Convert.ToBoolean(dt.Rows[0][4]);
            }

            return obj;
        }


        public Model.Patrimonio_Resguardo Graba_Patrimonio_Resguardo(Model.Patrimonio_Resguardo obj)
        {
            Model.Patrimonio_Resguardo MP = new Model.Patrimonio_Resguardo();
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_ins_msto_Patrimonio_Resguardo",
                                                obj.CcodPatrimonio,
                                                  obj.CcodResponsable,
                                                  obj.DfecResguardo,
                                                  obj.Bestado
                                                );
                MP.CcodPatrimonio = Convert.ToString(dt.Rows[0][0]);
            }
            catch
            {
                MP.CcodPatrimonio = "";
            }
            return MP;


        }


        public Boolean Modifica_Patrimonio_Resguardo(Model.Patrimonio_Resguardo obj)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_upd_msto_Patrimonio_Resguardo",
                                                  obj.IidPatrimonio_Resguardo,
                                                  obj.CcodPatrimonio,
                                                  obj.CcodResponsable,
                                                  obj.DfecResguardo,
                                                  obj.Bestado
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;


        }

        public Boolean Elimina_Patrimonio_Resguardo(int intIdPatrimonio_Resguardo)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_del_msto_Patrimonio_Resguardo",
                                               intIdPatrimonio_Resguardo
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;


        }

        #endregion

        #region Patrimonio_Saldos
        public Model.Patrimonio_Saldos Recupera_Patrimonio_Saldos(string strCodSegmento,
                                                            string strCodCentro,
                                                            string strCodEmplazamiento,
                                                            string strCodCentroCosto,
                                                            string strCodPatrimonio
                                                         )
        {
            DataTable dt = new DataTable();
            Model.Patrimonio_Saldos obj = new Model.Patrimonio_Saldos();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Patrimonio.spp_sel_msto_Patrimonio_Saldos",
                                            strCodSegmento,
                                            strCodCentro,
                                            strCodEmplazamiento,
                                            strCodCentroCosto,
                                            strCodPatrimonio
                                            );

            if (dt.Rows.Count > 0)
            {
                obj.Fcantidad = Convert.ToDouble(dt.Rows[0]["fCantidad"]);

                obj.FvalorActivo_ME = Convert.ToDouble(dt.Rows[0]["fValorActivo_ME"]);
                obj.FvalorActivo_ME_tasa = Convert.ToDouble(dt.Rows[0]["fValorActivo_ME_tasa"]);
                obj.FvalorActivo_MN = Convert.ToDouble(dt.Rows[0]["fValorActivo_MN"]);
                obj.FvalorActivo_MN_tasa = Convert.ToDouble(dt.Rows[0]["fValorActivo_MN_tasa"]);
                obj.FvalorResidual_ME = Convert.ToDouble(dt.Rows[0]["fValorResidual_ME"]);
                obj.FvalorResidual_ME_tasa = Convert.ToDouble(dt.Rows[0]["fValorResidual_ME_tasa"]);
                obj.FvalorResidual_MN = Convert.ToDouble(dt.Rows[0]["fValorResidual_MN"]);
                obj.FvalorResidual_MN_tasa = Convert.ToDouble(dt.Rows[0]["fValorResidual_MN_tasa"]);
                obj.IvidaUtil_Tributario = Convert.ToInt32(dt.Rows[0]["iVidaUtil_Tributario"]);
                obj.IvidaUtil_Financiero = Convert.ToInt32(dt.Rows[0]["iVidaUtil_Financiero"]);

            }

            return obj;
        }

        #endregion

        #region Patrimonio_TipoMovimiento
        public Model.Patrimonio_TipoMovimiento Recupera_TipoMovimientoPatrimonio_Codigo(string strCodTipoMovimientoPatrimonio)
        {
            DataSet ds = new DataSet();
            Model.Patrimonio_TipoMovimiento obj = new Model.Patrimonio_TipoMovimiento();

            ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_sel_ctrl_TipoMovimientoPatrimonio_Codigo", strCodTipoMovimientoPatrimonio);

            obj.IidTipoMovimientoPatrimonio = Convert.ToInt32(ds.Tables[0].Rows[0]["IIDTipoMovimientoPatrimonio"]);
            obj.CcodTipoMovimientoPatrimonio = Convert.ToString(ds.Tables[0].Rows[0]["CCODTipoMovimientoPatrimonio"]);
            obj.VdesTipoMovimientoPatrimonio = Convert.ToString(ds.Tables[0].Rows[0]["VDESTipoMovimientoPatrimonio"]);
            obj.ItipoMovimiento = Convert.ToInt32(ds.Tables[0].Rows[0]["iTipoMovimiento"]);
            obj.BrequiereDepreciacionAnterior = Convert.ToBoolean(ds.Tables[0].Rows[0]["bRequiereDepreciacionAnterior"]);

            return obj;

        }
        public string recupera_TipoMovimientoPatrimonio_Correlativo(string strCodCentro, string strCodTipoMovimientoPatrimonio)
        {
            DataSet ds = new DataSet();
            string strNumTransaccion = "";

            ds = SqlHelper.ExecuteDataset(strConnection, "spp_cor_ctrl_TipoMovimientoPatrimonio_Correlativo", strCodCentro, strCodTipoMovimientoPatrimonio);

            strNumTransaccion = Convert.ToString(ds.Tables[0].Rows[0]["cNumTransaccion"]).Trim();

            return strNumTransaccion;

        }

        public int Graba_TipoMovimientoPatrimonio(Model.Patrimonio_TipoMovimiento obj)
        {
            return Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection,
                                                            "Patrimonio.spp_ins_ctrl_TipoMovimientoPatrimonio",
                                                            obj.CcodTipoMovimientoPatrimonio,
                                                            obj.VdesTipoMovimientoPatrimonio,
                                                            obj.ItipoMovimiento,
                                                            obj.BrequiereDepreciacionAnterior
                                                         )
                                   );
        }
        public int Graba_TipoMovimientoPatrimonio_Correlativo(string strCodCentro,
                                                                string strCodTipoMovimientoPatrimonio,
                                                                string strNumTransaccion
                                                              )
        {
            return Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection,
                                                            "Patrimonio.spp_ins_ctrl_TipoMovimientoPatrimonio_Correlativo",
                                                            strCodCentro,
                                                            strCodTipoMovimientoPatrimonio,
                                                            strNumTransaccion
                                                           )
                                  );
        }

        public int Modifica_TipoMovimientoPatrimonio(Model.Patrimonio_TipoMovimiento obj)
        {
            return Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection,
                                                           "Patrimonio.spp_upd_ctrl_TipoMovimientoPatrimonio",
                                                           obj.IidTipoMovimientoPatrimonio,
                                                           obj.CcodTipoMovimientoPatrimonio,
                                                           obj.VdesTipoMovimientoPatrimonio,
                                                           obj.ItipoMovimiento,
                                                           obj.BrequiereDepreciacionAnterior
                                                         )
                                  );
        }


        #endregion

        #region Patrimonio_Transaccion
        public Model.Patrimonio_Transaccion Recupera_Patrimonio_Transaccion(int intIdPatrimonio_Transaccion)
        {
            DataTable dt = new DataTable();
            Model.Patrimonio_Transaccion obj = new Model.Patrimonio_Transaccion();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_sel_msto_Patrimonio_Transaccion", intIdPatrimonio_Transaccion);

            if (dt.Rows.Count > 0)
            {
                obj.IidPatrimonio_Transaccion = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodPatrimonio = Convert.ToString(dt.Rows[0][1]);
                obj.CcodTipoTransaccion = Convert.ToString(dt.Rows[0][2]);
                obj.CnumTransaccion = Convert.ToString(dt.Rows[0][3]);
                obj.CnumTransaccion_Referencia = Convert.ToString(dt.Rows[0][4]);
                obj.DfecTransaccion = Convert.ToDateTime(dt.Rows[0][5]);
                obj.CcodSegmentoOrigen = Convert.ToString(dt.Rows[0][6]);
                obj.CcodSegmentoDestino = Convert.ToString(dt.Rows[0][7]);
                obj.CtipoMovimiento = Convert.ToString(dt.Rows[0][8]);
                obj.CtipoMovimiento_VidaUtil = Convert.ToString(dt.Rows[0][9]);
                obj.Fcantidad = Convert.ToDouble(dt.Rows[0][10]);
                obj.FvalorPatrimonio_MN = Convert.ToDouble(dt.Rows[0][11]);
                obj.FvalorPatrimonio_ME = Convert.ToDouble(dt.Rows[0][12]);
                obj.FvalorPatrimonio_MN_tasa = Convert.ToDouble(dt.Rows[0][13]);
                obj.FvalorPatrimonio_ME_tasa = Convert.ToDouble(dt.Rows[0][14]);
                obj.FvalorResidual_MN = Convert.ToDouble(dt.Rows[0][15]);
                obj.FvalorResidual_ME = Convert.ToDouble(dt.Rows[0][16]);
                obj.FvalorResidual_MN_tasa = Convert.ToDouble(dt.Rows[0][17]);
                obj.FvalorResidual_ME_tasa = Convert.ToDouble(dt.Rows[0][18]);
                obj.CperiodoRegistro = Convert.ToString(dt.Rows[0][19]);
                obj.CcodTipoMovimiento = Convert.ToString(dt.Rows[0][20]);

                obj.CcodSegmento = Convert.ToString(dt.Rows[0][21]);
                obj.CcodCentroCosto = Convert.ToString(dt.Rows[0][22]);
                obj.CcodCentro = Convert.ToString(dt.Rows[0][23]);
                obj.CcodEmplazamiento = Convert.ToString(dt.Rows[0][24]);
                obj.CcodLocal = Convert.ToString(dt.Rows[0][25]);

                obj.TubiFisica = Convert.ToString(dt.Rows[0][26]);
                obj.FimportePatrimonioTransferido = Convert.ToDouble(dt.Rows[0][27]);
                obj.CperiodoAñosAnteriores = Convert.ToString(dt.Rows[0][28]);
                obj.FimporteAñosAnteriores = Convert.ToDouble(dt.Rows[0][29]);
                obj.CperiodoMesesAnteriores = Convert.ToString(dt.Rows[0][30]);
                obj.FimporteMesesAnteriores = Convert.ToDouble(dt.Rows[0][31]);

                obj.FdepAñoAntes_Tributario_MN = Convert.ToDouble(dt.Rows[0][32]);
                obj.FdepAcumulado_Tributario_MN = Convert.ToDouble(dt.Rows[0][33]);
                obj.FdepAñoAntes_Tributario_ME = Convert.ToDouble(dt.Rows[0][34]);
                obj.FdepAcumulado_Tributario_ME = Convert.ToDouble(dt.Rows[0][35]);
                obj.FdepAñoAntes_Financiero_MN = Convert.ToDouble(dt.Rows[0][36]);
                obj.FdepAcumulado_Financiero_MN = Convert.ToDouble(dt.Rows[0][37]);
                obj.FdepAñoAntes_Financiero_ME = Convert.ToDouble(dt.Rows[0][38]);
                obj.FdepAcumulado_Financiero_ME = Convert.ToDouble(dt.Rows[0][39]);

                obj.CcodMotivoBaja = Convert.ToString(dt.Rows[0][40]);
                obj.CcodRecomendacionBaja = Convert.ToString(dt.Rows[0][41]);
                obj.Tnota = Convert.ToString(dt.Rows[0][42]);

                obj.CcodMotivoTransferencia = Convert.ToString(dt.Rows[0][43]);
                obj.CcodRecomendacionTransferencia = Convert.ToString(dt.Rows[0][44]);
                obj.TnotaTransferencia = Convert.ToString(dt.Rows[0][45]);

                obj.IvidaUtil_Tributario = Convert.ToInt32(dt.Rows[0][46]);
                obj.IvidaUtil_Financiero = Convert.ToInt32(dt.Rows[0][47]);

            }

            return obj;
        }


        public string Graba_Patrimonio_Transaccion(Model.Patrimonio_Transaccion obj)
        {
            Model.Patrimonio_Transaccion MPT = new Model.Patrimonio_Transaccion();
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_ins_msto_Patrimonio_Transaccion",
                                                        obj.CcodPatrimonio,
                                                        obj.CcodTipoTransaccion,
                                                        obj.CnumTransaccion,
                                                        obj.CnumTransaccion_Referencia,
                                                        obj.DfecTransaccion,
                                                        obj.CcodSegmentoOrigen,
                                                        obj.CcodSegmentoDestino,
                                                        obj.CcodSegmento,
                                                        obj.CtipoMovimiento,
                                                        obj.CtipoMovimiento_VidaUtil,
                                                        obj.Fcantidad,
                                                        obj.FvalorPatrimonio_MN,
                                                        obj.FvalorPatrimonio_ME,
                                                        obj.FvalorPatrimonio_MN_tasa,
                                                        obj.FvalorPatrimonio_ME_tasa,
                                                        obj.FvalorResidual_MN,
                                                        obj.FvalorResidual_ME,
                                                        obj.FvalorResidual_MN_tasa,
                                                        obj.FvalorResidual_ME_tasa,
                                                        obj.CperiodoRegistro,
                                                        obj.CcodTipoMovimiento,
                                                        obj.CcodCentro,
                                                        obj.CcodEmplazamiento,
                                                        obj.CcodCentroCosto,
                                                        obj.TubiFisica,
                                                        obj.FdepAñoAntes_Tributario_MN,
                                                        obj.FdepAcumulado_Tributario_MN,
                                                        obj.FdepAñoAntes_Tributario_ME,
                                                        obj.FdepAcumulado_Tributario_ME,
                                                        obj.FdepAñoAntes_Financiero_MN,
                                                        obj.FdepAcumulado_Financiero_MN,
                                                        obj.FdepAñoAntes_Financiero_ME,
                                                        obj.FdepAcumulado_Financiero_ME,
                                                        obj.CcodMotivoBaja,
                                                        obj.CcodRecomendacionBaja,
                                                        obj.Tnota,
                                                        obj.CcodMotivoTransferencia,
                                                        obj.CcodRecomendacionTransferencia,
                                                        obj.TnotaTransferencia,
                                                        obj.IvidaUtil_Tributario,
                                                        obj.IvidaUtil_Financiero
                                                );
                MPT.CnumTransaccion = Convert.ToString(dt.Rows[0][0]);
            }
            catch
            {
                MPT.CnumTransaccion = "";
            }
            return MPT.CnumTransaccion;


        }


        public Boolean Modifica_Patrimonio_Transaccion(Model.Patrimonio_Transaccion obj)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_upd_msto_Patrimonio_Transaccion",
                                                        obj.IidPatrimonio_Transaccion,
                                                        obj.CcodPatrimonio,
                                                        obj.CcodTipoTransaccion,
                                                        obj.CnumTransaccion,
                                                        obj.CnumTransaccion_Referencia,
                                                        obj.DfecTransaccion,
                                                        obj.CcodSegmentoOrigen,
                                                        obj.CcodSegmentoDestino,
                                                        obj.CcodSegmento,
                                                        obj.CtipoMovimiento,
                                                        obj.CtipoMovimiento_VidaUtil,
                                                        obj.Fcantidad,
                                                        obj.FvalorPatrimonio_MN,
                                                        obj.FvalorPatrimonio_ME,
                                                        obj.FvalorPatrimonio_MN_tasa,
                                                        obj.FvalorPatrimonio_ME_tasa,
                                                        obj.FvalorResidual_MN,
                                                        obj.FvalorResidual_ME,
                                                        obj.FvalorResidual_MN_tasa,
                                                        obj.FvalorResidual_ME_tasa,
                                                        obj.CperiodoRegistro,
                                                        obj.CcodTipoMovimiento,
                                                        obj.CcodCentro,
                                                        obj.CcodEmplazamiento,
                                                        obj.CcodCentroCosto,
                                                        obj.TubiFisica,
                                                        obj.FdepAñoAntes_Tributario_MN,
                                                        obj.FdepAcumulado_Tributario_MN,
                                                        obj.FdepAñoAntes_Tributario_ME,
                                                        obj.FdepAcumulado_Tributario_ME,
                                                        obj.FdepAñoAntes_Financiero_MN,
                                                        obj.FdepAcumulado_Financiero_MN,
                                                        obj.FdepAñoAntes_Financiero_ME,
                                                        obj.FdepAcumulado_Financiero_ME,
                                                        obj.CcodMotivoBaja,
                                                        obj.CcodRecomendacionBaja,
                                                        obj.Tnota,
                                                        obj.CcodMotivoTransferencia,
                                                        obj.CcodRecomendacionTransferencia,
                                                        obj.TnotaTransferencia,
                                                        obj.IvidaUtil_Tributario,
                                                        obj.IvidaUtil_Financiero
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;


        }

        public Boolean Elimina_Patrimonio_Transaccion(int intIdPatrimonio_Transaccion)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_del_msto_Patrimonio_Transaccion",
                                               intIdPatrimonio_Transaccion
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public DataSet Lista_Patrimonio_Transaccion_para_transferencia(string strCodPatrimonio)
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_lst_msto_Patrimonio_Transaccion_para_transferencia", strCodPatrimonio);

            return ds;
        }

        #endregion

        #region Patrimonio_Transferencia
        public Model.Patrimonio_Transferencia Recupera_Patrimonio_Transferencia(int intIdPatrimonio_Transferencia)
        {
            DataTable dt = new DataTable();
            Model.Patrimonio_Transferencia obj = new Model.Patrimonio_Transferencia();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_sel_msto_Patrimonio_Transferencia", intIdPatrimonio_Transferencia);

            if (dt.Rows.Count > 0)
            {
                obj.IidPatrimonio_Transferencia = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodPatrimonio = Convert.ToString(dt.Rows[0][1]);
                obj.CcodSegmento = Convert.ToString(dt.Rows[0][2]);
                obj.CcodCentro = Convert.ToString(dt.Rows[0][3]);
                obj.CcodEmplazamiento = Convert.ToString(dt.Rows[0][4]);
                obj.CcodCentroCosto = Convert.ToString(dt.Rows[0][5]);
                obj.Tlocal = Convert.ToString(dt.Rows[0][6]);
                obj.Fcantidad = Convert.ToDouble(dt.Rows[0][7]);
                obj.DfecTransferencia = Convert.ToDateTime(dt.Rows[0][8]);
                obj.FimportePatrimonioTransferido = Convert.ToDouble(dt.Rows[0][9]);
                obj.CperiodoAñosAnteriores = Convert.ToString(dt.Rows[0][10]);
                obj.FimporteAñosAnteriores = Convert.ToDouble(dt.Rows[0][11]);
                obj.CperiodoMesesAnteriores = Convert.ToString(dt.Rows[0][12]);
                obj.FimporteMesesAnteriores = Convert.ToDouble(dt.Rows[0][13]);
                obj.Bestado = Convert.ToBoolean(dt.Rows[0][14]);

            }

            return obj;
        }


        public Model.Patrimonio_Transferencia Graba_Patrimonio_Transferencia(Model.Patrimonio_Transferencia obj)
        {
            Model.Patrimonio_Transferencia MP = new Model.Patrimonio_Transferencia();
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_ins_msto_Patrimonio_Transferencia",
                                                obj.CcodPatrimonio,
                                                obj.CcodSegmento,
                                                obj.CcodCentro,
                                                obj.CcodEmplazamiento,
                                                obj.CcodCentroCosto,
                                                obj.Tlocal,
                                                obj.Fcantidad,
                                                obj.DfecTransferencia,
                                                obj.FimportePatrimonioTransferido,
                                                obj.CperiodoAñosAnteriores,
                                                obj.FimporteAñosAnteriores,
                                                obj.CperiodoMesesAnteriores,
                                                obj.FimporteMesesAnteriores,
                                                obj.Bestado
                                                );
                MP.CcodPatrimonio = Convert.ToString(dt.Rows[0][0]);
            }
            catch
            {
                MP.CcodPatrimonio = "";
            }
            return MP;


        }


        public Boolean Modifica_Patrimonio_Transferencia(Model.Patrimonio_Transferencia obj)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_upd_msto_Patrimonio_Transferencia",
                                                  obj.IidPatrimonio_Transferencia,
                                                obj.CcodPatrimonio,
                                                obj.CcodSegmento,
                                                obj.CcodCentro,
                                                obj.CcodEmplazamiento,
                                                obj.CcodCentroCosto,
                                                obj.Tlocal,
                                                obj.Fcantidad,
                                                obj.DfecTransferencia,
                                                obj.FimportePatrimonioTransferido,
                                                obj.CperiodoAñosAnteriores,
                                                obj.FimporteAñosAnteriores,
                                                obj.CperiodoMesesAnteriores,
                                                obj.FimporteMesesAnteriores,
                                                obj.Bestado
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;


        }

        public Boolean Elimina_Patrimonio_Transferencia(int intIdPatrimonio_Transferencia)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_del_msto_Patrimonio_Transferencia",
                                               intIdPatrimonio_Transferencia
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;


        }

        #endregion

        #region PeriodoProceso_Patrimonio
        public bool Graba_PeriodoProceso_Patrimonio(Model.PeriodoProceso_Patrimonio obj)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteScalar(strConnection, "Patrimonio.spp_ins_ctrl_PeriodoProceso_Patrimonio", obj.CañoProceso, obj.CmesProceso);
                return true;
            }
            catch (Exception ex)
            {
                blnResult = false;
            }
            return blnResult;
        }
        public Model.PeriodoProceso_Patrimonio Recupera_PeriodoProceso_Patrimonio_Apertura(string strAñoProceso)
        {

            Model.PeriodoProceso_Patrimonio obj = new Model.PeriodoProceso_Patrimonio();

            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_sel_ctrl_PeriodoPoceso_Patrimonio_Apertura", strAñoProceso);

            obj.CañoProceso = Convert.ToString(ds.Tables[0].Rows[0]["cAñoProceso"]);
            obj.CmesProceso = Convert.ToString(ds.Tables[0].Rows[0]["cMesProceso"]);
            obj.VdesMesProceso = Convert.ToString(ds.Tables[0].Rows[0]["vDesMesProceso"]);

            return obj;

        }
        public Boolean Graba_PeriodoProceso_Patrimonio_Cierre(Model.PeriodoProceso_Patrimonio obj)
        {
            Boolean blnResult = true;

            try
            {
                SqlHelper.ExecuteScalar(strConnection, "Patrimonio.spp_upd_ctrl_PeriodoProceso_Patrimonio_Cierre", obj.CañoProceso, obj.CmesProceso);
                return true;
            }
            catch (Exception ex)
            {
                blnResult = false;
            }
            return blnResult;
        }
        public int Recupera_PeriodoProceso_Patrimonio_ProcesoAnterior(Model.PeriodoProceso_Patrimonio obj)
        {
            int intPeriodoProcesado = 0;
            try
            {
                DataSet Ds = new DataSet();
                Ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_sel_ctrl_PeriodoProceso_Patrimonio_ProcesoAnterior", obj.CañoProceso, obj.CmesProceso);
                intPeriodoProcesado = Convert.ToInt32(Ds.Tables[0].Rows[0]["iPeriodoProcesado"]);
            }
            catch (Exception ex)
            {
            }
            return intPeriodoProcesado;
        }
        public int Recupera_PeriodoProceso_Patrimonio_ProcesoActual(Model.PeriodoProceso_Patrimonio obj)
        {
            int intPeriodoProceso = 0;
            try
            {
                DataSet Ds = new DataSet();
                Ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_sel_ctrl_PeriodoProceso_Patrimonio_ProcesoActual", obj.CañoProceso, obj.CmesProceso);
                intPeriodoProceso = Convert.ToInt32(Ds.Tables[0].Rows[0]["iPeriodoProcesado"]);
            }
            catch (Exception ex)
            {
            }
            return intPeriodoProceso;
        }


        public Model.PeriodoProceso_Patrimonio Recupera_PeriodoProceso_Patrimonio(string strAñoProceso)
        {
            Model.PeriodoProceso_Patrimonio obj = new Model.PeriodoProceso_Patrimonio();

            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_sel_ctrl_PeriodoProceso_Patrimonio", strAñoProceso);

            obj.CañoProceso = Convert.ToString(ds.Tables[0].Rows[0]["cAñoProceso"]);
            obj.CmesProceso = Convert.ToString(ds.Tables[0].Rows[0]["cMesProceso"]);
            obj.VdesMesProceso = Convert.ToString(ds.Tables[0].Rows[0]["vDesMesProceso"]);

            return obj;
        }

        public Model.PeriodoProceso_Patrimonio Recupera_PeriodoProceso_Patrimonio_PeriodoAnterior(string strAñoProceso)
        {
            Model.PeriodoProceso_Patrimonio obj = new Model.PeriodoProceso_Patrimonio();

            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_sel_ctrl_PeriodoPoceso_Patrimonio_PeriodoAnterior", strAñoProceso);

            obj.CañoProceso = Convert.ToString(ds.Tables[0].Rows[0]["cAñoProceso"]);
            obj.CmesProceso = Convert.ToString(ds.Tables[0].Rows[0]["cMesProceso"]);
            obj.VdesMesProceso = Convert.ToString(ds.Tables[0].Rows[0]["vDesMesProceso"]);

            return obj;
        }

        public bool Reapertura_PeriodoProceso_Patrimonio(string strPeriodo)
        {
            return Convert.ToBoolean(SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_upd_ctrl_PeriodoProceso_Patrimonio", strPeriodo));
        }

        public bool Recupera_PeriodoProceso_Patrimonio_Abierto()
        {
            bool blnAbierto = false;
            int intRegistro = 0;
            intRegistro = Convert.ToInt32(SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_sel_ctrl_PeriodoProceso_Patrimonio").Tables[0].Rows[0]["iRegistro"]);
            if (intRegistro > 0)
            {
                blnAbierto = true;
            }
            return blnAbierto;
        }

        #endregion

        #region RecomendacionBaja
        public DataSet Combo_RecomendacionBaja()
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_cbo_ctrl_RecomendacionBaja");


            return ds;
        }


        public Model.RecomendacionBaja Recupera_RecomendacionBaja(int intIdRecomendacionBaja)
        {
            Model.RecomendacionBaja obj = new Model.RecomendacionBaja();
            DataSet ds = new DataSet();
            try
            {
                ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_sel_ctrl_RecomendacionBaja", intIdRecomendacionBaja);
                obj.IidRecomendacionBaja = Convert.ToInt32(ds.Tables[0].Rows[0]["IIDRecomendacionBaja"]);
                obj.CcodRecomendacionBaja = Convert.ToString(ds.Tables[0].Rows[0]["CCODRecomendacionBaja"]);
                obj.VdesRecomendacionBaja = Convert.ToString(ds.Tables[0].Rows[0]["VDESRecomendacionBaja"]);

            }
            catch (Exception ex)
            {
                obj.IidRecomendacionBaja = 0;
                obj.CcodRecomendacionBaja = "";
                obj.VdesRecomendacionBaja = "";
            }
            return obj;
        }

        public int Graba_RecomendacionBaja(string strCodRecomendacionBaja, string strDesRecomendacionBaja)
        {
            return Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Patrimonio.spp_ins_ctrl_RecomendacionBaja", strCodRecomendacionBaja, strDesRecomendacionBaja));
        }
        public int Modifica_RecomendacionBaja(int intIdRecomendacionBaja, string strCodRecomendacionBaja, string strDesRecomendacionBaja)
        {
            return Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Patrimonio.spp_upd_ctrl_RecomendacionBaja", intIdRecomendacionBaja, strCodRecomendacionBaja, strDesRecomendacionBaja));
        }

        public int Elimina_RecomendacionBaja(int intIdRecomendacionBaja)
        {
            return Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Patrimonio.spp_del_ctrl_RecomendacionBaja", intIdRecomendacionBaja));
        }

        #endregion

        #region RecomendacionTransferencia
        public DataSet Combo_RecomendacionTransferencia()
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_cbo_ctrl_RecomendacionTransferencia");


            return ds;
        }

        public Model.RecomendacionTransferencia Recupera_RecomendacionTransferencia(int intIdRecomendacionTransferencia)
        {
            DataTable dt = new DataTable();
            Model.RecomendacionTransferencia obj = new Model.RecomendacionTransferencia();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_sel_ctrl_RecomendacionTransferencia", intIdRecomendacionTransferencia);

            if (dt.Rows.Count == 0)
            {
                obj.IidRecomendacionTransferencia = 0;
                obj.CcodRecomendacionTransferencia = "";
                obj.VdesRecomendacionTransferencia = "";
            }
            else
            {
                obj.IidRecomendacionTransferencia = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodRecomendacionTransferencia = Convert.ToString(dt.Rows[0][1]);
                obj.VdesRecomendacionTransferencia = Convert.ToString(dt.Rows[0][2]);
            }

            return obj;
        }

        public Model.RecomendacionTransferencia Recupera_RecomendacionTransferencia_Codigo(string strCodRecomendacionTransferencia)
        {
            DataTable dt = new DataTable();
            Model.RecomendacionTransferencia obj = new Model.RecomendacionTransferencia();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_sel_ctrl_RecomendacionTransferencia_Codigo", strCodRecomendacionTransferencia);

            if (dt.Rows.Count == 0)
            {
                obj.IidRecomendacionTransferencia = 0;
                obj.CcodRecomendacionTransferencia = "";
                obj.VdesRecomendacionTransferencia = "";
            }
            else
            {
                obj.IidRecomendacionTransferencia = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodRecomendacionTransferencia = Convert.ToString(dt.Rows[0][1]);
                obj.VdesRecomendacionTransferencia = Convert.ToString(dt.Rows[0][2]);
            }

            return obj;
        }


        public Model.RecomendacionTransferencia Graba_RecomendacionTransferencia(Model.RecomendacionTransferencia obj)
        {
            Model.RecomendacionTransferencia MPP = new Model.RecomendacionTransferencia();
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_ins_ctrl_RecomendacionTransferencia",
                                                obj.CcodRecomendacionTransferencia,
                                                obj.VdesRecomendacionTransferencia
                                                );
                MPP.IidRecomendacionTransferencia = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                MPP.IidRecomendacionTransferencia = 0;
            }
            return MPP;


        }


        public Boolean Modifica_RecomendacionTransferencia(Model.RecomendacionTransferencia obj)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_upd_ctrl_RecomendacionTransferencia",
                                                obj.IidRecomendacionTransferencia,
                                                obj.CcodRecomendacionTransferencia,
                                                obj.VdesRecomendacionTransferencia
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;


        }

        public Boolean Elimina_RecomendacionTransferencia(int intIdRecomendacionTransferencia)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_del_ctrl_RecomendacionTransferencia",
                                               intIdRecomendacionTransferencia
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;


        }

        #endregion

        #region Parametro_Patrimonio
        public Model.Parametro_Patrimonio Recupera_Parametro_Patrimonio(int intIdParametroPatrimonio)
        {
            DataTable dt = new DataTable();
            Model.Parametro_Patrimonio obj = new Model.Parametro_Patrimonio();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_sel_cnfg_Parametro_Patrimonio", intIdParametroPatrimonio);

            if (dt.Rows.Count > 0)
            {
                obj.IidParametroPatrimonio = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodParametroPatrimonio = Convert.ToString(dt.Rows[0][1]);
                obj.VdesParametroPatrimonio = Convert.ToString(dt.Rows[0][2]);
                obj.VvalParametroPatrimonio = Convert.ToString(dt.Rows[0][3]);
            }

            return obj;
        }

        public Model.Parametro_Patrimonio Recupera_Parametro_Patrimonio_Codigo(string strCodParametroPatrimonio)
        {
            DataTable dt = new DataTable();
            Model.Parametro_Patrimonio obj = new Model.Parametro_Patrimonio();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_sel_cnfg_Parametro_Patrimonio_Codigo", strCodParametroPatrimonio);

            if (dt.Rows.Count > 0)
            {
                obj.IidParametroPatrimonio = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodParametroPatrimonio = Convert.ToString(dt.Rows[0][1]);
                obj.VdesParametroPatrimonio = Convert.ToString(dt.Rows[0][2]);
                obj.VvalParametroPatrimonio = Convert.ToString(dt.Rows[0][3]);
            }

            return obj;
        }


        public Model.Parametro_Patrimonio Graba_Parametro_Patrimonio(Model.Parametro_Patrimonio obj)
        {
            Model.Parametro_Patrimonio MPP = new Model.Parametro_Patrimonio();
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_ins_cnfg_Parametro_Patrimonio",
                                                obj.CcodParametroPatrimonio,
                                                obj.VdesParametroPatrimonio,
                                                obj.VvalParametroPatrimonio
                                                );
                MPP.IidParametroPatrimonio = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                MPP.IidParametroPatrimonio = 0;
            }
            return MPP;


        }


        public Boolean Modifica_Parametro_Patrimonio(Model.Parametro_Patrimonio obj)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_upd_cnfg_Parametro_Patrimonio",
                                                obj.IidParametroPatrimonio,
                                                obj.CcodParametroPatrimonio,
                                                obj.VdesParametroPatrimonio,
                                                obj.VvalParametroPatrimonio
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;


        }

        public Boolean Elimina_Parametro_Patrimonio(int intIdParametroPatrimonio)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_del_cnfg_Parametro_Patrimonio",
                                               intIdParametroPatrimonio
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;


        }

        #endregion

        #region MotivoRevaluacion
        public DataTable Ayuda_MotivoRevaluacion()
        {

            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Patrimonio.spp_help_ctrl_MotivoRevaluacion"
                                     );

            return dt;
        }
        public DataTable Combo_MotivoRevaluacion()
        {

            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Patrimonio.spp_cbo_ctrl_MotivoRevaluacion"
                                     );

            return dt;
        }
        public Model.MotivoRevaluacion Recupera_MotivoRevaluacion(int intIdMotivoRevaluacion)
        {
            DataTable dt = new DataTable();
            Model.MotivoRevaluacion obj = new Model.MotivoRevaluacion();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_sel_ctrl_MotivoRevaluacion", intIdMotivoRevaluacion);

            if (dt.Rows.Count > 0)
            {
                obj.IidMotivoRevaluacion = Convert.ToInt32(dt.Rows[0]["IidMotivoRevaluacion"]);
                obj.CcodMotivoRevaluacion = Convert.ToString(dt.Rows[0]["CcodMotivoRevaluacion"]);
                obj.VdesMotivoRevaluacion = Convert.ToString(dt.Rows[0]["VdesMotivoRevaluacion"]);
            }
            return obj;
        }


        public Model.MotivoRevaluacion Recupera_MotivoRevaluacion_Codigo(string strCodMotivoRevaluacion)
        {
            DataTable dt = new DataTable();
            Model.MotivoRevaluacion obj = new Model.MotivoRevaluacion();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_sel_ctrl_MotivoRevaluacion_Codigo", strCodMotivoRevaluacion);

            if (dt.Rows.Count > 0)
            {
                obj.IidMotivoRevaluacion = Convert.ToInt32(dt.Rows[0]["IidMotivoRevaluacion"]);
                obj.CcodMotivoRevaluacion = Convert.ToString(dt.Rows[0]["CcodMotivoRevaluacion"]);
                obj.VdesMotivoRevaluacion = Convert.ToString(dt.Rows[0]["VdesMotivoRevaluacion"]);
            }
            return obj;
        }

        public int Graba_MotivoRevaluacion(Model.MotivoRevaluacion obj)
        {

            int intIdMotivoRevaluacion;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Patrimonio.spp_ins_ctrl_MotivoRevaluacion",
                                            obj.CcodMotivoRevaluacion,
                                            obj.VdesMotivoRevaluacion
                                         );

                intIdMotivoRevaluacion = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdMotivoRevaluacion = 0;
            }

            return intIdMotivoRevaluacion;
        }

        public int Modifica_MotivoRevaluacion(Model.MotivoRevaluacion obj)
        {



            int intIdMotivoRevaluacion = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Patrimonio.spp_upd_ctrl_MotivoRevaluacion",
                                            obj.IidMotivoRevaluacion,
                                            obj.CcodMotivoRevaluacion,
                                            obj.VdesMotivoRevaluacion

                                         );

                intIdMotivoRevaluacion = obj.IidMotivoRevaluacion;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdMotivoRevaluacion = 0;
            }

            return intIdMotivoRevaluacion;
        }

        public bool Elimina_MotivoRevaluacion(int intIdMotivoRevaluacion)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Patrimonio.spp_del_ctrl_MotivoRevaluacion",
                                           intIdMotivoRevaluacion
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataTable Lista_MotivoRevaluacion()
        {



            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Patrimonio.spp_lst_ctrl_MotivoRevaluacion"
                                     );

            return dt;
        }

        public DataTable Arbol_MotivoRevaluacion()
        {



            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Patrimonio.spp_trv_ctrl_MotivoRevaluacion"
                                     );

            return dt;
        }

        #endregion

        #region MotivoTransferencia
        public DataSet Combo_MotivoTransferencia()
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_cbo_ctrl_MotivoTransferencia");


            return ds;
        }

        public Model.MotivoTransferencia Recupera_MotivoTransferencia(int intIdMotivoTransferencia)
        {
            DataTable dt = new DataTable();
            Model.MotivoTransferencia obj = new Model.MotivoTransferencia();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_sel_ctrl_MotivoTransferencia", intIdMotivoTransferencia);

            if (dt.Rows.Count > 0)
            {
                obj.IidMotivoTransferencia = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodMotivoTransferencia = Convert.ToString(dt.Rows[0][1]);
                obj.VdesMotivoTransferencia = Convert.ToString(dt.Rows[0][2]);
            }

            return obj;
        }

        public Model.MotivoTransferencia Recupera_MotivoTransferencia_Codigo(string strCodMotivoTransferencia)
        {
            DataTable dt = new DataTable();
            Model.MotivoTransferencia obj = new Model.MotivoTransferencia();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_sel_ctrl_MotivoTransferencia_Codigo", strCodMotivoTransferencia);

            if (dt.Rows.Count > 0)
            {
                obj.IidMotivoTransferencia = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodMotivoTransferencia = Convert.ToString(dt.Rows[0][1]);
                obj.VdesMotivoTransferencia = Convert.ToString(dt.Rows[0][2]);
            }

            return obj;
        }


        public Model.MotivoTransferencia Graba_MotivoTransferencia(Model.MotivoTransferencia obj)
        {
            Model.MotivoTransferencia MPP = new Model.MotivoTransferencia();
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_ins_ctrl_MotivoTransferencia",
                                                obj.CcodMotivoTransferencia,
                                                obj.VdesMotivoTransferencia
                                                );
                MPP.IidMotivoTransferencia = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                MPP.IidMotivoTransferencia = 0;
            }
            return MPP;


        }


        public Boolean Modifica_MotivoTransferencia(Model.MotivoTransferencia obj)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_upd_ctrl_MotivoTransferencia",
                                                obj.IidMotivoTransferencia,
                                                obj.CcodMotivoTransferencia,
                                                obj.VdesMotivoTransferencia
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;


        }

        public Boolean Elimina_MotivoTransferencia(int intIdMotivoTransferencia)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Patrimonio.spp_del_ctrl_MotivoTransferencia",
                                               intIdMotivoTransferencia
                                               );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;


        }

        #endregion

        #region TipoMovimientoPatrimonio
        public DataTable Combo_TipoMovimientoPatrimonio_Ajuste()
        {

            return SqlHelper.ExecuteDataTable(strConnection,
                                             "Patrimonio.spp_cbo_ctrl_TipoMovimientoPatrimonio_Ajuste"
                                           );

        }
        public DataTable Combo_TipoMovimientoPatrimonio()
        {

            return SqlHelper.ExecuteDataTable(strConnection,
                                             "Patrimonio.spp_cbo_ctrl_TipoMovimientoPatrimonio"
                                           );

        }
        public DataTable Lista_TipoMovimientoPatrimonio()
        {

            return SqlHelper.ExecuteDataTable(strConnection,
                                             "Patrimonio.spp_lst_ctrl_TipoMovimientoPatrimonio"
                                           );

        }

        public DataTable Arbol_TipoMovimientoPatrimonio()
        {

            return SqlHelper.ExecuteDataTable(strConnection,
                                             "Patrimonio.spp_trv_ctrl_TipoMovimientoPatrimonio"
                                           );

        }

        //public Model.Patrimonio_TipoMovimiento Recupera_TipoMovimientoPatrimonio(int intIdTipoMovimientoPatrimonio)
        //{
        //    DataSet ds = new DataSet();
        //    Model.Patrimonio_TipoMovimiento obj = new Model.Patrimonio_TipoMovimiento();

        //    ds = SqlHelper.ExecuteDataset(strConnection, "Patrimonio.spp_sel_ctrl_TipoMovimientoPatrimonio", intIdTipoMovimientoPatrimonio);

        //    obj.IidTipoMovimientoPatrimonio = Convert.ToInt32(ds.Tables[0].Rows[0]["IIDTipoMovimientoPatrimonio"]);
        //    obj.CcodTipoMovimientoPatrimonio = Convert.ToString(ds.Tables[0].Rows[0]["CCODTipoMovimientoPatrimonio"]);
        //    obj.VdesTipoMovimientoPatrimonio = Convert.ToString(ds.Tables[0].Rows[0]["VDESTipoMovimientoPatrimonio"]);
        //    obj.ItipoMovimiento = Convert.ToInt32(ds.Tables[0].Rows[0]["iTipoMovimiento"]);
        //    obj.BrequiereDepreciacionAnterior = Convert.ToBoolean(ds.Tables[0].Rows[0]["bRequiereDepreciacionAnterior"]);

        //    return obj;

        //}

        public Model.TipoMovimientoPatrimonio Recupera_TipoMovimientoPatrimonio(int intIdTipoMovimientoPatrimonio)
        {

            DataTable dt = new DataTable();
            Model.TipoMovimientoPatrimonio obj = new Model.TipoMovimientoPatrimonio();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Patrimonio.spp_sel_ctrl_TipoMovimientoPatrimonio", intIdTipoMovimientoPatrimonio);

            if (dt.Rows.Count > 0)
            {
                obj.IidTipoMovimientoPatrimonio = Convert.ToInt32(dt.Rows[0]["IidTipoMovimientoPatrimonio"]);
                obj.CcodTipoMovimientoPatrimonio = Convert.ToString(dt.Rows[0]["CcodTipoMovimientoPatrimonio"]);
                obj.VdesTipoMovimientoPatrimonio = Convert.ToString(dt.Rows[0]["VdesTipoMovimientoPatrimonio"]);
                obj.vSigTipoMovimientoPatrimonio = Convert.ToString(dt.Rows[0]["vSigTipoMovimientoPatrimonio"]);
                obj.ItipoMovimiento = Convert.ToInt32(dt.Rows[0]["ItipoMovimiento"]);
                obj.BrequiereDepreciacionAnterior = Convert.ToBoolean(dt.Rows[0]["BrequiereDepreciacionAnterior"]);
            }
            return obj;


        }
        public int Graba_TipoMovimientoPatrimonio(Model.TipoMovimientoPatrimonio obj)
        {

            int intIdTipoMovimientoPatrimonio = 0;
            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Patrimonio.spp_ins_ctrl_TipoMovimientoPatrimonio",
                                            obj.CcodTipoMovimientoPatrimonio,
                                            obj.VdesTipoMovimientoPatrimonio,
                                            obj.vSigTipoMovimientoPatrimonio,
                                            obj.ItipoMovimiento,
                                            obj.BrequiereDepreciacionAnterior
                                       );

                intIdTipoMovimientoPatrimonio = Convert.ToInt32(dt.Rows[0][0]);

            }
            catch
            {
                intIdTipoMovimientoPatrimonio = 0;
            }

            return intIdTipoMovimientoPatrimonio;

        }
        public int Modifica_TipoMovimientoPatrimonio(Model.TipoMovimientoPatrimonio obj)
        {
            int intIdTipoMovimientoPatrimonio = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Patrimonio.spp_upd_ctrl_TipoMovimientoPatrimonio",
                                            obj.IidTipoMovimientoPatrimonio,
                                            obj.CcodTipoMovimientoPatrimonio,
                                            obj.VdesTipoMovimientoPatrimonio,
                                            obj.vSigTipoMovimientoPatrimonio,
                                            obj.ItipoMovimiento,
                                            obj.BrequiereDepreciacionAnterior
                                       );
            }
            catch
            {
                intIdTipoMovimientoPatrimonio = 0;
            }

            return intIdTipoMovimientoPatrimonio;

        }

        public bool Elimina_TipoMovimientoPatrimonio(int intIdTipoMovimientoPatrimonio)
        {


            bool blnResult = true;

            try
            {

                SqlHelper.ExecuteDataset(strConnection,
                                          "Patrimonio.spp_del_ctrl_TipoMovimientoPatrimonio",
                                        intIdTipoMovimientoPatrimonio
                                       );
            }
            catch
            {
                blnResult = false;
            }


            return blnResult;


        }

        #endregion

        #endregion

        #region PRESUPUESTO
        #region Actividad
        public DataSet Ayuda_Actividad(string strCodCompañia)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Proyecto.spp_help_ctrl_ActividadProyecto",
                                            strCodCompañia
                                            );
        }
        public DataSet Lista_Actividad(string strCodCompañia)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Proyecto.spp_lst_ctrl_ActividadProyecto",
                                            strCodCompañia
                                            );
        }

        public DataSet Naturaleza_Actividad(string strCodCompañia)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Proyecto.spp_help_ctrl_ActividadProyecto",
                                            strCodCompañia
                                            );
        }

        public DataSet Combo_Actividad_Reporte(string strCodCompañia)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Proyecto.spp_cbo_ctrl_ActividadProyecto_Reporte",
                                            strCodCompañia
                                            );
        }

        public DataSet Combo_Actividad(string strCodCompañia)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Proyecto.spp_cbo_ctrl_ActividadProyecto",
                                            strCodCompañia
                                            );
        }
        public Model.Actividad Recupera_Actividad(int intIdActividad)
        {
            DataTable dt = new DataTable();
            Model.Actividad obj = new Model.Actividad();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_ActividadProyecto", intIdActividad);

            if (dt.Rows.Count > 0)
            {
                obj.IidActividad = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodActividad = Convert.ToString(dt.Rows[0][1]);
                obj.VnomActividad = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public Model.Actividad Recupera_Actividad_codigo(string strCodCompañia,
                                                          string strCodActividad
                                                        )
        {

            DataTable dt = new DataTable();
            Model.Actividad obj = new Model.Actividad();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Proyecto.spp_sel_ctrl_ActividadProyecto_codigo",
                                            strCodCompañia,
                                            strCodActividad);

            if (dt.Rows.Count > 0)
            {
                obj.IidActividad = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodActividad = Convert.ToString(dt.Rows[0][1]);
                obj.VnomActividad = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;

        }
        public int Graba_Actividad(Model.Actividad obj)
        {
            int intIdActividad = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_ctrl_ActividadProyecto", obj.CcodActividad,
                                                                                                      obj.VnomActividad
                                                          );
                intIdActividad = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdActividad = 0;
            }
            return intIdActividad;
        }
        public int Modifica_Actividad(Model.Actividad obj)
        {

            int intIdActividad = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_ctrl_ActividadProyecto", obj.IidActividad,
                                                                                     obj.CcodActividad,
                                                                                     obj.VnomActividad
                                                          );
                intIdActividad = obj.IidActividad;
            }
            catch
            {
                intIdActividad = 0;
            }
            return intIdActividad;
        }

        public bool Graba_SolicitudViatico_Proyecto(string strCodSolicitud,
                                        string strCodProyecto
                                       )
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Viatico.spp_ins_mvto_SolicitudViatico_Proyecto", strCodSolicitud, strCodProyecto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public bool Elimina_Actividad(int intIdActividad)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_ctrl_ActividadProyecto", intIdActividad);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }
        #endregion

        #region CentroBeneficio
        public DataSet Combo_CentroBeneficio(string strCodCompañia)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_cbo_msto_CentroBeneficio",
                                      strCodCompañia
                                     );

            return ds;
        }

        public DataSet Ayuda_CentroBeneficio(string strCodCompañia)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_CentroBeneficio",
                                      strCodCompañia
                                     );

            return ds;
        }

        public DataSet Ayuda_UnidadEconomica(string strCodCompañia)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "General.spp_help_ctrl_UnidadEconomica",
                                      strCodCompañia
                                     );

            return ds;
        }

        public Model.CentroBeneficio Recupera_CentroBeneficio(int intIdCentroBeneficio)
        {
            DataTable dt = new DataTable();
            Model.CentroBeneficio obj = new Model.CentroBeneficio();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_msto_CentroBeneficio", intIdCentroBeneficio);

            if (dt.Rows.Count > 0)
            {
                obj.IidCeBe = Convert.ToInt32(dt.Rows[0]["IidCeBe"]);
                obj.CcodCeBe = Convert.ToString(dt.Rows[0]["CcodCeBe"]);
                obj.VnomCeBe = Convert.ToString(dt.Rows[0]["VnomCeBe"]);
            }
            return obj;
        }


        public Model.CentroBeneficio Recupera_CentroBeneficio_Codigo(string strCodCompañia,
                                                                      string strCodCentroBeneficio
                                                                    )
        {
            DataTable dt = new DataTable();
            Model.CentroBeneficio obj = new Model.CentroBeneficio();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Formulacion.spp_sel_msto_CentroBeneficio_Codigo",
                                            strCodCompañia,
                                            strCodCentroBeneficio
                                            );

            if (dt.Rows.Count > 0)
            {
                obj.IidCeBe = Convert.ToInt32(dt.Rows[0]["IidCeBe"]);
                obj.CcodCeBe = Convert.ToString(dt.Rows[0]["CcodCeBe"]);
                obj.VnomCeBe = Convert.ToString(dt.Rows[0]["VnomCeBe"]);
            }
            return obj;
        }

        public int Graba_CentroBeneficio(Model.CentroBeneficio obj)
        {

            int intIdCentroBeneficio;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_ins_msto_CentroBeneficio",
                                            obj.CcodCeBe,
                                            obj.VnomCeBe
                                         );

                intIdCentroBeneficio = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdCentroBeneficio = 0;
            }

            return intIdCentroBeneficio;
        }

        public int Modifica_CentroBeneficio(Model.CentroBeneficio obj)
        {



            int intIdCentroBeneficio = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_upd_msto_CentroBeneficio",
                                            obj.IidCeBe,
                                            obj.CcodCeBe,
                                            obj.VnomCeBe

                                         );

                intIdCentroBeneficio = obj.IidCeBe;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdCentroBeneficio = 0;
            }

            return intIdCentroBeneficio;
        }

        public bool Elimina_CentroBeneficio(int intIdCentroBeneficio)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_del_msto_CentroBeneficio",
                                           intIdCentroBeneficio
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_CentroBeneficio(string strCodCompañia)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_lst_msto_CentroBeneficio",
                                      strCodCompañia
                                     );

            return ds;
        }

        #endregion

        #region CentroCosto
        public Model.CentroCosto Recupera_CentroCosto_Codigo(string strCodCentroEmpresa,
                                                             string strCodCentroCosto
                                                            )
        {
            DataTable dt = new DataTable();
            Model.CentroCosto obj = new Model.CentroCosto();

            dt = SqlHelper.ExecuteDataTable(strConnection, 
                                            "Formulacion.spp_sel_msto_CentroCosto_Codigo",
                                            strCodCentroCosto
                                            );

            if (dt.Rows.Count > 0)
            {

                obj.IidCeCo = Convert.ToInt32(dt.Rows[0]["IidCeCo"]);
                obj.CcodCeGe = Convert.ToString(dt.Rows[0]["CcodCeGe"]);
                obj.VnomCeGe = Convert.ToString(dt.Rows[0]["VnomCeGe"]);
                obj.CcodCeCo = Convert.ToString(dt.Rows[0]["CcodCeCo"]);
                obj.VnomCeCo = Convert.ToString(dt.Rows[0]["VnomCeCo"]);
                obj.CcodCeBe = Convert.ToString(dt.Rows[0]["CcodCeBe"]);
                obj.VnomCeBe = Convert.ToString(dt.Rows[0]["VnomCeBe"]);
                obj.CcodGerencia = Convert.ToString(dt.Rows[0]["CcodGerencia"]);
                obj.VnomGerencia = Convert.ToString(dt.Rows[0]["VnomGerencia"]);
                obj.CcodUnidadEconomica = Convert.ToString(dt.Rows[0]["CcodUnidadEconomica"]);
                obj.VnomUnidadEconomica = Convert.ToString(dt.Rows[0]["VnomUnidadEconomica"]);
            }

            return obj;

        }


        public Model.CentroCosto Recupera_CentroCosto(string intIdCentroCosto)
        {
            DataTable dt = new DataTable();
            Model.CentroCosto obj = new Model.CentroCosto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_msto_CentroCosto", intIdCentroCosto);

            if (dt.Rows.Count > 0)
            {

                obj.IidCeCo = Convert.ToInt32(dt.Rows[0]["IidCeCo"]);
                obj.CcodCeGe = Convert.ToString(dt.Rows[0]["CcodCeGe"]);
                obj.CcodCeCo = Convert.ToString(dt.Rows[0]["CcodCeCo"]);
                obj.VnomCeCo = Convert.ToString(dt.Rows[0]["VnomCeCo"]);
            }

            return obj;

        }

        public DataSet Ayuda_CentroCosto(string strCodCompañia)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_msto_CentroCosto", strCodCompañia))
            {
                return ds;
            }

        }

        public DataSet Ayuda_CentroCosto_Formulacion_HojaTrabajo(string strCodCompañia,
                                         string strAñoProceso,
                                         string strPeriodo,
                                         string strCodCentroGestor,
                                         string strCodCentroCosto)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_msto_CentroCosto_Formulacion_HojaTrabajo", 
                                                    strCodCompañia, strAñoProceso,strPeriodo, strCodCentroGestor, strCodCentroCosto))
            {
                return ds;
            }

        }

        public DataSet Ayuda_CentroCosto_Total(string strCodCompañia)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_msto_CentroCosto_Total", strCodCompañia))
            {
                return ds;
            }

        }

        public DataSet Ayuda_CentroGestor_Total(string strCodCompañia)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_msto_CentroGestor_Total", strCodCompañia))
            {
                return ds;
            }

        }

        public DataSet Ayuda_CentroCosto_Todos()
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_msto_CentroCosto_Todos"))
            {
                return ds;
            }

        }

        public DataSet Ayuda_CentroCosto_CentroGestor( string strCodEmpresa, string strcodCentroGestor)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, 
                                                 "Formulacion.spp_help_msto_CentroCosto_CentroGestor", 
                                                 strCodEmpresa,
                                                 strcodCentroGestor
                                                 ))
            {
                return ds;
            }

        }

        public DataSet Combo_CentroCosto_CentroGestor(string strcodCentroGestor)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_msto_CentroCosto_CentroGestor", strcodCentroGestor))
            {
                return ds;
            }

        }

        public bool Elimina_CentroCosto(int intidCentroCosto)
        {
            Boolean resultado = true;

            try
            {
                SqlHelper.ExecuteScalar(strConnection, "[Formulacion].[spp_del_msto_CentroCosto]", intidCentroCosto);

            }
            catch
            {
                resultado = false;
            }
            return resultado;
        }

        public int Graba_CentroCosto(Model.CentroCosto obj)
        {
            int intIdCentroCosto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_ins_msto_CentroCosto", obj.CcodCeCo,
                                                                                                            obj.VnomCeCo,
                                                                                                            obj.CcodCeGe,
                                                                                                            obj.CcodCeBe,
                                                                                                            obj.CcodGerencia,
                                                                                                            obj.CcodUnidadEconomica

                                                          );
                intIdCentroCosto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdCentroCosto = 0;
            }
            return intIdCentroCosto;
        }

        public int Modifica_CentroCosto(Model.CentroCosto obj)
        {
            int intIdCentroCosto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "[Formulacion].[spp_upd_msto_CentroCosto]", obj.IidCeCo,
                                                                                                            obj.CcodCeCo,
                                                                                                            obj.VnomCeCo,
                                                                                                            obj.CcodCeGe,
                                                                                                            obj.CcodCeBe,
                                                                                                            obj.CcodGerencia,
                                                                                                            obj.CcodUnidadEconomica

                                                          );
                intIdCentroCosto = obj.IidCeCo;
            }
            catch
            {
                intIdCentroCosto = 0;
            }
            return intIdCentroCosto;
        }

        public DataSet Lista_CentroCosto( string strCodEmpresa)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, 
                                                "Formulacion.spp_lst_msto_CentroCosto",
                                                strCodEmpresa
                                                )) ;
            {
                return ds;
            }
        }

        #endregion

        #region OrdenTrabajo
        public Model.OrdenTrabajo Recupera_OrdenTrabajo_Codigo(string strCodCentroEmpresa,
                                                             string strNumOrdenTrabajo
                                                            )
        {
            DataTable dt = new DataTable();
            Model.OrdenTrabajo obj = new Model.OrdenTrabajo();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Proyecto.spp_sel_msto_OrdenTrabajo_Codigo",
                                            strCodCentroEmpresa,
                                            strNumOrdenTrabajo
                                            );

            if (dt.Rows.Count > 0)
            {

                obj.iIdOrden = Convert.ToInt32(dt.Rows[0]["iIdOrden"]);
                obj.cNumOrden = Convert.ToString(dt.Rows[0]["cNumOrden"]);
                obj.vDesOrden = Convert.ToString(dt.Rows[0]["vDesOrden"]);
                obj.cCodClaseOrden = Convert.ToString(dt.Rows[0]["cCodClaseOrden"]);
                obj.vDesClaseOrden = Convert.ToString(dt.Rows[0]["vDesClaseOrden"]);
                obj.cCodCentroCosto = Convert.ToString(dt.Rows[0]["cCodCentroCosto"]);
                obj.vNomCentroCosto = Convert.ToString(dt.Rows[0]["vNomCentroCosto"]);
            }

            return obj;

        }


        public Model.OrdenTrabajo Recupera_OrdenTrabajo(string intIdOrden)
        {
            DataTable dt = new DataTable();
            Model.OrdenTrabajo obj = new Model.OrdenTrabajo();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_msto_OrdenTrabajo", intIdOrden);

            if (dt.Rows.Count > 0)
            {
                obj.iIdOrden = Convert.ToInt32(dt.Rows[0]["iIdOrden"]);
                obj.cNumOrden = Convert.ToString(dt.Rows[0]["cNumOrden"]);
                obj.vDesOrden = Convert.ToString(dt.Rows[0]["vDesOrden"]);
                obj.cCodClaseOrden = Convert.ToString(dt.Rows[0]["cCodClaseOrden"]);
                obj.vDesClaseOrden = Convert.ToString(dt.Rows[0]["vDesClaseOrden"]);
            }

            return obj;

        }
        public bool Elimina_OrdenTrabajo(int intidOrdenTrabajo)
        {
            Boolean resultado = true;

            try
            {
                SqlHelper.ExecuteScalar(strConnection, "[Proyecto].[spp_del_msto_OrdenTrabajo]", intidOrdenTrabajo);

            }
            catch
            {
                resultado = false;
            }
            return resultado;
        }

        public int Graba_OrdenTrabajo(Model.OrdenTrabajo obj)
        {
            int intIdOrdenTrabajo = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_msto_OrdenTrabajo", obj.cNumOrden,
                                                                                                        obj.vDesOrden,
                                                                                                        obj.cCodClaseOrden,
                                                                                                        obj.cCodCentroCosto

                                                          );
                intIdOrdenTrabajo = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdOrdenTrabajo = 0;
            }
            return intIdOrdenTrabajo;
        }

        public int Modifica_OrdenTrabajo(Model.OrdenTrabajo obj)
        {
            int intIdOrdenTrabajo = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "[Proyecto].[spp_upd_msto_OrdenTrabajo]", obj.iIdOrden,
                                                                                                            obj.cNumOrden,
                                                                                                            obj.vDesOrden,
                                                                                                            obj.cCodClaseOrden,
                                                                                                            obj.cCodCentroCosto

                                                          );
                intIdOrdenTrabajo = obj.iIdOrden;
            }
            catch
            {
                intIdOrdenTrabajo = 0;
            }
            return intIdOrdenTrabajo;
        }

        public DataSet Lista_OrdenTrabajo(string strCodEmpresa)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                "Proyecto.spp_lst_msto_OrdenTrabajo",
                                                strCodEmpresa
                                                )) ;
            {
                return ds;
            }
        }

        public DataSet Ayuda_ClaseOrdenTrabajo(string strCodEmpresa)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                "Proyecto.spp_help_msto_ClaseOrdenTrabajo",
                                                strCodEmpresa
                                                )) ;
            {
                return ds;
            }
        }

        #endregion

        #region CentroGestor
        public DataSet Ayuda_CentroGestor_Proyecto(string strCodCompañia,
                                           string strCodCentroGestor,
                                           string strTipoProyecto,
                                           string strPeriodo
                                          )
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_CentroGestor_Proyecto", 
                                      strCodCompañia, 
                                      strCodCentroGestor, 
                                      strTipoProyecto, 
                                      strPeriodo
                                     );

            return ds;
        }

        public DataSet Ayuda_CentroCosto_Proyecto(string strCodCompañia,
                                    string strAñoProceso,
                                    string strPeriodo,
                                   string strCodCentroCosto,
                                   string strTipoProyecto
                                  )
        {

            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_help_msto_CentroCosto_Proyecto", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroCosto", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@iTipoProyecto", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cCodCentroCosto"].Value = strCodCentroCosto;
            da.SelectCommand.Parameters["@iTipoProyecto"].Value = strTipoProyecto;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);
            return ds;
        }


        public DataSet Ayuda_CentroGestorSuperior(string strCodCompañia,
                                                  string strCodCentroGestor
                                                 )
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_CentroGestorSuperior", strCodCompañia, strCodCentroGestor
                                     );

            return ds;
        }

        

        public DataSet Ayuda_CentroCostoFormulacion_HojaTrabajo_Filtro(string strCodEmpresa,
                                                                string strAño,
                                                                string strPeriodo,
                                                                string strCodCentroGestor,
                                                                string strCodCentroCosto
                                                               )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_help_mvto_CentroCosto", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAño", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroCosto", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodEmpresa;
            da.SelectCommand.Parameters["@cAño"].Value = strAño;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodCentroCosto"].Value = strCodCentroCosto;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;
        }

        public DataSet Ayuda_CentroCostoFormulacion_HojaTrabajo_Filtro_ControlTotal(string strCodEmpresa,
                                                                string strAño,
                                                                string strPeriodo,
                                                                string strCodCentroGestor
                                                               )
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_mvto_CentroCosto_ControlTotal", 
                                      strCodEmpresa, 
                                      strAño, 
                                      strPeriodo, 
                                      strCodCentroGestor
                                     );

            return ds;
        }

        public DataSet Ayuda_CentroCostoFormulacion_HojaTrabajo_Control(string strCodEmpresa,
                                                                string strAño,
                                                                string strPeriodo,
                                                                string strCodCentroGestor
                                                               )
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_mvto_CentroCosto_HojaTrabajo_Control", strCodEmpresa, strAño, strPeriodo, strCodCentroGestor
                                     );

            return ds;
        }

        public DataSet Ayuda_CentroCostoFormulacion_Control(string strCodEmpresa,
                                                                string strCodCentroGestor
                                                               )
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_mvto_CentroCosto_Control", strCodEmpresa, strCodCentroGestor
                                     );

            return ds;
        }




        public DataSet Ayuda_TipoFormulacion()
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_ctrl_TipoFormulacion" 
                                      );

            return ds;
        }

        public DataSet Ayuda_CentroGestor(string strCodCompañia)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_CentroGestor", strCodCompañia
                                     );

            return ds;
        }

        public DataSet Ayuda_CentroGestor_Formulacion(  string strCodEmpresa,
                                                        string strAñoProceso,
                                                        string strPeriodo
                                                      )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_help_mvto_CentroGestor_Formulacion", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodEmpresa;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;
        }

        public Model.CentroGestor Recupera_CentroGestor_Codigo(string strCodCompañia,
                                                                string strCodCentroGestor
                                                            )
        {
            DataTable dt = new DataTable();
            Model.CentroGestor obj = new Model.CentroGestor();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Formulacion.spp_sel_msto_CentroGestor_Codigo",
                                            strCodCentroGestor
                                            );

            if (dt.Rows.Count > 0)
            {

                obj.IidCeGe = Convert.ToInt32(dt.Rows[0]["IidCeGe"]);
                obj.CcodCeGe = Convert.ToString(dt.Rows[0]["CcodCeGe"]);
                obj.CcodCeGe_Dep = Convert.ToString(dt.Rows[0]["CcodCeGe_Dep"]);
                obj.CcodCeGe_For = Convert.ToString(dt.Rows[0]["CcodCeGe_For"]);
                obj.VnomCeGe = Convert.ToString(dt.Rows[0]["VnomCeGe"]);
                obj.Idigito = Convert.ToInt32(dt.Rows[0]["Idigito"]);
                obj.cPaso = Convert.ToString(dt.Rows[0]["cPaso"]);
                obj.Csigla = Convert.ToString(dt.Rows[0]["cSigla"]);

            }

            return obj;

        }

        public Model.CentroGestor Recupera_CentroGestor_Superior(string strCodCompañia,
                                                                  string strCodCentroCosto
                                                                )
        {
            DataTable dt = new DataTable();
            Model.CentroGestor obj = new Model.CentroGestor();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Formulacion.spp_sel_msto_CentroGestor_Superior",
                                            strCodCompañia,
                                            strCodCentroCosto
                                            );

            if (dt.Rows.Count > 0)
            {

                obj.IidCeGe = Convert.ToInt32(dt.Rows[0]["IidCeGe"]);
                obj.CcodCeGe = Convert.ToString(dt.Rows[0]["CcodCeGe"]);
                obj.CcodCeGe_Dep = Convert.ToString(dt.Rows[0]["CcodCeGe_Dep"]);
                obj.CcodCeGe_For = Convert.ToString(dt.Rows[0]["CcodCeGe_For"]);
                obj.VnomCeGe = Convert.ToString(dt.Rows[0]["VnomCeGe"]);
                obj.Idigito = Convert.ToInt32(dt.Rows[0]["Idigito"]);
                obj.cPaso = Convert.ToString(dt.Rows[0]["cPaso"]);
                obj.Csigla = Convert.ToString(dt.Rows[0]["cSigla"]);

            }

            return obj;

        }

        public Model.CentroGestor Recupera_CentroGestor(int intIdCentroGestor)
        {
            DataTable dt = new DataTable();
            Model.CentroGestor obj = new Model.CentroGestor();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_msto_CentroGestor", intIdCentroGestor);

            if (dt.Rows.Count > 0)
            {

                obj.IidCeGe = Convert.ToInt32(dt.Rows[0]["IidCeGe"]);
                obj.CcodCeGe = Convert.ToString(dt.Rows[0]["CcodCeGe"]);
                obj.CcodCeGe_Dep = Convert.ToString(dt.Rows[0]["CcodCeGe_Dep"]);
                obj.CcodCeGe_For = Convert.ToString(dt.Rows[0]["CcodCeGe_For"]);
                obj.VnomCeGe = Convert.ToString(dt.Rows[0]["VnomCeGe"]);
                obj.Idigito = Convert.ToInt32(dt.Rows[0]["Idigito"]);
                obj.cPaso = Convert.ToString(dt.Rows[0]["cPaso"]);
                obj.Csigla = Convert.ToString(dt.Rows[0]["cSigla"]);
            }

            return obj;

        }


        public DataSet Lista_Cege_Clasificador_x_Elegir(string strCodCompañia,
                                                        string strCodCentroGestor

                             )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_Lista_Cege_Clasificador_x_Elegir",
                                                 strCodCompañia,
                                                 strCodCentroGestor
                                                 ))
            {
                return ds;
            }
        }


        public bool Elimina_CentroGestor(int intidCentroGestor)
        {
            Boolean resultado = true;

            try
            {
                SqlHelper.ExecuteScalar(strConnection, "[Formulacion].[spp_del_msto_CentroGestor]", intidCentroGestor);

            }
            catch
            {
                resultado = false;
            }
            return resultado;
        }

        public DataSet Lista_Cege_Proyecto(string strCodCompañia,
                                            string strAñoProceso,
                                            string strPeriodo,
                                            string strCodCentroGestor

                                          )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_msto_CentroGestor_Proyecto",
                                                    strCodCompañia,
                                                    strAñoProceso,
                                                    strPeriodo,
                                                    strCodCentroGestor
                                                )
                  )
            {
                return ds;
            }
        }

        public DataSet Lista_CeCo_Proyecto(string strCodEmpresa,
                                    string strAñoProceso,
                                    string strPeriodo,
                                    string strCodCentroCosto

                                  )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_msto_CentroCosto_Proyecto",
                                                    strCodEmpresa,
                                                    strAñoProceso,
                                                    strPeriodo,
                                                    strCodCentroCosto
                                                )
                  )
            {
                return ds;
            }
        }

        public DataSet Lista_CeCo_Proyecto_Total(string strCodEmpresa,
                                    string strAñoProceso,
                                    string strPeriodo

                                  )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_msto_CentroCosto_Proyecto_Total",
                                                    strCodEmpresa,
                                                    strAñoProceso,
                                                    strPeriodo
                                                )
                  )
            {
                return ds;
            }
        }

        public DataSet Lista_CeCo_PosicionPresupuestal(string strCodEmpresa,
                                    string strAñoProceso,
                                    string strPeriodo,
                                    string strCodCentroCosto

                                  )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_msto_CentroCosto_PosicionPresupuestal",
                                                    strCodEmpresa,
                                                    strAñoProceso,
                                                    strPeriodo,
                                                    strCodCentroCosto
                                                )
                  )
            {
                return ds;
            }
        }

        public DataSet Lista_CeCo_PosicionPresupuestal_Total(string strCodEmpresa,
                            string strAñoProceso,
                            string strPeriodo

                          )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_msto_CentroCosto_PosicionPresupuestal_Total",
                                                    strCodEmpresa,
                                                    strAñoProceso,
                                                    strPeriodo
                                                )
                  )
            {
                return ds;
            }
        }


        public Boolean Graba_CentroGestor_Proyecto(string strCodCompañia,
                                                string strAñoProceso,
                                                string strPeriodo,
                                                string strCodCege,
                                                string strCodProyecto
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_ins_mvto_CentroGestor_Proyecto]",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strPeriodo,
                                                strCodCege,
                                                strCodProyecto
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Graba_CentroCosto_Proyecto(string strCodEmpresa,
                                                string strAñoProceso,
                                                string strPeriodo,
                                                string strCodCeCo,
                                                string strCodProyecto
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_ins_mvto_CentroCosto_Proyecto]",
                                                strCodEmpresa,
                                                strAñoProceso,
                                                strPeriodo,
                                                strCodCeCo,
                                                strCodProyecto
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Graba_CentroCosto_PosicionPresupuestal(string strCodEmpresa,
                                                string strAñoProceso,
                                                string strPeriodo,
                                                string strCodCeCo,
                                                string strCodPosPre
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_ins_mvto_CentroCosto_PosicionPresupuestal]",
                                                strCodEmpresa,
                                                strAñoProceso,
                                                strPeriodo,
                                                strCodCeCo,
                                                strCodPosPre
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Elimina_CentroGestor_Proyecto(string strCodCompañia,
                                                string strAñoProceso,
                                                string strPeriodo,
                                                string strCodCege,
                                                string strCodProyecto
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_del_mvto_CentroGestor_Proyecto]",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strPeriodo,
                                                strCodCege,
                                                strCodProyecto
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Elimina_CentroCosto_Proyecto(string strCodEmpresa,
                                        string strAñoProceso,
                                        string strPeriodo,
                                        string strCodCeCo,
                                        string strCodProyecto
                                      )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_del_mvto_CentroCosto_Proyecto]",
                                                strCodEmpresa,
                                                strAñoProceso,
                                                strPeriodo,
                                                strCodCeCo,
                                                strCodProyecto
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Elimina_CentroCosto_PosicionPresupuestal(string strCodEmpresa,
                                string strAñoProceso,
                                string strPeriodo,
                                string strCodCeCo,
                                string strCodPosPre
                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_del_mvto_CentroCosto_PosicionPresupuestal]",
                                                strCodEmpresa,
                                                strAñoProceso,
                                                strPeriodo,
                                                strCodCeCo,
                                                strCodPosPre
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }




        public DataSet Lista_Cege_CentroCosto(string strCodCompañia,
                                            string strAñoProceso,
                                            string strPeriodo,
                                            string strCodCentroGestor,
                                            string strCodCentroCosto,
                                            string TodosLosCeCos

                                          )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_msto_CentroGestor_CentroCosto",
                                                    strCodCompañia,
                                                    strAñoProceso,
                                                    strPeriodo,
                                                    strCodCentroGestor,
                                                    strCodCentroCosto,
                                                    TodosLosCeCos
                                                )
                  )
            {
                return ds;
            }
        }

        public DataSet Lista_Cege_CentroCosto_Total(string strCodCompañia,
                                    string strAñoProceso,
                                    string strPeriodo

                                  )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_msto_CentroGestor_Total",
                                                    strCodCompañia,
                                                    strAñoProceso,
                                                    strPeriodo
                                                )
                  )
            {
                return ds;
            }
        }


        public DataSet Lista_Cege_Clasificador(string strCodCompañia,
                                            string strAñoProceso,
                                            string strPeriodo,
                                            string strCodCentroGestor

                                          )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_msto_CentroGestor_Clasificador",
                                                    strCodCompañia,
                                                    strAñoProceso,
                                                    strPeriodo,
                                                    strCodCentroGestor
                                                )
                  )
            {
                return ds;
            }
        }

        public Boolean Graba_CentroGestor_Clasificador(string strCodCompañia,
                                                string strAñoProceso,
                                                string strPeriodo,
                                                string strCodCege,
                                                string strCodClasificador
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_ins_mvto_CentroGestor_Clasificador]",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strPeriodo,
                                                strCodCege,
                                                strCodClasificador
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Graba_CentroGestor_CentroCosto(string strCodCompañia,
                                                string strAñoProceso,
                                                string strPeriodo,
                                                string strCodCege,
                                                string strCodCeco,
                                                string strCodCentroCosto
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_ins_mvto_CentroGestor_CentroCosto]",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strPeriodo,
                                                strCodCege,
                                                strCodCeco,
                                                strCodCentroCosto
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Elimina_CentroGestor_Clasificador(string strCodCompañia,
                                                string strAñoProceso,
                                                string strPeriodo,
                                                string strCodCege,
                                                string strCodClasificador
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_del_mvto_CentroGestor_Clasificador]",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strPeriodo,
                                                strCodCege,
                                                strCodClasificador
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Elimina_CentroGestor_CentroCosto(string strCodCompañia,
                                                string strAñoProceso,
                                                string strPeriodo,
                                                string strCodCege,
                                                string strCodCeco,
                                                string strCodCentroCosto
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_del_mvto_CentroGestor_CentroCosto]",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strPeriodo,
                                                strCodCege,
                                                strCodCeco,
                                                strCodCentroCosto
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public int Graba_CentroGestor(Model.CentroGestor obj)
        {
            int intIdCentroGestor = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "[Formulacion].[spp_ins_msto_CentroGestor]", obj.CcodCeGe,
                                                                                                            obj.VnomCeGe,
                                                                                                            obj.CcodCeGe_Dep,
                                                                                                            obj.CcodCeGe_For,
                                                                                                            obj.Idigito,
                                                                                                            obj.cPaso,
                                                                                                            obj.Csigla

                                                          );
                intIdCentroGestor = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdCentroGestor = 0;
            }
            return intIdCentroGestor;
        }

        public int Modifica_CentroGestor(Model.CentroGestor obj)
        {
            int intIdCentroGestor = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "[Formulacion].[spp_upd_msto_CentroGestor]", obj.IidCeGe,
                                                                                                            obj.CcodCeGe,
                                                                                                            obj.VnomCeGe,
                                                                                                            obj.CcodCeGe_Dep,
                                                                                                            obj.CcodCeGe_For,
                                                                                                            obj.Idigito,
                                                                                                            obj.cPaso,
                                                                                                            obj.Csigla

                                                          );
                intIdCentroGestor = obj.IidCeGe;
            }
            catch
            {
                intIdCentroGestor = 0;
            }
            return intIdCentroGestor;
        }

        public DataSet Lista_CentroGestor(string strCodCompañia)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_lst_msto_CentroGestor"
                                                 ))
            {
                return ds;
            }
        }
        #endregion

        #region Clasificador
        public DataSet Ayuda_Clasificador(string strCodCompañia, string strCodClasificador, string strCodCentroGestor)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_help_mvto_Clasificador_Gasto",
                                                 strCodCompañia,
                                                 strCodClasificador,
                                                 strCodCentroGestor
                                                 ))
            {
                return ds;
            }

        }
        public DataSet Ayuda_Clasificador_Inversion(string strCodCompañia, string strCodProyecto, string strCodClasificador, string strCodCentroGestor)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_help_mvto_Clasificador_Gasto_Inversion",
                                                 strCodCompañia,
                                                 strCodProyecto,
                                                 strCodClasificador,
                                                 strCodCentroGestor
                                                 ))
            {
                return ds;
            }

        }

        public DataSet Ayuda_Clasificador_Otro(string strCodCompañia, string strCodClasificador, string strCodCentroGestor)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                "Formulacion.spp_help_mvto_Clasificador_Gasto_Otro",
                                                strCodCompañia,
                                                strCodClasificador,
                                                strCodCentroGestor
                                                ))
            {
                return ds;
            }

        }

        public DataSet Ayuda_Clasificador_Tarea(string strCodCompañia, string strCodProyecto, string strCodClasificador, string strCodCentroGestor)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                "Formulacion.spp_help_mvto_Clasificador_Gasto_Tarea",
                                                strCodCompañia,
                                                strCodProyecto,
                                                strCodClasificador,
                                                strCodCentroGestor
                                                ))
            {
                return ds;
            }

        }

        public DataSet Ayuda_Clasificador_Ingreso(string strCodCompañia, string strCodCentroGestor)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                "Formulacion.spp_help_mvto_Clasificador_Ingreso",
                                                strCodCompañia,
                                                strCodCentroGestor
                                                ))
            {
                return ds;
            }

        }

        public DataSet Ayuda_Clasificador_General(string strCodCompañia)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                        "Formulacion.spp_help_msto_Clasificador_General"
                                     );

            return ds;
        }

        public DataSet Lista_Clasificador(string strCodCompañia)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_lst_msto_Clasificador",
                                      strCodCompañia
                                     );

            return ds;
        }

        public DataSet Lista_AgrupadorClasificador(string strCodCompañia)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_lst_msto_AgrupadorClasificador",
                                      strCodCompañia
                                     );

            return ds;
        }

        public Model.Clasificador Recupera_Clasificador_Codigo(string strCodCompañia,
                                                                string strCodClasificador)
        {
            DataTable dt = new DataTable();
            Model.Clasificador obj = new Model.Clasificador();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Formulacion.spp_sel_msto_Clasificador_Codigo",
                                            strCodCompañia,
                                            strCodClasificador
                                            );

            if (dt.Rows.Count > 0)
            {
                obj.IidClasificador = Convert.ToInt32(dt.Rows[0]["IidClasificador"]);
                obj.CcodClasificador = Convert.ToString(dt.Rows[0]["CcodClasificador"]);
                obj.VnomClasificador = Convert.ToString(dt.Rows[0]["VnomClasificador"]);
                obj.CcodTipoClasificador = Convert.ToString(dt.Rows[0]["CcodTipoClasificador"]);
                obj.VnomTipoClasificador = Convert.ToString(dt.Rows[0]["VnomTipoClasificador"]);
                obj.CcodAgrupador = Convert.ToString(dt.Rows[0]["CcodAgrupador"]);
                obj.VnomAgrupador = Convert.ToString(dt.Rows[0]["VnomAgrupador"]);
            }

            return obj;

        }


        public Model.AgrupadorClasificador Recupera_AgrupadorClasificador_Codigo(string strCodCompañia,
                                                                string strCodAgrupador)
        {
            DataTable dt = new DataTable();
            Model.AgrupadorClasificador obj = new Model.AgrupadorClasificador();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Formulacion.spp_sel_msto_AgrupadorClasificador_Codigo",
                                            strCodCompañia,
                                            strCodAgrupador
                                            );

            if (dt.Rows.Count > 0)
            {
                obj.IidAgrupador = Convert.ToInt32(dt.Rows[0]["IidAgrupador"]);
                obj.CcodAgrupador = Convert.ToString(dt.Rows[0]["CcodAgrupador"]);
                obj.VnomAgrupador = Convert.ToString(dt.Rows[0]["VnomAgrupador"]);
            }

            return obj;

        }

        public Model.Clasificador Recupera_Clasificador(int intIdClasificador)
        {
            DataTable dt = new DataTable();
            Model.Clasificador obj = new Model.Clasificador();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_msto_Clasificador", intIdClasificador);

            if (dt.Rows.Count == 0)
            {
                obj.IidClasificador = 0;
                obj.CcodClasificador = "";
                obj.VnomClasificador = "";
                obj.CcodTipoClasificador = "";
                obj.CcodAgrupador = "";
            }
            else
            {
                obj.IidClasificador = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodClasificador = Convert.ToString(dt.Rows[0][1]);
                obj.VnomClasificador = Convert.ToString(dt.Rows[0][2]);
                obj.CcodTipoClasificador = Convert.ToString(dt.Rows[0][3]);
                obj.CcodAgrupador = Convert.ToString(dt.Rows[0][4]);
            }

            return obj;

        }

        public int Graba_Clasificador(Model.Clasificador obj)
        {
            int intIdClasificador = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_ins_msto_Clasificador", obj.CcodClasificador,
                                                                                                        obj.VnomClasificador,
                                                                                                        obj.CcodTipoClasificador,
                                                                                                        obj.CcodAgrupador
                                                          );
                intIdClasificador = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdClasificador = 0;
            }
            return intIdClasificador;
        }

        public int Graba_AgrupadorClasificador(Model.AgrupadorClasificador obj)
        {
            int intIdAgrupador = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_ins_msto_AgrupadorClasificador", obj.CcodAgrupador,
                                                                                                        obj.VnomAgrupador
                                                          );
                intIdAgrupador = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdAgrupador = 0;
            }
            return intIdAgrupador;
        }


        public int Modifica_Clasificador(Model.Clasificador obj)
        {
            int intIdClasificador = 0;

            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_upd_msto_Clasificador", obj.IidClasificador,
                                                                                                                obj.CcodClasificador,
                                                                                                                obj.VnomClasificador,
                                                                                                                obj.CcodTipoClasificador,
                                                                                                                obj.CcodAgrupador
                                                          );
                intIdClasificador = obj.IidClasificador;
            }
            catch
            {
                intIdClasificador = 0;
            }
            return intIdClasificador;
        }

        public int Modifica_AgrupadorClasificador(Model.AgrupadorClasificador obj)
        {
            int intIdAgrupador = 0;

            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_upd_msto_AgrupadorClasificador", obj.IidAgrupador,
                                                                                                        obj.CcodAgrupador,
                                                                                                        obj.VnomAgrupador
                                                          );
                intIdAgrupador = obj.IidAgrupador;
            }
            catch
            {
                intIdAgrupador = 0;
            }
            return intIdAgrupador;
        }


        public bool Elimina_Clasificador(int intIdClasificador)
        {
            Boolean blnResult = false;

            try
            {
                Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Formulacion.spp_del_msto_Clasificador", intIdClasificador));
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public bool Elimina_AgrupadorClasificador(int intIdAgrupador)
        {
            Boolean blnResult = false;

            try
            {
                Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Formulacion.spp_del_msto_AgrupadorClasificador", intIdAgrupador));
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }


        #endregion

        #region Formulacion
        public DataSet Lista_HojaTrabajo_Dashboard( string strCodCompañia,
                                                    string strAñoProceso,
                                                    string strPeriodo,
                                                    string strVersion
                                                  )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Formulacion.spp_lst_mvto_HojaTrabajo_Dashboard",
                                             strCodCompañia,
                                             strAñoProceso,
                                             strPeriodo,
                                             strVersion
                                           );
        }

        public Model.Formulacion Recupera_Formulacion(string strCodCompañia,
                                                string strAñoProceso,
                                                string strCodFormulacion
                                              )
        {
            DataTable dt = new DataTable();
            Model.Formulacion obj = new Model.Formulacion();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Formulacion.spp_sel_mvto_Formulacion",
                                             strCodCompañia,
                                             strAñoProceso,
                                             strCodFormulacion
                                           );

            if (dt.Rows.Count > 0)
            {
                obj.CcodCompañia = Convert.ToString(dt.Rows[0]["CcodCompañia"]);
                obj.CcodFormulacion = Convert.ToString(dt.Rows[0]["CcodFormulacion"]);
                obj.TdescripcionGasto = Convert.ToString(dt.Rows[0]["TdescripcionGasto"]);
                obj.ItipoMovimiento = Convert.ToInt32(dt.Rows[0]["ItipoMovimiento"]);
                obj.CañoProceso = Convert.ToString(dt.Rows[0]["CañoProceso"]);
                obj.CcodFuenteFinanciamiento = Convert.ToString(dt.Rows[0]["CcodFuenteFinanciamiento"]);
                obj.VnomFuenteFinanciamiento = Convert.ToString(dt.Rows[0]["VnomFuenteFinanciamiento"]);
                obj.CcodCeGe = Convert.ToString(dt.Rows[0]["CcodCeGe"]);
                obj.VnomCeGe = Convert.ToString(dt.Rows[0]["VnomCeGe"]);
                obj.CcodCeCo = Convert.ToString(dt.Rows[0]["CcodCeCo"]);
                obj.VnomCeCo = Convert.ToString(dt.Rows[0]["VnomCeCo"]);
                obj.CcodProyecto = Convert.ToString(dt.Rows[0]["CcodProyecto"]);
                obj.VnomProyecto = Convert.ToString(dt.Rows[0]["VnomProyecto"]);
                obj.CcodComponente = Convert.ToString(dt.Rows[0]["CcodComponente"]);
                obj.VnomComponente = Convert.ToString(dt.Rows[0]["VnomComponente"]);
                obj.CcodPosPre = Convert.ToString(dt.Rows[0]["CcodPosPre"]);
                obj.VnomPosPre = Convert.ToString(dt.Rows[0]["VnomPosPre"]);
                obj.CcodFamiliaPosPre = Convert.ToString(dt.Rows[0]["CcodFamiliaPosPre"]);
                obj.VnomFamiliaPosPre = Convert.ToString(dt.Rows[0]["VnomFamiliaPosPre"]);
                obj.CcodClasificador = Convert.ToString(dt.Rows[0]["CcodClasificador"]);
                obj.VnomClasificador = Convert.ToString(dt.Rows[0]["VnomClasificador"]);
                obj.CcodClaseGasto = Convert.ToString(dt.Rows[0]["CcodClaseGasto"]);
                obj.VnomClaseGasto = Convert.ToString(dt.Rows[0]["VnomClaseGasto"]);
                obj.Fimporte = Convert.ToDouble(dt.Rows[0]["Fimporte"]);
                obj.CtipoFormulario = Convert.ToString(dt.Rows[0]["CtipoFormulario"]);
            }

            return obj;

        }

        public DataSet Ayuda_Formulacion(string strCodCompañia,
                                         string strAñoProceso,
                                         string strCodCentroGestor,
                                         string strCodTipoAdquisicion,
                                         Boolean blnEsPasajeAereo
                                       )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_mvto_Formulacion", strCodCompañia,
                                                                                                                            strAñoProceso,
                                                                                                                            strCodCentroGestor,
                                                                                                                            strCodTipoAdquisicion,
                                                                                                                            blnEsPasajeAereo
                                                                                                                     ))
            {
                return ds;
            }
        }

        public DataSet Ayuda_Formulacion_Logistica(string strCodCompañia,
                                                    string strAñoProceso,
                                                    string strCodCentroGestor,
                                                    string strJustificacionGasto,
                                                    string strCodTipoAdquisicion
                                       )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_mvto_Formulacion_Logistica", strCodCompañia,
                                                                                                                            strAñoProceso,
                                                                                                                            strCodCentroGestor,
                                                                                                                            strJustificacionGasto,
                                                                                                                            strCodTipoAdquisicion
                                                                                                                     ))
            {
                return ds;
            }
        }

        public DataSet Ayuda_Formulacion_Logistica(string strCodCompañia,
                                         string strAñoProceso,
                                         string strCodCentroGestor,
                                         string strCodTipoAdquisicion
                                       )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_mvto_Formulacion_Logistica", strCodCompañia,
                                                                                                                            strAñoProceso,
                                                                                                                            strCodCentroGestor,
                                                                                                                            strCodTipoAdquisicion
                                                                                                                     ))
            {
                return ds;
            }
        }

        public DataSet Lista_Formulacion_Reasignacion(string strCodCompañia,
                                                string strAñoProceso,
                                                string strCodCentroGestor,
                                                int intTipoBusqueda
                                       )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_lista_mvto_Formulacion_Reasignacion",
                                                 strCodCompañia,
                                                 strAñoProceso,
                                                 strCodCentroGestor,
                                                 intTipoBusqueda
                                                                                                                     ))
            {
                return ds;
            }
        }
        public DataSet Ayuda_Formulacion_General(string strCodCompañia,
                                                string strAñoProceso,
                                                string strCodCentroGestor,
                                                string strCodTipoAdquisicion,
                                                int intTipoBusqueda,
                                                Boolean blnEsPasajeAereo
                                       )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_help_mvto_Formulacion_General",
                                                 strCodCompañia,
                                                 strAñoProceso,
                                                 strCodCentroGestor,
                                                 strCodTipoAdquisicion,
                                                 intTipoBusqueda,
                                                 blnEsPasajeAereo
                                                                                                                     ))
            {
                return ds;
            }
        }

        public DataSet Elige_Formulacion_General(string strCodCompañia,
                                                string strAñoProceso,
                                                string strLineasElegidas
                                       )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_lst_mvto_Formulacion_General",
                                                 strCodCompañia,
                                                 strAñoProceso,
                                                 strLineasElegidas
                                                                                                                     ))
            {
                return ds;
            }
        }

        public DataSet Ayuda_Formulacion_Origen(string strCodCompañia,
                                                string strAñoProceso,
                                                string strCodCentroGestor,
                                                string strCodTipoAdquisicion
                                       )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_mvto_Formulacion_DetalleGasto_Origen", strCodCompañia,
                                                                                                                            strAñoProceso,
                                                                                                                            strCodCentroGestor,
                                                                                                                            strCodTipoAdquisicion
                                                                                                                     ))
            {
                return ds;
            }
        }

        public DataSet Ayuda_Formulacion_Destino(string strCodCompañia,
                                                string strAñoProceso,
                                                string strCodCentroGestor,
                                                string strCodClasificador,
                                                string strCodPosPre,
                                                string strCodTipoAdquisicion,
                                                string strCodFormulacion
                                       )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_mvto_Formulacion_DetalleGasto_Destino", strCodCompañia,
                                                                                                                            strAñoProceso,
                                                                                                                            strCodCentroGestor,
                                                                                                                            strCodClasificador,
                                                                                                                            strCodPosPre,
                                                                                                                            strCodTipoAdquisicion,
                                                                                                                            strCodFormulacion
                                                                                                                     ))
            {
                return ds;
            }
        }

        public DataSet Ayuda_Formulacion_Destino_Uno_Varios(string strCodCompañia,
                                        string strAñoProceso,
                                        string strCodCentroGestor,
                                        string strCodClasificador,
                                        string strCodPosPre,
                                        string strCodTipoAdquisicion,
                                        string strCodFormulacion,
                                        string strTipoFormulacion
                               )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_mvto_Formulacion_Uno_Varios", strCodCompañia,
                                                                                                                            strAñoProceso,
                                                                                                                            strCodCentroGestor,
                                                                                                                            strCodClasificador,
                                                                                                                            strCodPosPre,
                                                                                                                            strCodTipoAdquisicion,
                                                                                                                            strCodFormulacion,
                                                                                                                            strTipoFormulacion
                                                                                                                     ))
            {
                return ds;
            }
        }


        public Boolean Graba_Formulacion_Genera_PIA(string strCodCompañia,
                                                 string strAñoProceso,
                                                 string strVersion
                                               )
        {
            Boolean blnResult = true;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "Formulacion.spp_ins_mvto_Formulacion_Generacion_PIA",
                                                strCodCompañia, strAñoProceso, strVersion
                                                );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public string Graba_Formulacion(Model.Formulacion obj)
        {
            string strCodFormulacion = "";
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "Formulacion.spp_ins_mvto_Formulacion",
                                                obj.CcodCompañia,
                                                obj.CcodFormulacion,
                                                obj.ItipoMovimiento,
                                                obj.CañoProceso,
                                                obj.CcodFuenteFinanciamiento,
                                                obj.CcodCeGe,
                                                obj.CcodCeCo,
                                                obj.CcodProyecto,
                                                obj.CcodComponente,
                                                obj.CcodPosPre,
                                                obj.CcodClasificador,
                                                obj.CcodClaseGasto,
                                                obj.TdescripcionGasto,
                                                obj.Fimporte,
                                                obj.CtipoFormulario
                                                );
                strCodFormulacion = Convert.ToString(dt.Rows[0][0]);
            }
            catch
            {
                strCodFormulacion = "";
            }
            return strCodFormulacion;
        }

        public string Modifica_Formulacion(Model.Formulacion obj)
        {
            string strCodFormulacion = obj.CcodFormulacion;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                                "Formulacion.spp_upd_mvto_Formulacion",
                                                obj.CcodCompañia,
                                                obj.CcodFormulacion,
                                                obj.ItipoMovimiento,
                                                obj.CañoProceso,
                                                obj.CcodFuenteFinanciamiento,
                                                obj.CcodCeGe,
                                                obj.CcodCeCo,
                                                obj.CcodProyecto,
                                                obj.CcodComponente,
                                                obj.CcodPosPre,
                                                obj.CcodClasificador,
                                                obj.CcodClaseGasto,
                                                obj.TdescripcionGasto,
                                                obj.Fimporte,
                                                obj.CtipoFormulario
                                                );
            }
            catch
            {
                strCodFormulacion = "";
            }
            return strCodFormulacion;
        }

        #endregion

        #region FormulacionAjuste_Cabecera
        public Model.Formulacion_Ajuste_Cabecera Recupera_Formulacion_Ajuste_Cabecera(string strNumAjuste)
        {
            DataTable dt = new DataTable();
            Model.Formulacion_Ajuste_Cabecera obj = new Model.Formulacion_Ajuste_Cabecera();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Formulacion.spp_sel_mvto_Formulacion_Ajuste_Cabecera",
                                            strNumAjuste
                                          );

            if (dt.Rows.Count > 0)
            {
                obj.IidFormulacion_Ajuste_Cabecera = Convert.ToInt32(dt.Rows[0]["IidFormulacion_Ajuste_Cabecera"]);
                obj.CañoProceso = Convert.ToString(dt.Rows[0]["CañoProceso"]);
                obj.CnumAjuste = Convert.ToString(dt.Rows[0]["CnumAjuste"]);
                obj.DfecAjuste = Convert.ToDateTime(dt.Rows[0]["DfecAjuste"]);
                obj.CcodCeGe = Convert.ToString(dt.Rows[0]["CcodCeGe"]);
                obj.CcodEmpleado = Convert.ToString(dt.Rows[0]["CcodEmpleado"]);
                obj.Tmotivo = Convert.ToString(dt.Rows[0]["Tmotivo"]);
                obj.CtipoAjuste = Convert.ToString(dt.Rows[0]["CtipoAjuste"]);
            }
            return obj;
        }

        public Model.Formulacion_Ajuste_Cabecera Graba_Formulacion_Ajuste_Cabecera(Model.Formulacion_Ajuste_Cabecera obj)
        {
            Model.Formulacion_Ajuste_Cabecera MFAC = new Model.Formulacion_Ajuste_Cabecera();
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_ins_mvto_Formulacion_Ajuste_Cabecera", obj.CañoProceso,
                                                                                                            obj.CnumAjuste,
                                                                                                            obj.DfecAjuste,
                                                                                                            obj.CcodCeGe,
                                                                                                            obj.CcodEmpleado,
                                                                                                            obj.Tmotivo,
                                                                                                            obj.CtipoAjuste
                                                          );
                MFAC.IidFormulacion_Ajuste_Cabecera = Convert.ToInt32(dt.Rows[0]["IidFormulacion_Ajuste_Cabecera"]);
                MFAC.CañoProceso = obj.CañoProceso;
                MFAC.DfecAjuste = obj.DfecAjuste;
                MFAC.CcodCeGe = obj.CcodCeGe;
                MFAC.CcodCeGe = obj.CcodEmpleado;
                MFAC.CnumAjuste = Convert.ToString(dt.Rows[0]["CnumAjuste"]);
                MFAC.Tmotivo = obj.Tmotivo;
                MFAC.CtipoAjuste = obj.CtipoAjuste;
            }
            catch
            {
                MFAC.IidFormulacion_Ajuste_Cabecera = 0;
                MFAC.CañoProceso = obj.CañoProceso;
                MFAC.DfecAjuste = obj.DfecAjuste;
                MFAC.CcodCeGe = obj.CcodCeGe;
                MFAC.CcodEmpleado = obj.CcodEmpleado;
                MFAC.CnumAjuste = "";
                MFAC.Tmotivo = "";
                MFAC.CtipoAjuste = "";
            }
            return MFAC;
        }

        public Model.Formulacion_Ajuste_Cabecera Graba_Formulacion_Ajuste_Cabecera_Procedimiento(Model.Formulacion_Ajuste_Cabecera obj)
        {
            Model.Formulacion_Ajuste_Cabecera MFAC = new Model.Formulacion_Ajuste_Cabecera();
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_ins_mvto_Formulacion_Ajuste_Cabecera_Procedimiento", obj.CañoProceso,
                                                                                                            obj.CnumAjuste,
                                                                                                            obj.DfecAjuste,
                                                                                                            obj.CcodCeGe,
                                                                                                            obj.CcodEmpleado,
                                                                                                            obj.Tmotivo,
                                                                                                            obj.CtipoAjuste,
                                                                                                            obj.CnumProcedimiento
                                                          );
                MFAC.IidFormulacion_Ajuste_Cabecera = Convert.ToInt32(dt.Rows[0]["IidFormulacion_Ajuste_Cabecera"]);
                MFAC.CañoProceso = obj.CañoProceso;
                MFAC.DfecAjuste = obj.DfecAjuste;
                MFAC.CcodCeGe = obj.CcodCeGe;
                MFAC.CcodCeGe = obj.CcodEmpleado;
                MFAC.CnumAjuste = Convert.ToString(dt.Rows[0]["CnumAjuste"]);
                MFAC.Tmotivo = obj.Tmotivo;
                MFAC.CtipoAjuste = obj.CtipoAjuste;
            }
            catch
            {
                MFAC.IidFormulacion_Ajuste_Cabecera = 0;
                MFAC.CañoProceso = obj.CañoProceso;
                MFAC.DfecAjuste = obj.DfecAjuste;
                MFAC.CcodCeGe = obj.CcodCeGe;
                MFAC.CcodEmpleado = obj.CcodEmpleado;
                MFAC.CnumAjuste = "";
                MFAC.Tmotivo = "";
                MFAC.CtipoAjuste = "";
            }
            return MFAC;
        }


        public int Modifica_Formulacion_Ajuste_Cabecera(Model.Formulacion_Ajuste_Cabecera obj)
        {
            int intIdFormulacion_Ajuste_Cabecera = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_upd_mvto_Formulacion_Ajuste_Cabecera", obj.IidFormulacion_Ajuste_Cabecera,
                                                                                                            obj.CañoProceso,
                                                                                                            obj.CnumAjuste,
                                                                                                            obj.DfecAjuste,
                                                                                                            obj.CcodCeGe,
                                                                                                            obj.CcodEmpleado,
                                                                                                            obj.Tmotivo,
                                                                                                            obj.CtipoAjuste
                                                          );
                intIdFormulacion_Ajuste_Cabecera = obj.IidFormulacion_Ajuste_Cabecera;
            }
            catch
            {
                intIdFormulacion_Ajuste_Cabecera = 0;
            }
            return intIdFormulacion_Ajuste_Cabecera;
        }

        public int Elimina_Formulacion_Ajuste_Cabecera(string strNumAjuste)
        {
            int intResultado = 0;

            try
            {
                intResultado = Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection,
                                                                        "Formulacion.spp_del_mvto_Formulacion_Ajuste_Cabecera",
                                                                        strNumAjuste
                                                                        )
                                              );

            }
            catch
            {
                intResultado = 0;
            }
            return intResultado;
        }

        public DataSet Lista_Formulacion_Ajuste_Cabecera(string strAñoProceso,
                                                    string strCodCentroGestor,
                                                    string strCodEmpleado
                                                )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_lst_mvto_Formulacion_Ajuste_Cabecera", strAñoProceso, strCodCentroGestor, strCodEmpleado);
            return ds;
        }

        #endregion

        #region FormulacionAjuste_Detalle
        public Model.Formulacion_Ajuste_Detalle Recupera_Formulacion_Ajuste_Detalle(string strNumAjuste,
                                                                     string strCodTipoMovimiento
                                                                    )
        {
            DataTable dt = new DataTable();
            Model.Formulacion_Ajuste_Detalle obj = new Model.Formulacion_Ajuste_Detalle();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Formulacion.spp_sel_mvto_Formulacion_Ajuste_Detalle",
                                            strNumAjuste, strCodTipoMovimiento
                                          );

            if (dt.Rows.Count > 0)
            {
                obj.IidFormulacion_Ajuste_Cabecera = Convert.ToInt32(dt.Rows[0]["IidFormulacion_Ajuste_Cabecera"]);
                obj.IidFormulacion_Ajuste_Detalle = Convert.ToInt32(dt.Rows[0]["IidFormulacion_Ajuste_Detalle"]);
                obj.CcodCompañia = Convert.ToString(dt.Rows[0]["CcodCompañia"]);
                obj.CcodFormulacion = Convert.ToString(dt.Rows[0]["CcodFormulacion"]);
                obj.CtipoMovimiento = Convert.ToString(dt.Rows[0]["CtipoMovimiento"]);
                obj.CañoProceso = Convert.ToString(dt.Rows[0]["CañoProceso"]);
                obj.TdescripcionGasto = Convert.ToString(dt.Rows[0]["TdescripcionGasto"]);
                obj.Fimporte = Convert.ToDouble(dt.Rows[0]["Fimporte"]);
                obj.CcodEmpleado = Convert.ToString(dt.Rows[0]["CcodEmpleado"]);

            }
            return obj;
        }

        public int Graba_Formulacion_Ajuste_Detalle(Model.Formulacion_Ajuste_Detalle obj)
        {
            int intIdFormulacion_Ajuste = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, 
                        "Formulacion.spp_ins_mvto_Formulacion_Ajuste_Detalle", 
                                        obj.IidFormulacion_Ajuste_Cabecera,
                                        obj.CcodCompañia,
                                        obj.CcodFormulacion,
                                        obj.CtipoMovimiento,
                                        obj.CañoProceso,
                                        obj.TdescripcionGasto,
                                        obj.Fimporte,
                                        obj.CcodEmpleado

                                                          );
                intIdFormulacion_Ajuste = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdFormulacion_Ajuste = 0;
            }
            return intIdFormulacion_Ajuste;
        }

        public int Modifica_Formulacion_Ajuste_Detalle(Model.Formulacion_Ajuste_Detalle obj)
        {
            int intIdFormulacion_Ajuste_Detalle = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, 
                        "Formulacion.spp_upd_mvto_Formulacion_Ajuste_Detalle", obj.IidFormulacion_Ajuste_Detalle,
                                                obj.CcodCompañia,
                                                obj.CcodFormulacion,
                                                obj.CtipoMovimiento,
                                                obj.CañoProceso,
                                                obj.TdescripcionGasto,
                                                obj.Fimporte,
                                                obj.CcodEmpleado
                                                          );
                intIdFormulacion_Ajuste_Detalle = obj.IidFormulacion_Ajuste_Detalle;
            }
            catch
            {
                intIdFormulacion_Ajuste_Detalle = 0;
            }
            return intIdFormulacion_Ajuste_Detalle;
        }

        public int Elimina_Formulacion_Ajuste_Detalle(string strNumAjuste,
                                                        string strCodTipoMovimiento
                                                     )
        {
            int intResultado = 0;

            try
            {
                intResultado = Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection,
                                                                        "Formulacion.spp_del_mvto_Formulacion_Ajuste_Detalle",
                                                                        strNumAjuste, strCodTipoMovimiento
                                                                        )
                                              );

            }
            catch
            {
                intResultado = 0;
            }
            return intResultado;
        }

        public DataSet Lista_Formulacion_Ajuste_Detalle(string strAñoProceso,
                                                    string strNumAjuste
                                                )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_lst_mvto_Formulacion_Ajuste_Detalle", strAñoProceso, strNumAjuste);
            return ds;
        }

        public DataSet Lista_Formulacion_Ajuste_Detalle_Formato(string strAñoProceso,
                                                    string strNumAjuste
                                                )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_lst_mvto_Formulacion_Ajuste_Detalle_Formato", strAñoProceso, strNumAjuste);
            return ds;
        }

        public DataSet Lista_Formulacion_Ajuste_Detalle_Modificacion(string strAñoProceso,
                                            string strNumAjuste,
                                            string strTipoReasignacion
                                        )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_lst_mvto_Formulacion_Ajuste_Detalle_Modificacion", strAñoProceso, strNumAjuste,strTipoReasignacion);
            return ds;
        }

        public bool Elimina_Formulacion_Ajuste_Detalle(int intIdDetalle,
                                                                    int intIdDetalle_C,
                                                                    double dblImporte,
                                                                    double dblImporte_C
                                                )
        {
            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, 
                                          "Formulacion.spp_del_mvto_Formulacion_Ajuste_Detalle", 
                                          intIdDetalle,
                                          intIdDetalle_C,
                                          dblImporte,
                                          dblImporte_C
                                         );

            }
            catch (Exception)
            {

                blnResult = false;
            }

            return blnResult;

        }

        public bool Modifica_Formulacion_Ajuste_Detalle(int intIdDetalle,
                                                                    int intIdDetalle_C,
                                                                    double dblImporte,
                                                                    double dblImporte_C
                                                )
        {
            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_upd_mvto_Formulacion_Ajuste_Detalle",
                                          intIdDetalle,
                                          intIdDetalle_C,
                                          dblImporte,
                                          dblImporte_C
                                         );

            }
            catch (Exception)
            {

                blnResult = false;
            }

            return blnResult;

        }


        public DataSet Lista_Formulacion_Ajuste_Detalle_Formato_Nuevo(string strAñoProceso,
                                                    string strNumAjuste
                                                )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_lst_mvto_Formulacion_Ajuste_Detalle_Formato_Nuevo", strAñoProceso, strNumAjuste);
            return ds;
        }

        public DataSet Formato_Ajuste_Estado(string strCodCentro_Gestor,
                                                    string strEstado,
                                                    string strCodEmpleado
                                                   )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_lst_mvto_Ajuste_Detalle_CentroCosto_Gestor", strCodCentro_Gestor,
                                                                                                                          strEstado,
                                                                                                                          strCodEmpleado
                                                                                                                 );
            return ds;
        }

        public Boolean Formato_Ajuste_DescarteFirma(string strNumAjuste,
                                                            string strCodMotivoDescarte,
                                                            DateTime dateFecDescarte,
                                                            string strMotivoDescarte
                                                          )
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Formulacion.spp_ins_mvto_Ajuste_DescarteFirma", strNumAjuste,
                                                                                                             strCodMotivoDescarte,
                                                                                                             dateFecDescarte,
                                                                                                             strMotivoDescarte
                                                                                           );
            }
            catch (Exception)
            {

                blnResult = false;
            }

            return blnResult;
        }

        public Boolean Formato_Ajuste_Firma(string strCodCentro_Gestor,
                                                    string strPaso,
                                                    string strNumAjuste,
                                                    string strCodEmpleado
                                                   )
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Formulacion.spp_ins_mvto_Ajuste_Firma", strCodCentro_Gestor,
                                                                                                   strPaso,
                                                                                                   strNumAjuste,
                                                                                                   strCodEmpleado
                                                                                           );
            }
            catch (Exception)
            {

                blnResult = false;
            }

            return blnResult;
        }

        #endregion

        #region Formulacion_Cabecera
        public DataTable Combo_AñoProceso(string strCodCompañia)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "[Formulacion].[spp_cbo_mvto_AÑoProceso]", strCodCompañia))
            {
                return ds.Tables[0];
            }
        }

        //public DataTable Combo_Version(string strAñoProceso)
        //{
        //    DataSet ds = new DataSet();
        //    using (ds = SqlHelper.ExecuteDataset(strConnection, "[Formulacion].[spp_cbo_mvto_Version]", strAñoProceso))
        //    {
        //        return ds.Tables[0];
        //    }
        //}

        public DataTable Combo_Periodo(string strAñoProceso)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "[Formulacion].[spp_cbo_mvto_AñoPeriodo]", strAñoProceso))
            {
                return ds.Tables[0];
            }
        }

        public Model.Formulacion_Cabecera Recupera_FormulacionCabecera(string strAñoProceso)
        {
            DataTable dt; // = new DataTable();
            Model.Formulacion_Cabecera obj = new Model.Formulacion_Cabecera();


            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_mvto_Formulacion_Cabecera", strAñoProceso);

            if (dt.Rows.Count == 0)
            {
                obj.IidFormulacion_Cabecera = 0;
                obj.CañoProceso = "";
                obj.Cversion = "";
                obj.DfecFormulacion = DateTime.Today;
                obj.Tnota = "";
                obj.Bactivo = false;
            }
            else
            {
                obj.IidFormulacion_Cabecera = Convert.ToInt32(dt.Rows[0][0]); ;
                obj.CañoProceso = Convert.ToString(dt.Rows[0][1]);
                obj.Cversion = Convert.ToString(dt.Rows[0][2]);
                obj.DfecFormulacion = Convert.ToDateTime(dt.Rows[0][3]);
                obj.Tnota = Convert.ToString(dt.Rows[0][4]);
                obj.Bactivo = Convert.ToBoolean(dt.Rows[0][5]);
            }
            return obj;
        }

        public int Graba_FormulacionCabecera(Model.Formulacion_Cabecera obj)
        {
            int intIdFormulacion_Cabecera = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_ins_mvto_Formulacion_Cabecera",
                                                                                                                obj.CañoProceso,
                                                                                                                obj.Cversion,
                                                                                                                obj.cCodTipoDocumento,
                                                                                                                obj.cNumDocumento,
                                                                                                                obj.Tnota,
                                                                                                                obj.Bactivo
                                                          );
                intIdFormulacion_Cabecera = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdFormulacion_Cabecera = 0;
            }
            return intIdFormulacion_Cabecera;
        }

        //Agregado
        public DataSet Lista_FormulacionCabecera(string strAñoProceso)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "[Formulacion].[spp_lst_mvto_Formulacion_Cabecera]", strAñoProceso))
            {
                return ds;
            }
        }

        public bool elimina_mvto_Formulacion_Cabecera(int intiIdFormulacion_Cabecera)
        {
            bool blnResultado = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "[Formulacion].[spp_del_mvto_Formulacion_Cabecera]",
                                        intiIdFormulacion_Cabecera
                                       );
            }
            catch (Exception)
            {
                blnResultado = false;
                throw;
            }
            return blnResultado;
        }

        public DataSet Graba_FormulacionCabecera_DataSet(Model.Formulacion_Cabecera obj)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_ins_mvto_Formulacion_Cabecera",
                                                                                                                obj.CañoProceso,
                                                                                                                obj.Cversion,
                                                                                                                obj.cCodTipoDocumento,
                                                                                                                obj.cNumDocumento,
                                                                                                                obj.Tnota,
                                                                                                                obj.Bactivo))
            {
                return ds;
            }

        }

        public bool Modifica_mvto_Formulacion_Cabecera(Model.Formulacion_Cabecera obj)
        {
            bool blnResultado = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "[Formulacion].[spp_upd_mvto_Formulacion_Cabecera]", obj.IidFormulacion_Cabecera,
                                                                                                                obj.CañoProceso,
                                                                                                                obj.Cversion,
                                                                                                                obj.cCodTipoDocumento,
                                                                                                                obj.cNumDocumento,
                                                                                                                obj.Tnota,
                                                                                                                obj.Bactivo);
            }
            catch (Exception)
            {
                blnResultado = false;
                throw;
            }
            return blnResultado;
        }

        #endregion

        #region Formulacion_Cabecera_CentroGestor
        public bool Graba_mvto_Formulacion_Cabecera_Cege(Model.Formulacion_Cabecera_Cege obj)
        {
            bool blnResultado = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "[Formulacion].[spp_ins_mvto_Formulacion_Cabecera_Cege]",
                                                                                                                obj.CañoProceso,
                                                                                                                obj.Cversion,
                                                                                                                obj.cCodCege,
                                                                                                                obj.Tnota,
                                                                                                                obj.DfecFormulacion,
                                                                                                                obj.cUsuarioCierre);
            }
            catch (Exception)
            {
                blnResultado = false;
                throw;
            }
            return blnResultado;
        }

        public DataSet Lista_FormulacionCabecera_Cege(string strAñoProceso, string strCege, int digito)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "[Formulacion].[spp_lst_mvto_Formulacion_Cabecera_Cege]", strAñoProceso, strCege, digito))
            {
                return ds;
            }
        }
        public Model.Formulacion_Cabecera_Cege Recupera_FormulacionCabecera_Cege(string strAñoProceso,
                                                                            string strVersion,
                                                                            string strPeriodo,
                                                                            string strCodCentroGestor
                                                                           )
        {
            DataTable dt; // = new DataTable();
            Model.Formulacion_Cabecera_Cege obj = new Model.Formulacion_Cabecera_Cege();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_mvto_Formulacion_Cabecera_CeGe", strAñoProceso,
                                                                                                                 strVersion,
                                                                                                                 strPeriodo,
                                                                                                                 strCodCentroGestor
                                           );

            if (dt.Rows.Count > 0)
            {
                obj.IidFormulacion_Cabecera_Cege = Convert.ToInt32(dt.Rows[0][0]); ;
                obj.CañoProceso = Convert.ToString(dt.Rows[0][1]);
                obj.Cversion = Convert.ToString(dt.Rows[0][2]);
                obj.DfecFormulacion = Convert.ToDateTime(dt.Rows[0][3]);
                obj.Tnota = Convert.ToString(dt.Rows[0][4]);
                obj.cCodCege = Convert.ToString(dt.Rows[0][5]);
            }
            return obj;
        }
        public DataSet Lista_Formulacion_Aprobacion_Cege(string strAñoProceso, string strCeGe, string strVersion, string strCodEmpleado)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "[Formulacion].[spp_lst_mvto_Formulacion_Aprobacion_Cege]", strAñoProceso,
                                                                                                                            strCeGe,
                                                                                                                            strVersion,
                                                                                                                            strCodEmpleado
                                                 )
                  )
            {
                return ds;
            }
        }

        public DataSet Lista_Version(string strAñoProceso)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "[Formulacion].[spp_lst_mvto_Formulacion_Version]", strAñoProceso))
            {
                return ds;
            }
        }

        #endregion

        #region Formulacion_Detalle
        public int Graba_FormulacionDetalle(Model.Formulacion_Detalle obj)
        {
            int intIdFormulacion_Detalle = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_ins_mvto_Formulacion_Detalle", obj.IidFormulacion_Cabecera,
                                                                                                                obj.CcodTipoFormulacion_Item,
                                                                                                                obj.CcodCentro,
                                                                                                                obj.CcodCege,
                                                                                                                obj.CcodCeco,
                                                                                                                obj.CcodSubActividad,
                                                                                                                obj.CcodPosPre,
                                                                                                                obj.FvalorPosPre,
                                                                                                                obj.IcodTipoInserccion
                                                );
                intIdFormulacion_Detalle = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdFormulacion_Detalle = 0;
            }
            return intIdFormulacion_Detalle;
        }

        #endregion

        #region Formulacion_Detalle_Ingreso
        public Boolean Elimina_FormulacionDetalle_Ingreso(int intIdFormulacion_Detalle_Proyecto)
        {

            Boolean blnResult = false;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Formulacion.spp_del_mvto_Formulacion_Detalle_Ingreso",
                                                intIdFormulacion_Detalle_Proyecto
                                                );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }


        public int Graba_FormulacionDetalle_Ingreso(Model.Formulacion_Detalle_Ingreso obj)
        {
            int intIdFormulacion_Detalle_Ingreso = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_ins_mvto_Formulacion_Detalle_Ingreso", obj.IidFormulacion_Detalle,
                                                                                                                        obj.CañoProceso,
                                                                                                                        obj.Cversion,
                                                                                                                        obj.CcodCeCo,
                                                                                                                        obj.CcodCeGe,
                                                                                                                        obj.CcodPosPre,
                                                                                                                        obj.CTipoOrden,
                                                                                                                        obj.CNumeroOrden,
                                                                                                                        obj.CcodFuenteFinanciamiento,
                                                                                                                        obj.CcodComponente,
                                                                                                                        obj.CcodTipoFormulacion,
                                                                                                                        obj.CcodProyecto,
                                                                                                                        obj.CcodClaseIngreso,
                                                                                                                        obj.TdescripcionIngreso,
                                                                                                                        obj.IcodTipoInserccion,
                                                                                                                        obj.FvalorAnterior,
                                                                                                                        obj.FvalorRestoActual,
                                                                                                                        obj.Fmes_01,
                                                                                                                        obj.Fmes_02,
                                                                                                                        obj.Fmes_03,
                                                                                                                        obj.Fmes_04,
                                                                                                                        obj.Fmes_05,
                                                                                                                        obj.Fmes_06,
                                                                                                                        obj.Fmes_07,
                                                                                                                        obj.Fmes_08,
                                                                                                                        obj.Fmes_09,
                                                                                                                        obj.Fmes_10,
                                                                                                                        obj.Fmes_11,
                                                                                                                        obj.Fmes_12,
                                                                                                                        obj.FvalorFormulacion,
                                                                                                                        obj.FvalorFormulacionUno,
                                                                                                                        obj.FvalorFormulacionDos,
                                                                                                                        obj.FvalorFormulacionTres,
                                                                                                                        obj.Cusuario
                                                );
                intIdFormulacion_Detalle_Ingreso = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdFormulacion_Detalle_Ingreso = 0;
            }
            return intIdFormulacion_Detalle_Ingreso;
        }

        public int Modifica_FormulacionDetalle_Ingreso(Model.Formulacion_Detalle_Ingreso obj)
        {
            int intIdFormulacion_Detalle_Ingreso = obj.IidFormulacion_Detalle_Ingreso;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_upd_mvto_Formulacion_Detalle_Ingreso", obj.IidFormulacion_Detalle_Ingreso,
                                                                                                                        obj.CañoProceso,
                                                                                                                        obj.Cversion,
                                                                                                                        obj.CcodCeCo,
                                                                                                                        obj.CcodCeGe,
                                                                                                                        obj.CcodPosPre,
                                                                                                                        obj.CTipoOrden,
                                                                                                                        obj.CNumeroOrden,
                                                                                                                        obj.CcodFuenteFinanciamiento,
                                                                                                                        obj.CcodComponente,
                                                                                                                        obj.CcodTipoFormulacion,
                                                                                                                        obj.CcodProyecto,
                                                                                                                        obj.CcodClaseIngreso,
                                                                                                                        obj.TdescripcionIngreso,
                                                                                                                        obj.IcodTipoInserccion,
                                                                                                                        obj.FvalorAnterior,
                                                                                                                        obj.FvalorRestoActual,
                                                                                                                        obj.Fmes_01,
                                                                                                                        obj.Fmes_02,
                                                                                                                        obj.Fmes_03,
                                                                                                                        obj.Fmes_04,
                                                                                                                        obj.Fmes_05,
                                                                                                                        obj.Fmes_06,
                                                                                                                        obj.Fmes_07,
                                                                                                                        obj.Fmes_08,
                                                                                                                        obj.Fmes_09,
                                                                                                                        obj.Fmes_10,
                                                                                                                        obj.Fmes_11,
                                                                                                                        obj.Fmes_12,
                                                                                                                        obj.FvalorFormulacion,
                                                                                                                        obj.FvalorFormulacionUno,
                                                                                                                        obj.FvalorFormulacionDos,
                                                                                                                        obj.FvalorFormulacionTres,
                                                                                                                        obj.Cusuario
                                                );
            }
            catch
            {
                intIdFormulacion_Detalle_Ingreso = 0;
            }
            return intIdFormulacion_Detalle_Ingreso;
        }


        public DataSet Lista_FormulacionDetalle_Ingreso(string strCodCompañia,
                                                         string strCodProyecto,
                                                         string strCodCentroGestor,
                                                         string strCodTipoFormulacion
                                        )
        {



            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_Formulacion_Detalle_Ingreso", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodProyecto", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.VarChar);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cCodProyecto"].Value = strCodProyecto;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        #endregion

        #region Formulacion_Detalle_Personal
        public Boolean Elimina_FormulacionDetalle_Personal(int intIdFormulacion_Detalle_Proyecto)
        {

            Boolean blnResult = false;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Formulacion.spp_del_mvto_Formulacion_Detalle_Personal",
                                                intIdFormulacion_Detalle_Proyecto
                                                );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }


        public int Graba_FormulacionDetalle_Personal(Model.Formulacion_Detalle_Personal obj)
        {
            int intIdFormulacion_Detalle_Personal = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_ins_mvto_Formulacion_Detalle_Personal", obj.IidFormulacion_Detalle,
                                                                                                                        obj.CañoProceso,
                                                                                                                        obj.Cversion,
                                                                                                                        obj.CcodCeCo,
                                                                                                                        obj.CcodCeGe,
                                                                                                                        obj.CcodPosPre,
                                                                                                                        obj.CTipoOrden,
                                                                                                                        obj.CNumeroOrden,
                                                                                                                        obj.CcodFuenteFinanciamiento,
                                                                                                                        obj.CcodConcepto,
                                                                                                                        obj.CcodTipoFormulacion,
                                                                                                                        obj.CcodProyecto,
                                                                                                                        obj.CcodClaseGasto,
                                                                                                                        obj.TdescripcionGasto,
                                                                                                                        obj.IcodTipoInserccion,
                                                                                                                        obj.FvalorAnterior,
                                                                                                                        obj.FvalorRestoActual,
                                                                                                                        obj.Fmes_01,
                                                                                                                        obj.Fmes_02,
                                                                                                                        obj.Fmes_03,
                                                                                                                        obj.Fmes_04,
                                                                                                                        obj.Fmes_05,
                                                                                                                        obj.Fmes_06,
                                                                                                                        obj.Fmes_07,
                                                                                                                        obj.Fmes_08,
                                                                                                                        obj.Fmes_09,
                                                                                                                        obj.Fmes_10,
                                                                                                                        obj.Fmes_11,
                                                                                                                        obj.Fmes_12,
                                                                                                                        obj.FvalorFormulacion,
                                                                                                                        obj.FvalorFormulacionUno,
                                                                                                                        obj.FvalorFormulacionDos,
                                                                                                                        obj.FvalorFormulacionTres,
                                                                                                                        obj.Cusuario
                                                );
                intIdFormulacion_Detalle_Personal = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdFormulacion_Detalle_Personal = 0;
            }
            return intIdFormulacion_Detalle_Personal;
        }

        public int Modifica_FormulacionDetalle_Personal(Model.Formulacion_Detalle_Personal obj)
        {
            int intIdFormulacion_Detalle_Personal = obj.IidFormulacion_Detalle_Personal;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_upd_mvto_Formulacion_Detalle_Personal", obj.IidFormulacion_Detalle_Personal,
                                                                                                                        obj.CañoProceso,
                                                                                                                        obj.Cversion,
                                                                                                                        obj.CcodCeCo,
                                                                                                                        obj.CcodCeGe,
                                                                                                                        obj.CcodPosPre,
                                                                                                                        obj.CTipoOrden,
                                                                                                                        obj.CNumeroOrden,
                                                                                                                        obj.CcodFuenteFinanciamiento,
                                                                                                                        obj.CcodConcepto,
                                                                                                                        obj.CcodTipoFormulacion,
                                                                                                                        obj.CcodProyecto,
                                                                                                                        obj.CcodClaseGasto,
                                                                                                                        obj.TdescripcionGasto,
                                                                                                                        obj.IcodTipoInserccion,
                                                                                                                        obj.FvalorAnterior,
                                                                                                                        obj.FvalorRestoActual,
                                                                                                                        obj.Fmes_01,
                                                                                                                        obj.Fmes_02,
                                                                                                                        obj.Fmes_03,
                                                                                                                        obj.Fmes_04,
                                                                                                                        obj.Fmes_05,
                                                                                                                        obj.Fmes_06,
                                                                                                                        obj.Fmes_07,
                                                                                                                        obj.Fmes_08,
                                                                                                                        obj.Fmes_09,
                                                                                                                        obj.Fmes_10,
                                                                                                                        obj.Fmes_11,
                                                                                                                        obj.Fmes_12,
                                                                                                                        obj.FvalorFormulacion,
                                                                                                                        obj.FvalorFormulacionUno,
                                                                                                                        obj.FvalorFormulacionDos,
                                                                                                                        obj.FvalorFormulacionTres,
                                                                                                                        obj.Cusuario
                                                );
            }
            catch
            {
                intIdFormulacion_Detalle_Personal = 0;
            }
            return intIdFormulacion_Detalle_Personal;
        }


        public DataSet Lista_FormulacionDetalle_Personal(string strCodCompañia,
                                                         string strCodCentroGestor,
                                                         string strCodTipoFormulacion
                                        )
        {



            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_Formulacion_Detalle_Personal", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.VarChar);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        #endregion

        #region Formulacion_Detalle_Proyecto
        public Boolean Elimina_FormulacionDetalle_Proyecto(int intIdFormulacion_Detalle_Proyecto)
        {

            Boolean blnResult = false;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Formulacion.spp_del_mvto_Formulacion_Detalle_Proyecto",
                                                intIdFormulacion_Detalle_Proyecto
                                                );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }


        public int Graba_FormulacionDetalle_Proyecto(Model.Formulacion_Detalle_Proyecto obj)
        {
            int intIdFormulacion_Detalle_Proyecto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_ins_mvto_Formulacion_Detalle_Proyecto", obj.IidFormulacion_Detalle,
                                                                                                                        obj.CañoProceso,
                                                                                                                        obj.Cversion,
                                                                                                                        obj.CcodCeCo,
                                                                                                                        obj.CcodCeGe,
                                                                                                                        obj.CcodPosPre,
                                                                                                                        obj.CTipoOrden,
                                                                                                                        obj.CNumeroOrden,
                                                                                                                        obj.CcodFuenteFinanciamiento,
                                                                                                                        obj.CcodComponente,
                                                                                                                        obj.CcodTipoFormulacion,
                                                                                                                        obj.CcodProyecto,
                                                                                                                        obj.CcodClaseGasto,
                                                                                                                        obj.TdescripcionGasto,
                                                                                                                        obj.IcodTipoInserccion,
                                                                                                                        obj.FvalorAnterior,
                                                                                                                        obj.FvalorRestoActual,
                                                                                                                        obj.Fmes_01,
                                                                                                                        obj.Fmes_02,
                                                                                                                        obj.Fmes_03,
                                                                                                                        obj.Fmes_04,
                                                                                                                        obj.Fmes_05,
                                                                                                                        obj.Fmes_06,
                                                                                                                        obj.Fmes_07,
                                                                                                                        obj.Fmes_08,
                                                                                                                        obj.Fmes_09,
                                                                                                                        obj.Fmes_10,
                                                                                                                        obj.Fmes_11,
                                                                                                                        obj.Fmes_12,
                                                                                                                        obj.FvalorFormulacion,
                                                                                                                        obj.FvalorFormulacionUno,
                                                                                                                        obj.FvalorFormulacionDos,
                                                                                                                        obj.FvalorFormulacionTres,
                                                                                                                        obj.Cusuario
                                                );
                intIdFormulacion_Detalle_Proyecto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdFormulacion_Detalle_Proyecto = 0;
            }
            return intIdFormulacion_Detalle_Proyecto;
        }

        public int Modifica_FormulacionDetalle_Proyecto(Model.Formulacion_Detalle_Proyecto obj)
        {
            int intIdFormulacion_Detalle_Proyecto = obj.IidFormulacion_Detalle_Proyecto;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_upd_mvto_Formulacion_Detalle_Proyecto", obj.IidFormulacion_Detalle_Proyecto,
                                                                                                                        obj.CañoProceso,
                                                                                                                        obj.Cversion,
                                                                                                                        obj.CcodCeCo,
                                                                                                                        obj.CcodCeGe,
                                                                                                                        obj.CcodPosPre,
                                                                                                                        obj.CTipoOrden,
                                                                                                                        obj.CNumeroOrden,
                                                                                                                        obj.CcodFuenteFinanciamiento,
                                                                                                                        obj.CcodComponente,
                                                                                                                        obj.CcodTipoFormulacion,
                                                                                                                        obj.CcodProyecto,
                                                                                                                        obj.CcodClaseGasto,
                                                                                                                        obj.TdescripcionGasto,
                                                                                                                        obj.IcodTipoInserccion,
                                                                                                                        obj.FvalorAnterior,
                                                                                                                        obj.FvalorRestoActual,
                                                                                                                        obj.Fmes_01,
                                                                                                                        obj.Fmes_02,
                                                                                                                        obj.Fmes_03,
                                                                                                                        obj.Fmes_04,
                                                                                                                        obj.Fmes_05,
                                                                                                                        obj.Fmes_06,
                                                                                                                        obj.Fmes_07,
                                                                                                                        obj.Fmes_08,
                                                                                                                        obj.Fmes_09,
                                                                                                                        obj.Fmes_10,
                                                                                                                        obj.Fmes_11,
                                                                                                                        obj.Fmes_12,
                                                                                                                        obj.FvalorFormulacion,
                                                                                                                        obj.FvalorFormulacionUno,
                                                                                                                        obj.FvalorFormulacionDos,
                                                                                                                        obj.FvalorFormulacionTres,
                                                                                                                        obj.Cusuario
                                                );
            }
            catch
            {
                intIdFormulacion_Detalle_Proyecto = 0;
            }
            return intIdFormulacion_Detalle_Proyecto;
        }


        public DataSet Lista_FormulacionDetalle_Proyecto(string strCodCompañia,
                                                         string strCodProyecto,
                                                         string strCodCentroGestor,
                                                         string strCodTipoFormulacion
                                        )
        {



            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_Formulacion_Detalle_Proyecto", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodProyecto", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.VarChar);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cCodProyecto"].Value = strCodProyecto;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }


        public DataSet Lista_FormulacionDetalle_Proyecto_Otros(string strCodCompañia,
                                                         string strCodCentroGestor,
                                                         string strCodTipoFormulacion
                                        )
        {



            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_Formulacion_Detalle_Proyecto_Otros", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.VarChar);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.VarChar);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        #endregion

        #region Formulacion_HojaTrabajo

        public List< Model.HojaTrabajo_Formato_Cabecera> lista_HojaTrabajo_Formato_Cabecera( string strCodEmpresa,
                                                                                            string strCodFormato
                                                                                          )
        {
            DataTable dt;

            dt = SqlHelper.ExecuteDataset(strConnection,
                                                "Formulacion.spp_lst_cnfg_HojaTrabajo_Formato_Cabecera",
                                                strCodEmpresa,
                                                 strCodFormato
                                                ).Tables[0];


            var lista = (from order in dt.AsEnumerable()
                         select new Model.HojaTrabajo_Formato_Cabecera
                         {
                             iIdFormato = order.Field<int>("iIdFormato"),
                             cCodFormato = order.Field<string>("cCodFormato"),
                             vNomFormato = order.Field<string>("vNomFormato"),
                             cCodTipoFOrmulacion = order.Field<string>("cCodTipoFOrmulacion"),
                             cCodSubTipoFormulacion = order.Field<string>("cCodSubTipoFormulacion"),
                             cCodCeGe = order.Field<string>("cCodCeGe"),
                             cCodCeCo = order.Field<string>("cCodCeCo"),
                             iFilaInicial = order.Field<int>("iFilaInicial"),
                             iColumnaInicial = order.Field<int>("iColumnaInicial"),
                             iColumnaPosPre = order.Field<int>("iColumnaPosPre"),
                             iColumnaCeCo = order.Field<int>("iColumnaCeCo"),
                             iColumnaDetalleGasto = order.Field<int>("iColumnaDetalleGasto")
                         }
                        ).ToList();

            return lista;
        }

        public Model.HojaTrabajo_Formato_Cabecera recupera_HojaTrabajo_Formato_Cabecera(string strCodEmpresa,
                                                                                            string strCodFormato
                                                                                          )
        {
            DataTable dt;

            dt = SqlHelper.ExecuteDataset(strConnection,
                                                "Formulacion.spp_sel_cnfg_HojaTrabajo_Formato_Cabecera",
                                                strCodEmpresa,
                                                 strCodFormato
                                                ).Tables[0];


            var formato = (from order in dt.AsEnumerable()
                         select new Model.HojaTrabajo_Formato_Cabecera
                         {
                             iIdFormato = order.Field<int>("iIdFormato"),
                             cCodFormato = order.Field<string>("cCodFormato"),
                             vNomFormato = order.Field<string>("vNomFormato"),
                             cCodTipoFOrmulacion = order.Field<string>("cCodTipoFOrmulacion"),
                             cCodSubTipoFormulacion = order.Field<string>("cCodSubTipoFormulacion"),
                             cCodCeGe = order.Field<string>("cCodCeGe"),
                             cCodCeCo = order.Field<string>("cCodCeCo"),
                             iFilaInicial = order.Field<int>("iFilaInicial"),
                             iColumnaInicial = order.Field<int>("iColumnaInicial"),
                             iColumnaPosPre = order.Field<int>("iColumnaPosPre"),
                             iColumnaCeCo = order.Field<int>("iColumnaCeCo"),
                             iColumnaDetalleGasto = order.Field<int>("iColumnaDetalleGasto")
                         }
                        ).FirstOrDefault();

            return formato;
        }

        public bool modifica_HojaTrabajo_Formato_Cabecera(Model.HojaTrabajo_Formato_Cabecera obj )
        {
            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_ins_cnfg_HojaTrabajo_Formato_Cabecera",
                                           obj.iIdFormato,
                                           obj.cCodFormato,
                                           obj.vNomFormato,
                                           obj.cCodTipoFOrmulacion,
                                           obj.cCodSubTipoFormulacion,
                                           obj.cCodCeGe,
                                           obj.cCodCeCo,
                                           obj.iFilaInicial,
                                           obj.iColumnaInicial,
                                           obj.iColumnaPosPre,
                                           obj.iColumnaCeCo,
                                           obj.iColumnaDetalleGasto
                                         );
            }
            catch (Exception)
            {
                blnResult = false;
            }

            return blnResult;
        }

        public List<Model.HojaTrabajo_Formato_Detalle> lista_HojaTrabajo_Formato_Detalle(string strCodEmpresa,
                                                                                    string strCodFormato
                                                                                  )
        {
            DataTable dt;

            dt = SqlHelper.ExecuteDataset(strConnection,
                                                "Formulacion.spp_lst_cnfg_HojaTrabajo_Formato_Detalle",
                                                 strCodEmpresa,
                                                 strCodFormato
                                                ).Tables[0];


            var lista = (from order in dt.AsEnumerable()
                         select new Model.HojaTrabajo_Formato_Detalle
                         {
                             iIdFormatoDetalle = order.Field<int>("iIdFormatoDetalle"),
                             cCodFormato = order.Field<string>("cCodFormato"),
                             cCodCampo = order.Field<string>("cCodCampo"),
                             vNomCampo = order.Field<string>("vNomCampo"),
                             vValCampo = order.Field<string>("vValCampo"),
                             iNumeroColumna = order.Field<int>("iNumeroColumna")
                         }
                        ).ToList();

            return lista;
        }

        public DataSet lista_HojaTrabajo_Formato_Detalle_Personal(string strCodEmpresa,
                                                                                    string strCodFormato
                                                                                  )
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                                "Formulacion.spp_sel_cnfg_HojaTrabajo_Formato_Detalle_Personal",
                                                 strCodEmpresa,
                                                 strCodFormato
                                                );


        }

        public int graba_HojaTrabajo_Formato_Detalle_Personal(Model.HojaTrabajo_Formato_Detalle obj)
        {
            int intIdDetalle = 0;
            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_ins_cnfg_HojaTrabajo_Formato_Detalle",
                                           obj.cCodFormato,
                                           obj.cCodCampo,
                                           obj.vNomCampo,
                                           obj.vValCampo,
                                           obj.cColumna
                                         );
                intIdDetalle = Convert.ToInt32( dt.Rows[0][0] );
            }
            catch (Exception)
            {
                intIdDetalle = 0;
            }

            return intIdDetalle;
        }

        public int modifica_HojaTrabajo_Formato_Detalle_Personal(Model.HojaTrabajo_Formato_Detalle obj)
        {
            int intIdDetalle = obj.iIdFormatoDetalle;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_upd_cnfg_HojaTrabajo_Formato_Detalle",
                                           obj.iIdFormatoDetalle,
                                           obj.cCodFormato,
                                           obj.cCodCampo,
                                           obj.vNomCampo,
                                           obj.vValCampo,
                                           obj.cColumna
                                         );
            }
            catch (Exception)
            {
                intIdDetalle = 0;
            }

            return intIdDetalle;
        }

        public bool elimina_HojaTrabajo_Formato_Detalle_Personal(int intIdDetalle)
        {
            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_del_cnfg_HojaTrabajo_Formato_Detalle",
                                           intIdDetalle
                                         );
            }
            catch (Exception)
            {
                blnResult = false;
            }

            return blnResult;
        }


        public DataSet Lista_CierreModificacionCentroGestor( string strCodCompañia,
                                                             string strAñoProceso,
                                                             string strVersion
                                                            )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_msto_CentroGestor_Cierre_Modificacion",
                                                    strCodCompañia,
                                                    strAñoProceso,
                                                    strVersion
                                                )
                  )
            {
                return ds;
            }
        }

        public DataSet Lista_CierreCentroGestor(string strCodCompañia,
                                    string strAñoProceso,
                                    string strVersion,
                                    string strPeriodo
                                  )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_msto_CentroGestor_Cierre",
                                                    strCodCompañia,
                                                    strAñoProceso,
                                                    strVersion,
                                                    strPeriodo
                                                )
                  )
            {
                return ds;
            }
        }

        public DataSet Lista_CierreCentroCosto(string strCodCompañia,
                                    string strAñoProceso,
                                    string strVersion,
                                    string strPeriodo
                                  )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_msto_CentroCosto_Cierre",
                                                    strCodCompañia,
                                                    strAñoProceso,
                                                    strVersion,
                                                    strPeriodo
                                                )
                  )
            {
                return ds;
            }
        }

        public DataSet Lista_AperturaCentroGestor(string strCodCompañia,
                                    string strAñoProceso,
                                    string strVersion,
                                    string strPeriodo
                                  )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_msto_CentroGestor_Apertura",
                                                    strCodCompañia,
                                                    strAñoProceso,
                                                    strVersion,
                                                    strPeriodo
                                                )
                  )
            {
                return ds;
            }
        }

        public DataSet Lista_AperturaCentroCosto(string strCodCompañia,
                                                string strAñoProceso,
                                                string strVersion,
                                                string strPeriodo
                                              )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_msto_CentroCosto_Apertura",
                                                    strCodCompañia,
                                                    strAñoProceso,
                                                    strVersion,
                                                    strPeriodo
                                                )
                  )
            {
                return ds;
            }
        }

        public DataSet Lista_AperturaEjecucionPresupuestal(string strCodCompañia,
                                                string strAñoProceso
                                              )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Formulacion.spp_Lista_mvto_EjecucionPresupuestal_Apertura",
                                                    strCodCompañia,
                                                    strAñoProceso
                                                )
                  )
            {
                return ds;
            }
        }

        public DataSet Lista_AperturaEjecucionIndicador(string strCodCompañia,
                                        string strAñoProceso
                                      )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "PlanEstrategico.spp_Lista_mvto_EjecucionIndicador_Apertura",
                                                    strCodCompañia,
                                                    strAñoProceso
                                                )
                  )
            {
                return ds;
            }
        }


        public Boolean Graba_CierreModificacionCentroGestor(string strCodCompañia,
                                                            string strAñoProceso,
                                                            string strVersion,
                                                            string strCodCege,
                                                            string strCodUsuario
                                                          )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_ins_mvto_ModificacionCentroGestor_Cierre]",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strVersion,
                                                strCodCege,
                                                strCodUsuario
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }
        public Boolean Graba_CierreCentroGestor(string strCodCompañia,
                                                string strAñoProceso,
                                                string strVersion,
                                                string strPeriodo,
                                                string strCodCege,
                                                string strCodUsuario
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_ins_mvto_CentroGestor_Cierre]",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strVersion,
                                                strPeriodo,
                                                strCodCege,
                                                strCodUsuario
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Graba_CierreCentroCosto(string strCodCompañia,
                                        string strAñoProceso,
                                        string strVersion,
                                        string strPeriodo,
                                        string strCodCeco,
                                        string strCodUsuario
                                      )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_ins_mvto_CentroCosto_Cierre]",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strVersion,
                                                strPeriodo,
                                                strCodCeco,
                                                strCodUsuario
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }


        public Boolean Graba_AperturaCentroGestor(string strCodCompañia,
                                        string strAñoProceso,
                                        string strVersion,
                                        string strPeriodo,
                                        string strCodCege,
                                        string strCodUsuario
                                      )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_ins_mvto_CentroGestor_Apertura]",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strVersion,
                                                strPeriodo,
                                                strCodCege,
                                                strCodUsuario
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Graba_AperturaCentroCosto(string strCodCompañia,
                                        string strAñoProceso,
                                        string strVersion,
                                        string strPeriodo,
                                        string strCodCeCo,
                                        string strCodUsuario
                                      )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_ins_mvto_CentroCosto_Apertura]",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strVersion,
                                                strPeriodo,
                                                strCodCeCo,
                                                strCodUsuario
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Graba_AperturaEjecucionPresupuestal(string strCodCompañia,
                                string strAñoProceso,
                                string strMes,
                                string strCodEmpleado
                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "Formulacion.spp_ins_mvto_EjecucionPresupuestal_Apertura",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strMes,
                                                strCodEmpleado
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Graba_AperturaEjecucionIndicador(string strCodCompañia,
                        string strAñoProceso,
                        string strMes,
                        string strCodEmpleado
                      )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "PlanEstrategico.spp_ins_mvto_EjecucionIndicador_Apertura",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strMes,
                                                strCodEmpleado
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }


        public Boolean Elimina_CierreModificacionCentroGestor(string strCodCompañia,
                                        string strAñoProceso,
                                        string strVersion,
                                        string strCodCege
                                      )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "Formulacion.spp_del_mvto_ModificacionCentroGestor_Cierre",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strVersion,
                                                strCodCege
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Elimina_CierreCentroGestor(string strCodCompañia,
                                                string strAñoProceso,
                                                string strVersion,
                                                string strPeriodo,
                                                string strCodCege
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_del_mvto_CentroGestor_Cierre]",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strVersion,
                                                strPeriodo,
                                                strCodCege
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Elimina_CierreCentroCosto(string strCodCompañia,
                                        string strAñoProceso,
                                        string strVersion,
                                        string strPeriodo,
                                        string strCodCeco
                                      )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_del_mvto_CentroCosto_Cierre]",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strVersion,
                                                strPeriodo,
                                                strCodCeco
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }


        public Boolean Elimina_AperturaCentroGestor(string strCodCompañia,
                                        string strAñoProceso,
                                        string strVersion,
                                        string strPeriodo,
                                        string strCodCege
                                      )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_del_mvto_CentroGestor_Apertura]",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strVersion,
                                                strPeriodo,
                                                strCodCege
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Elimina_AperturaCentroCosto(string strCodCompañia,
                                        string strAñoProceso,
                                        string strVersion,
                                        string strPeriodo,
                                        string strCodCeCo
                                      )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Formulacion].[spp_del_mvto_CentroCosto_Apertura]",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strVersion,
                                                strPeriodo,
                                                strCodCeCo
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Elimina_AperturaEjecucionPresupuestal(string strCodCompañia,
                                        string strAñoProceso,
                                        string strMes
                                      )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "Formulacion.spp_del_mvto_EjecucionPresupuestal_Apertura",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strMes
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Elimina_AperturaEjecucionIndicador(string strCodCompañia,
                                        string strAñoProceso,
                                        string strMes
                                      )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "PlanEstrategico.spp_del_mvto_EjecucionIndicador_Apertura",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strMes
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }
        public Boolean Cierra_CierreVersion_GeneraPIA(string strCodCompañia,
                                            string strAñoProceso,
                                            string strPeriodo,
                                            string strVersion
                                         )
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_cnfg_mvto_HojaTrabajo_CierreVersion_GeneraPIA",
                                           strCodCompañia,
                                           strAñoProceso,
                                           strPeriodo,
                                           strVersion
                                          );

            }
            catch (Exception)
            {
                blnResult = false;
            }
            return blnResult;
        }

        public int Cierra_CierreVersion_CentroGestor(string strCodCompañia,
                                                            string strAñoProceso,
                                                            string strVersion,
                                                            string strPeriodo,
                                                            string strCodCentroGestor
                                                         )
        {
            int intResult = -1;
            DataTable dt;
            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_cnfg_mvto_CierreVersion_CentroGestor", strCodCompañia,
                                                                                                                strAñoProceso,
                                                                                                                 strVersion,
                                                                                                                 strPeriodo,
                                                                                                                 strCodCentroGestor
                                           );
            if (dt.Rows.Count > 0)
            {

                intResult = Convert.ToInt32( dt.Rows[0][0] ); 
            }

            return intResult;
        }

        public int Cierra_CierreVersion_CentroCosto(string strCodCompañia,
                                                    string strAñoProceso,
                                                    string strVersion,
                                                    string strPeriodo,
                                                    string strCodCentroGestor,
                                                    string strCodCentroCosto
                                                 )
        {
            int intResult = -1;

            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_cnfg_mvto_CierreVersion_CentroCosto", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroCosto", SqlDbType.Char);


            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodCentroCosto"].Value = strCodCentroCosto;


            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            if ( ds.Tables[0].Rows.Count > 0)
            {

                intResult = Convert.ToInt32(ds.Tables[0].Rows[0][0]);
            }

            return intResult;
        }

        public List<Model.Mensaje> Valida_Configuracion_CentroCosto(string strCodCompañia,
                                                    string strAñoProceso,
                                                    string strVersion,
                                                    string strPeriodo,
                                                    string strCodCentroGestor,
                                                    string strCodCentroCosto,
                                                    string strCodTipoFormulacion
                                                 )
        {

            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_cnfg_ValidaConfiguracion", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroCosto", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);


            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodCentroCosto"].Value = strCodCentroCosto;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;


            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);


            var lista = (from order in ds.Tables[0].AsEnumerable()
                         select new Model.Mensaje
                         {
                             Notificacion = order.Field<string>("Notificacion")
                         }
            ).ToList();

            return lista;
        }


        public int Cierra_CierrePeriodo_EjecucionPresupuestal(string strCodCompañia,
                                            string strAñoProceso,
                                            string strMes
                                         )
        {
            int intResult = -1;
            DataTable dt;
            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_cnfg_mvto_CierrePeriodo_EjecucionPresupuestal", strCodCompañia,
                                                                                                                strAñoProceso,
                                                                                                                 strMes
                                                                                            );
            if (dt.Rows.Count > 0)
            {

                intResult = Convert.ToInt32(dt.Rows[0][0]);
            }

            return intResult;
        }

        public DataTable Combo_PeriodoPresupuesto(string strCodCompañia, string strPeriodo)
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_cbo_ctrl_HojaTrabajo_Periodo", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds.Tables[0];
        }

        public DataTable Combo_PeriodoAjuste(string strCodCompañia)
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_cbo_ctrl_HojaTrabajo_Ajuste_Año", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds.Tables[0];
        }

        public string Recupera_PeriodoAjuste(string strCodCompañia)
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_sel_ctrl_HojaTrabajo_Ajuste_Año", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return Convert.ToString( ds.Tables[0].Rows[0]["cAñoProceso"] );
        }


        public DataTable Combo_PeriodoEjecucionPresupuestal(string strCodCompañia)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_ctrl_EjecucionPresupuestal_Periodo", strCodCompañia))
            {
                return ds.Tables[0];
            }
        }

        public DataTable Combo_PeriodoEjecucionIndicador(string strCodCompañia)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "PlanEstrategico.spp_cbo_ctrl_EjecucionIndicador_Periodo", strCodCompañia))
            {
                return ds.Tables[0];
            }
        }

        public string Recupera_PeriodoEjecucionPresupuestal_Ultimo(string strCodCompañia)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_sel_ctrl_EjecucionPresupuestal_Periodo_ultimo", strCodCompañia))
            {
                return Convert.ToString( ds.Tables[0].Rows[0][0] );
            }
        }

        public int Recupera_IDEjecucionPresupuestal_Ultimo(string strCodCompañia)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_sel_ctrl_EjecucionPresupuestal_ID_ultimo", strCodCompañia))
            {
                return Convert.ToInt32(ds.Tables[0].Rows[0][0]);
            }
        }

        public bool Elimina_EjecucionPresupuestal_Comercial(int intIdCabecera, string strTipoFormato)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_del_mvto_EjecucionPresupuestal_Detalle",
                                                 intIdCabecera,
                                                 strTipoFormato
                                                 ))
            {
                return true;
            }
        }
        public bool Graba_EjecucionPresupuestal_Comercial_F01(Model.FormatoEjecucion_F01 obj)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_ins_mvto_EjecucionPresupuestal_Detalle_F01",
                                                 obj.iIdCabecera,
                                                 obj.cCodTipoFormato,
                                                 obj.cCodSubTipoFormato,
                                                 obj.cCodCuentaContable,
                                                 obj.vNomCuentaContable,
                                                 obj.cCodConcepto,
                                                 obj.vNomConcepto,
                                                 obj.fBaseImponible_Antes,
                                                 obj.fIgv_Antes,
                                                 obj.fOtros_Antes,
                                                 obj.fBaseImponible,
                                                 obj.fIgv,
                                                 obj.fOtros
                                                 ))
            {
                return true;
            }
        }

        public bool Graba_EjecucionPresupuestal_Comercial_F02(Model.FormatoEjecucion_F02 obj)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_ins_mvto_EjecucionPresupuestal_Detalle_F02",
                                                 obj.iIdCabecera,
                                                 obj.cCodTipoFormato,
                                                 obj.cCodSubTipoFormato,
                                                 obj.cCodCuentaContable,
                                                 obj.vNomCuentaContable,
                                                 obj.fDebe,
                                                 obj.fHaber
                                                 ))
            {
                return true;
            }
        }

        public bool Graba_EjecucionPresupuestal_Comercial_F03(Model.FormatoEjecucion_F03 obj)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_ins_mvto_EjecucionPresupuestal_Detalle_F03",
                                                 obj.iIdCabecera,
                                                 obj.cCodTipoFormato,
                                                 obj.cCodSubTipoFormato,
                                                 obj.cCodCuentaContable,
                                                 obj.cNumDocumento,
                                                 obj.dFecDocumento,
                                                 obj.dFecContabilizacion,
                                                 obj.cCodClaseDocumento,
                                                 obj.vAsignacion,
                                                 obj.vReferencia,
                                                 obj.cCuentaAcreedorNIF,
                                                 obj.vCuentaAcreedorNombre,
                                                 obj.vTexto,
                                                 obj.vSegmento,
                                                 obj.cMoneda,
                                                 obj.fImporteMoneda,
                                                 obj.fImporteLibroMayor,
                                                 obj.vNombreUsuario
                                                 ))
            {
                return true;
            }
        }

        public bool Graba_EjecucionPresupuestal_Gasto_F04(Model.FormatoEjecucion_F04 obj)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_ins_mvto_EjecucionPresupuestal_Detalle_F04",
                                                 obj.iIdCabecera,
                                                 obj.cCodTipoFormato,
                                                 obj.cCodSubTipoFormato,
                                                    obj.vTipoValor,
                                                    obj.cDocPrecedente,
                                                    obj.cDocReferenciaCP,
                                                    obj.cDocReferencia,
                                                    obj.cReferenciaPago,
                                                    obj.cReferencia,
                                                    obj.cDocControlPres,
                                                    obj.dFecActualizacion,
                                                    obj.cNumPosicionDocRef,
                                                    obj.cClaseImporte,
                                                    obj.cCodPosPre,
                                                    obj.cCodCeGe,
                                                    obj.fEjecutado,
                                                    obj.vTexto,
                                                    obj.fComprometido,
                                                    obj.cFondo,
                                                    obj.cCuentaMayor,
                                                    obj.cCLiente,
                                                    obj.cAcreedor,
                                                    obj.vNombre1,
                                                    obj.vNombre,
                                                    obj.cIndicadorEstadistico,
                                                    obj.cNivSaldo,
                                                    obj.cPosicionIncluida,
                                                    obj.cClaseDocumento,
                                                    obj.cOrden
                                                 ))
            {
                return true;
            }
        }

        public bool Graba_EjecucionPresupuestal_Gasto_F05(Model.FormatoEjecucion_F05 obj)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_ins_mvto_EjecucionPresupuestal_Detalle_F05",
                                                 obj.iIdCabecera,
                                                 obj.cCodTipoFormato,
                                                 obj.cCodSubTipoFormato,
                                                 obj.cCodCeGe,
                                                 obj.cOrden,
                                                 obj.fImpSoles,
                                                 obj.cCodPosPre,
                                                 obj.cCuenta,
                                                 obj.cNumDocumento,
                                                 obj.dFecDocumento,
                                                 obj.vTexto
                                                 ))
            {
                return true;
            }
        }

        public bool Graba_EjecucionPresupuestal_Gasto_F06(Model.FormatoEjecucion_F06 obj)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_ins_mvto_EjecucionPresupuestal_Detalle_F06",
                                                 obj.iIdCabecera,
                                                 obj.cCodTipoFormato,
                                                 obj.cCodSubTipoFormato,
                                                 obj.vTipoValor,
                                                 obj.cDocPrecedente,
                                                    obj.cDocPrecedenteCP,
                                                    obj.cReferencia,
                                                    obj.cDocReferenciaPago,
                                                    obj.cDocReferencia,
                                                    obj.cDocControl,
                                                    obj.dFecActualizacion,
                                                    obj.cNumPosicionDocRef,
                                                    obj.cClaseImporte,
                                                    obj.cCodPosPre,
                                                    obj.cCodCeGe,
                                                    obj.fEjecutado,
                                                    obj.vTexto,
                                                    obj.fComprometido,
                                                    obj.cFondo,
                                                    obj.cCuentaMayor,
                                                    obj.cCliente,
                                                    obj.cAcreedor,
                                                    obj.vNombre1,
                                                    obj.vNombre,
                                                    obj.cIndicadorEstadistico,
                                                    obj.cNivSaldo,
                                                    obj.cPosicionConcluida,
                                                    obj.cClaseDocumento,
                                                    obj.cOrden

                                                 ))
            {
                return true;
            }
        }

        public bool Graba_EjecucionPresupuestal_Gasto_F07(Model.FormatoEjecucion_F07 obj)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_ins_mvto_EjecucionPresupuestal_Detalle_F07",
                                                 obj.iIdCabecera,
                                                 obj.cCodTipoFormato,
                                                 obj.cCodSubTipoFormato,
                                                 obj.cOrden,
                                                 obj.cNumDocumento,
                                                 obj.cCodClaseCoste,
                                                 obj.fEjecutado,
                                                 obj.vTextoBreve,
                                                 obj.dFecEntrada,
                                                 obj.cCodMaterial
                                                 ))
            {
                return true;
            }
        }

        public bool Graba_EjecucionPresupuestal_Gasto_F08(Model.FormatoEjecucion_F08 obj)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_ins_mvto_EjecucionPresupuestal_Detalle_F08",
                                                 obj.iIdCabecera,
                                                 obj.cCodTipoFormato,
                                                 obj.cCodSubTipoFormato,
                                                 obj.cCodClaseOrden,
                                                 obj.cCodPosPre,
                                                 obj.fEjecutado
                                                 ))
            {
                return true;
            }
        }

        public bool Graba_EjecucionPresupuestal_Gasto_F09(Model.FormatoEjecucion_F09 obj)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_ins_mvto_EjecucionPresupuestal_Detalle_F09",
                                                 obj.iIdCabecera,
                                                 obj.cCodTipoFormato,
                                                 obj.cCodSubTipoFormato,
                                                 obj.cCodCeGe,
                                                 obj.cCodPosPre,
                                                 obj.fPresupuestoActual,
                                                 obj.fPresupuestoInicial
                                                 ))
            {
                return true;
            }
        }

        public bool Graba_EjecucionPresupuestal_Gasto_F10(Model.FormatoEjecucion_F10 obj)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                 "Formulacion.spp_ins_mvto_EjecucionPresupuestal_Detalle_F10",
                                                 obj.iIdCabecera,
                                                 obj.cCodTipoFormato,
                                                 obj.cCodSubTipoFormato,
                                                 obj.cCodClaseOrden,
                                                 obj.cOrden,
                                                 obj.fPresupuestoActual,
                                                 obj.fPresupuestoInicial
                                                 ))
            {
                return true;
            }
        }

        public DataTable Combo_PIA_PeriodoPresupuesto(string strCodCompañia)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_ctrl_Pia_Periodo", strCodCompañia))
            {
                return ds.Tables[0];
            }
        }


        public DataTable Combo_PeriodoPia(string strCodCompañia)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_ctrl_PIA_Periodo ", strCodCompañia))
            {
                return ds.Tables[0];
            }
        }

        public DataTable Combo_VersionPia(string strCodCompañia, string strAñoProceso)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_ctrl_PIA_Version ", strCodCompañia, strAñoProceso))
            {
                return ds.Tables[0];
            }
        }

        public DataTable Combo_PeriodoEjecucionPresupuestal_Mes(string strCodCompañia, string strAñoProceso)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "[Formulacion].[spp_cbo_ctrl_EjecucionPresupuestal_Periodo_Mes]", strCodCompañia, strAñoProceso))
            {
                return ds.Tables[0];
            }
        }

        public DataTable Combo_PeriodoEjecucionPresupuestal_Validacion_Mes(string strCodCompañia, string strAñoProceso)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "[Formulacion].[spp_cbo_ctrl_EjecucionPresupuestal_Validacion_Periodo_Mes]", strCodCompañia, strAñoProceso))
            {
                return ds.Tables[0];
            }
        }

        public DataTable Combo_PeriodoPresupuesto_Version(string strCodCompañia, string strPeriodo, string strAñoProceso)
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_cbo_ctrl_HojaTrabajo_Periodo_Version", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds.Tables[0];
        }

        public int Recupera_PeriodoPresupuesto_IdCabecera(string strCodCompañia,
                                                          string strPeriodo,
                                                          string strAñoProceso,
                                                          string strVersion
                                                        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_cbo_ctrl_HojaTrabajo_Periodo_IdCabecera", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return Convert.ToInt32(ds.Tables[0].Rows[0][0]);
        }

        public int Recupera_PeriodoEjecucionPresupuestal_IdCabecera(string strCodCompañia,
                                                          string strAñoProceso,
                                                          string strMes
                                                        )
        {
            DataTable dt = new DataTable();
            using (dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "Formulacion.spp_cbo_ctrl_EjecucionPresupuestal_Periodo_IdCabecera",
                                                strCodCompañia,
                                                strAñoProceso, strMes
                                                ))
            {
                return Convert.ToInt32(dt.Rows[0][0]);
            }
        }

        public Boolean Recupera_VerificaCierrePeriodoModificacion(string strCodEmpresa,
                                                                          string strAñoProceso
                                                                 )
        {
            DataTable dt; // = new DataTable();
            Boolean blnResult;


            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_ctrl_VerificaCierrePeriodoProceso_HojaTrabajo", strCodEmpresa, strAñoProceso);
            blnResult = Convert.ToBoolean(dt.Rows[0][0]);
            return blnResult;
        }

        public Model.PeriodoCierreModificacion Recupera_CierrePeriodoModificacion(string strCodEmpresa)
        {
            DataTable dt; // = new DataTable();
            Model.PeriodoCierreModificacion obj = new Model.PeriodoCierreModificacion();


            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_ctrl_CierrePeriodoProceso_HojaTrabajo", strCodEmpresa);

            if (dt.Rows.Count == 0)
            {
                obj.cPeriodoModificacion = "";
                obj.cPeriodoFormulacion = "";
            }
            else
            {
                obj.cPeriodoModificacion = Convert.ToString(dt.Rows[0]["cPeriodoModificacion"]); ;
                obj.cPeriodoFormulacion = Convert.ToString(dt.Rows[0]["cPeriodoFormulacion"]);
            }
            return obj;
        }
        public DataSet Ayuda_Proyecto_HojaTrabajo(string strCodEmpresa,
                                      string strCodCentroGestor
            )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_msto_Proyecto_Formulacion_HojaTrabajo",
                                                            strCodEmpresa,
                                                            strCodCentroGestor
                                                            );
        }

        //public DataSet Ayuda_ClaseGasto()
        //{
        //    return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_msto_ClaseGasto"
        //                                                    );
        //}
        public DataSet Ayuda_Proyecto_Componente_HojaTrabajo(string strCodEmpresa,
                                      string strCodCentroGestor
            )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_msto_Componente_Formulacion_HojaTrabajo",
                                                            strCodEmpresa,
                                                            strCodCentroGestor
                                                            );
        }
        //public DataSet Ayuda_Proyecto_FuenteFinanciamiento_HojaTrabajo(string strCodEmpresa,
        //                             string strCodCentroGestor
        //   )
        //{
        //    return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_msto_FuenteFinanciamiento_Formulacion_HojaTrabajo",
        //                                                    strCodEmpresa,
        //                                                    strCodCentroGestor
        //                                                    );
        //}

        public DataSet Ayuda_Formulacion_HojaTrabajo(string strCodEmpresa, string strTipoProyecto)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_mvto_Formulacion_HojaTrabajo",
                                                            strCodEmpresa,
                                                            strTipoProyecto
                                                            );
        }

        public DataSet Lista_Formulacion_HojaTrabajo_Servicio(string strCodCompañia,
                                                string strAñoProceso,
                                                string strVersion,
                                                string strPeriodo,
                                                string strCodProyecto,
                                                string strCodCentroGestor,
                                                string strCodTipoFormulacion
                                            )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_lst_mvto_Formulacion_HojaTrabajo_Servicio",
                                                            strCodCompañia,
                                                        strAñoProceso,
                                                        strVersion,
                                                        strPeriodo,
                                                        strCodProyecto,
                                                        strCodCentroGestor,
                                                        strCodTipoFormulacion
                                                            );
        }

        public DataSet Lista_Formulacion_HojaTrabajo(string strCodCompañia,
                                                        string strAñoProceso,
                                                        string strVersion,
                                                        string strPeriodo,
                                                        string strCodProyecto,
                                                        string strCodCentroGestor,
                                                        string strCodTipoFormulacion
                                                    )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_lst_mvto_Formulacion_HojaTrabajo",
                                                            strCodCompañia,
                                                        strAñoProceso,
                                                        strVersion,
                                                        strPeriodo,
                                                        strCodProyecto,
                                                        strCodCentroGestor,
                                                        strCodTipoFormulacion
                                                            );
        }

        public DataSet Lista_Formulacion_Inversion_HojaTrabajo(string strCodCompañia,
                                                string strAñoProceso,
                                                string strVersion,
                                                string strPeriodo,
                                                string strCodProyecto,
                                                string strCodCentroGestor,
                                                string strCodCentroCosto,
                                                string strCodTipoFormulacion,
                                                string strCodSubTipoFormulacion
                                            )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_lst_mvto_Formulacion_Inversion_HojaTrabajo",
                                                            strCodCompañia,
                                                        strAñoProceso,
                                                        strVersion,
                                                        strPeriodo,
                                                        strCodProyecto,
                                                        strCodCentroGestor,
                                                        strCodCentroCosto,
                                                        strCodTipoFormulacion,
                                                        strCodSubTipoFormulacion
                                                            );
        }

        public DataSet Lista_HojaTrabajo_Formulacion(string strCodCompañia,
                                                string strAñoProceso,
                                                string strVersion,
                                                string strPeriodo,
                                                string strCodProyecto,
                                                string strCodCentroGestor,
                                                string strCodCentroCosto,
                                                string strCodTipoFormulacion,
                                                string strCodSubTipoFormulacion,
                                                bool blnManejaVariosCentroCostos
                                            )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_HojaTrabajo_Formulacion", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodProyecto", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroCosto", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodSubTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@bManejaVariosCentroCosto", SqlDbType.Bit);


            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cCodProyecto"].Value = strCodProyecto;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodCentroCosto"].Value = strCodCentroCosto;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;
            da.SelectCommand.Parameters["@cCodSubTipoFormulacion"].Value = strCodSubTipoFormulacion;
            da.SelectCommand.Parameters["@bManejaVariosCentroCosto"].Value = blnManejaVariosCentroCostos;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;
        }

        public DataSet Lista_HojaTrabajo_Configuracion(string strCodCompañia,
                                        string strCodTipoFormulacion,
                                        string strCodSubTipoFormulacion,
                                        string strCodTipoConfiguracion
                                    )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_cnfg_control_hojatrabajo_TipoConfiguracion", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodSubTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoConfiguracion", SqlDbType.Char);


            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;
            da.SelectCommand.Parameters["@cCodSubTipoFormulacion"].Value = strCodSubTipoFormulacion;
            da.SelectCommand.Parameters["@cCodTipoConfiguracion"].Value = strCodTipoConfiguracion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;
        }


        public DataSet Lista_HojaTrabajo_EjecucionPresupuestal(string strCodCompañia,
                                                string strAñoProceso,
                                                string strMes
                                            )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_lst_mvto_EjecucionPresupuestal",
                                                            strCodCompañia,
                                                        strAñoProceso,
                                                        strMes
                                                            );
        }

        public DataSet Lista_FormatoFormulacion_Proyecto(string strCodCompañia,
                                        string strAñoProceso,
                                        string strCodCentroGestor,
                                        string strCodCentroCosto
                                    )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_mvto_FormatoFormulacion_Proyecto",
                                                            strCodCompañia,
                                                        strAñoProceso,
                                                        strCodCentroGestor,
                                                        strCodCentroCosto
                                                            );
        }

        public int Graba_FormatoFormulacion_Proyecto(Model.Formato_Proyecto MHTD)
        {
            DataTable dt = new DataTable();
            int iIdFormato = 0;
            dt = SqlHelper.ExecuteDataset(strConnection, 
                                            "Proyecto.spp_ins_mvto_FormatoFormulacion_Proyecto",
                                            MHTD.cCodEmpresa,
                                            MHTD.cAñoProceso,
                                            MHTD.cCodCeGe,
                                            MHTD.cCodCeCo,
                                            MHTD.cOrdenInversion,
                                            MHTD.cCodIdea,
                                            MHTD.cCodUnico,
                                            MHTD.cEsTransferencia,
                                            MHTD.cTipoInversion,
                                            MHTD.cNaturaleza,
                                            MHTD.vNombreInversion,
                                            MHTD.cDepartamento,
                                            MHTD.cProvincia,
                                            MHTD.cDistrito,
                                            MHTD.fCostoInversion,
                                            MHTD.cModalidadEjecucion,
                                            MHTD.cUnidadEjecutoraInversion,
                                            MHTD.cUnidadEjecutoraPresupuesto,
                                            MHTD.cFuenteFinanciamiento,
                                            MHTD.dFechaInicioEjecucion,
                                            MHTD.dFechaFinalEjecucion
                                                            ).Tables[0];

            if (dt.Rows.Count > 0)
            {
                iIdFormato = Convert.ToInt32(dt.Rows[0][0]);
            }

            return iIdFormato;
        }

        public int Modifica_FormatoFormulacion_Proyecto(Model.Formato_Proyecto MHTD)
        {
            DataTable dt = new DataTable();
            int iIdFormato = MHTD.iIdTraslado;
            SqlHelper.ExecuteNonQuery(strConnection,
                                            "Proyecto.spp_upd_mvto_FormatoFormulacion_Proyecto",
                                            MHTD.iIdTraslado,
                                            MHTD.cCodEmpresa,
                                            MHTD.cAñoProceso,
                                            MHTD.cCodCeGe,
                                            MHTD.cCodCeCo,
                                            MHTD.cOrdenInversion,
                                            MHTD.cCodIdea,
                                            MHTD.cCodUnico,
                                            MHTD.cEsTransferencia,
                                            MHTD.cTipoInversion,
                                            MHTD.cNaturaleza,
                                            MHTD.vNombreInversion,
                                            MHTD.cDepartamento,
                                            MHTD.cProvincia,
                                            MHTD.cDistrito,
                                            MHTD.fCostoInversion,
                                            MHTD.cModalidadEjecucion,
                                            MHTD.cUnidadEjecutoraInversion,
                                            MHTD.cUnidadEjecutoraPresupuesto,
                                            MHTD.cFuenteFinanciamiento,
                                            MHTD.dFechaInicioEjecucion,
                                            MHTD.dFechaFinalEjecucion
                                                            );


            return iIdFormato;
        }

        public bool Elimina_FormatoFormulacion_Proyecto(int intIdTraslado)
        {
            DataTable dt = new DataTable();
            SqlHelper.ExecuteNonQuery(strConnection,
                                            "Proyecto.spp_del_mvto_FormatoFormulacion_Proyecto",
                                            intIdTraslado);


            return true;
        }



        public DataSet Lista_ReFormulacion_HojaTrabajo(string strCodCompañia,
                                                        string strAñoProceso,
                                                        string strVersion,
                                                        string strPeriodo,
                                                        string strCodProyecto,
                                                        string strCodCentroGestor,
                                                        string strCodTipoFormulacion
                                                    )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_lst_mvto_ReFormulacion_HojaTrabajo",
                                                            strCodCompañia,
                                                        strAñoProceso,
                                                        strVersion,
                                                        strPeriodo,
                                                        strCodProyecto,
                                                        strCodCentroGestor,
                                                        strCodTipoFormulacion
                                                            );
        }

        public Model.Formulacion_HojaTrabajo_Cabecera Recupera_FormulacionHojaTrabajo_Cabecera(string strAñoProceso)
        {
            DataTable dt; // = new DataTable();
            Model.Formulacion_HojaTrabajo_Cabecera obj = new Model.Formulacion_HojaTrabajo_Cabecera();


            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_mvto_Formulacion_HojaTrabajo_Cabecera", strAñoProceso);

            if (dt.Rows.Count == 0)
            {
                obj.IidCabecera = 0;
                obj.CañoProceso = "";
                obj.Cversion = "";
                obj.Cperiodo = "";
                obj.DfecFormulacion = DateTime.Today;
                obj.Tnota = "";
                obj.Bactivo = false;
            }
            else
            {
                obj.IidCabecera = Convert.ToInt32(dt.Rows[0]["IidCabecera"]); ;
                obj.CañoProceso = Convert.ToString(dt.Rows[0]["CañoProceso"]);
                obj.Cversion = Convert.ToString(dt.Rows[0]["Cversion"]);
                obj.Cperiodo = Convert.ToString(dt.Rows[0]["Cperiodo"]);
                obj.DfecFormulacion = Convert.ToDateTime(dt.Rows[0]["DfecFormulacion"]);
                obj.Tnota = Convert.ToString(dt.Rows[0]["Tnota"]);
                obj.Bactivo = Convert.ToBoolean(dt.Rows[0]["Bactivo"]);
            }
            return obj;
        }

        public DataTable Combo_AñoProceso_HojaTrabajo(string strCodCompañia)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "[Formulacion].[spp_cbo_mvto_HojaTrabajo_AñoProceso]", strCodCompañia))
            {
                return ds.Tables[0];
            }
        }

        public DataTable Combo_Periodo_HojaTrabajo(string strAñoProceso)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "[Formulacion].[spp_cbo_mvto_HojaTrabajo_AñoPeriodo]", strAñoProceso))
            {
                return ds.Tables[0];
            }
        }

        public DataTable Combo_AñoProceso_GeneraSaldo(string strCodCompañia)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "[Formulacion].[spp_cbo_mvto_HojaTrabajo_AñoProceso_GeneraSaldo]", strCodCompañia))
            {
                return ds.Tables[0];
            }
        }

        public DataTable Combo_Version_GeneraSaldo(string strCodCompañia, string strAñoProceso)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "[Formulacion].[spp_cbo_mvto_HojaTrabajo_AñoVersion_GeneraSaldo]", strCodCompañia, strAñoProceso))
            {
                return ds.Tables[0];
            }
        }
        public DataTable Combo_Periodo_GeneraSaldo(string strCodCompañia, string strAñoProceso)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "[Formulacion].[spp_cbo_mvto_HojaTrabajo_AñoPeriodo_GeneraSaldo]", strCodCompañia, strAñoProceso))
            {
                return ds.Tables[0];
            }
        }


        public int GrabaHojaTrabajo_Configuracion(Model.Formulacion_HojaTrabajo_Configuracion obj)
        {

            int intIdItem = 0;

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_ins_mvto_HojaTrabajo_Configuracion",
                                            obj.IidDetalle,
                                            obj.Ccolumna,
                                            obj.VnombreColumna,
                                            obj.Vmensaje,
                                            obj.Cclave,
                                            obj.CtipoDato,
                                            obj.cActivo
                                         );

                intIdItem = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch (Exception e)
            {
                e.ToString();
                intIdItem = 0;
            }

            return intIdItem;
        }

        public int ModificaHojaTrabajo_Configuracion(Model.Formulacion_HojaTrabajo_Configuracion obj)
        {

            int intIdItem = 0;

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_upd_mvto_HojaTrabajo_Configuracion",
                                            obj.IidItem,
                                            obj.Ccolumna,
                                            obj.VnombreColumna,
                                            obj.Vmensaje,
                                            obj.Cclave,
                                            obj.CtipoDato,
                                            obj.cActivo
                                         );

                intIdItem = obj.IidItem;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdItem = 0;
            }

            return intIdItem;
        }

        public bool EliminaHojaTrabajo_Configuracion(int intiIdItem)
        {

            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_del_mvto_HojaTrabajo_Configuracion",
                                            intiIdItem
                                         );
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }



        public int GrabaEjecucionPresupuestal_Detalle(Model.EjecucionPresupuestal_Detalle obj)
        {



            int intIdDetalle;

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_ins_mvto_EjecucionPresupuestal_Detalle",
                                            obj.IidCabecera,
                                            obj.CcodPosPre,
                                            obj.CcodCeGe,
                                            obj.Corden,
                                            obj.Fimporte
                                         );

                intIdDetalle = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch (Exception e)
            {
                e.ToString();
                intIdDetalle = 0;
            }

            return intIdDetalle;
        }

        public int ModificaEjecucionPresupuestal_Detalle(Model.EjecucionPresupuestal_Detalle obj)
        {



            int intIdDetalle = obj.IidDetalle;

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_upd_mvto_EjecucionPresupuestal_Detalle",
                                            obj.IidDetalle,
                                            obj.CcodPosPre,
                                            obj.CcodCeGe,
                                            obj.Corden,
                                            obj.Fimporte
                                         );

            }
            catch (Exception e)
            {
                e.ToString();
                intIdDetalle = 0;
            }

            return intIdDetalle;
        }

        public bool EliminaEjecucionPresupuestal_Detalle(int intIdDetalle)
        {
            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_del_mvto_EjecucionPresupuestal_Manual_Detalle",
                                            intIdDetalle
                                         );

            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        #region HojaTrabajo_Formulacion

        public string[] GrabaHojaTrabajo_Detalle(Model.Formulacion_HojaTrabajo_Detalle obj)
        {



            string[] arrDetalle = { "", "" };

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_ins_mvto_HojaTrabajo_Detalle",
                                            obj.iIdCabecera,
                                            obj.cCodTipoFormulacion,
                                            obj.cCodSubTipoFormulacion,
                                            obj.cCodFormulacion,
                                            obj.tDescripcionGasto,
                                            obj.iTipoMovimiento,
                                            obj.cCodClaseGasto,
                                            obj.cCodClasificador,
                                            obj.cCodPosPre,
                                            obj.cCodFuenteFinanciamiento,
                                            obj.cCodProyecto,
                                            obj.cCodComponente,
                                            obj.cCodCeGe,
                                            obj.cCodCeCo_CeGe,
                                            obj.cCodCeCo,
                                            obj.cTipoOrden,
                                            obj.cNumeroOrden,
                                            obj.fPia,
                                            obj.fSistema,
                                            obj.fEjecutado,
                                            obj.fSaldo,
                                            obj.cCodPlanEstrategico
                                         );

                arrDetalle[0] = Convert.ToString(dt.Rows[0][0].ToString());
                arrDetalle[1] = Convert.ToString(dt.Rows[0][1].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                arrDetalle[0] = "";
                arrDetalle[1] = "";
            }

            return arrDetalle;
        }

        public bool ModificaHojaTrabajo_Ajuste(Model.Formulacion_HojaTrabajo_Ajuste obj)
        {

            bool blnResult = true;

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_upd_mvto_HojaTrabajo_Ajuste",
                                            obj.cCodEmpresa,
                                            obj.cAñoProceso,
                                            obj.cPeriodo,
                                            obj.cCodPosPre,
                                            obj.cCodGerencia,
                                            obj.fAjuste
                                         );
            }
            catch (Exception e)
            {
                blnResult = false;
            }

            return blnResult;
        }
        public string[] ModificaHojaTrabajo_Detalle(Model.Formulacion_HojaTrabajo_Detalle obj)
        {



            string[] arrDetalle = { "", "" };

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_upd_mvto_HojaTrabajo_Detalle",
                                            obj.iIdDetalle,
                                            obj.iIdCabecera,
                                            obj.cCodTipoFormulacion,
                                            obj.cCodSubTipoFormulacion,
                                            obj.cCodFormulacion,
                                            obj.tDescripcionGasto,
                                            obj.iTipoMovimiento,
                                            obj.cCodClaseGasto,
                                            obj.cCodClasificador,
                                            obj.cCodPosPre,
                                            obj.cCodFuenteFinanciamiento,
                                            obj.cCodProyecto,
                                            obj.cCodComponente,
                                            obj.cCodCeGe,
                                            obj.cCodCeCo,
                                            obj.cTipoOrden,
                                            obj.cNumeroOrden,
                                            obj.fPia,
                                            obj.fSistema,
                                            obj.fEjecutado,
                                            obj.fSaldo,
                                            obj.cCodPlanEstrategico
                                         );

                arrDetalle[0] = Convert.ToString(dt.Rows[0][0].ToString());
                arrDetalle[1] = Convert.ToString(dt.Rows[0][1].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                arrDetalle[0] = "";
                arrDetalle[1] = "";
            }

            return arrDetalle;
        }

        public int GrabaHojaTrabajo_Detalle_Item(Model.Formulacion_HojaTrabajo_Detalle_Item obj)
        {
            int intIdItem = 0;

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_ins_mvto_HojaTrabajo_Detalle_Item",
                                            obj.iIdDetalle,
                                            obj.cAño,
                                            obj.cMes,
                                            obj.cNumeroAño,
                                            obj.fImporte
                                         );

                intIdItem = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdItem = 0;
            }

            return intIdItem;
        }
        public int ModificaHojaTrabajo_Detalle_Item(Model.Formulacion_HojaTrabajo_Detalle_Item obj)
        {



            int intIdItem = 0;

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_upd_mvto_HojaTrabajo_Detalle_Item",
                                            obj.iIdItem,
                                            obj.iIdDetalle,
                                            obj.cAño,
                                            obj.cMes,
                                            obj.cNumeroAño,
                                            obj.fImporte
                                         );

                intIdItem = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdItem = 0;
            }

            return intIdItem;
        }
        public Boolean EliminaHojaTrabajo_Detalle(int intIdDetalle)
        {

            Boolean blnResult = false;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Formulacion.spp_del_mvto_HojaTrabajo_Detalle",
                                                intIdDetalle
                                                );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion


        #region HojaTrabajo_PlanEstrategico

        public DataTable Combo_PeriodoInformacion_Mes(string strCodCompañia, string strAñoProceso)
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("PlanEstrategico.spp_cbo_ctrl_HojaTrabajo_Periodo_Mes", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds.Tables[0];
        }

        public DataTable Combo_PeriodoInformacion_PO(string strCodCompañia)
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("PlanEstrategico.spp_cbo_ctrl_HojaTrabajo_Periodo_PO", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds.Tables[0];
        }

        public int Recupera_PeriodoPresupuesto_IdCabecera_PO(string strCodCompañia,
                                                  string strAñoProceso,
                                                  string strMesProceso
                                                )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("PlanEstrategico.spp_cbo_ctrl_HojaTrabajo_Periodo_IdCabecera_PO", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cMesProceso", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cMesProceso"].Value = strMesProceso;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return Convert.ToInt32(ds.Tables[0].Rows[0][0]);
        }

        public DataSet Ayuda_TipoInformacion (string strCodEmpresa)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "PlanEstrategico.spp_help_ctrl_TipoInformacion",
                                            strCodEmpresa);
        }

        public DataSet Ayuda_SubTipoInformacion(string strCodEmpresa, 
                                             string strCodTipoInformacion
                                            )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "PlanEstrategico.spp_help_ctrl_SubTipoInformacion",
                                            strCodEmpresa,
                                            strCodTipoInformacion
                                            );
        }

        public DataSet Lista_HojaTrabajo_PO(string strCodCompañia,
                                        string strAñoProceso,
                                        string strMesProceso,
                                        string strCodTipoInformacion,
                                        string strCodSubTipoInformacion
                                    )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("PlanEstrategico.spp_lst_mvto_HojaTrabajo_PO", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cMesProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoInformacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodSubTipoInformacion", SqlDbType.Char);


            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cMesProceso"].Value = strMesProceso;
            da.SelectCommand.Parameters["@cCodTipoInformacion"].Value = strCodTipoInformacion;
            da.SelectCommand.Parameters["@cCodSubTipoInformacion"].Value = strCodSubTipoInformacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;
        }


        public string[] GrabaHojaTrabajo_Detalle_PO(Model.PO_HojaTrabajo_Detalle obj)
        {



            string[] arrDetalle = { "", "" };

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "PlanEstrategico.spp_ins_mvto_HojaTrabajo_Detalle_PO",
                                            obj.iIdCabecera,
                                            obj.cCodTipoInformacion,
                                            obj.cCodSubTipoInformacion,
                                            obj.cCodInformacion
                                         );

                arrDetalle[0] = Convert.ToString(dt.Rows[0][0].ToString());
                arrDetalle[1] = Convert.ToString(dt.Rows[0][1].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                arrDetalle[0] = "";
                arrDetalle[1] = "";
            }

            return arrDetalle;
        }

        public string[] ModificaHojaTrabajo_Detalle_PO(Model.PO_HojaTrabajo_Detalle obj)
        {



            string[] arrDetalle = { "", "" };

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "PlanEstrategico.spp_upd_mvto_HojaTrabajo_Detalle_PO",
                                            obj.iIdDetalle,
                                            obj.iIdCabecera,
                                            obj.cCodTipoInformacion,
                                            obj.cCodSubTipoInformacion,
                                            obj.cCodInformacion
                                         );

                arrDetalle[0] = Convert.ToString(dt.Rows[0][0].ToString());
                arrDetalle[1] = Convert.ToString(dt.Rows[0][1].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                arrDetalle[0] = "";
                arrDetalle[1] = "";
            }

            return arrDetalle;
        }

        public int GrabaHojaTrabajo_Detalle_Item_PO(Model.PO_HojaTrabajo_Detalle_Item obj)
        {
            int intIdItem = 0;

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "PlanEstrategico.spp_ins_mvto_HojaTrabajo_Detalle_Item_PO",
                                            obj.iIdDetalle,
                                            obj.cAño,
                                            obj.cMes,
                                            obj.cNumeroAño,
                                            obj.fImporte
                                         );

                intIdItem = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdItem = 0;
            }

            return intIdItem;
        }
        public int ModificaHojaTrabajo_Detalle_Item_PO(Model.PO_HojaTrabajo_Detalle_Item obj)
        {



            int intIdItem = 0;

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "PlanEstrategico.spp_upd_mvto_HojaTrabajo_Detalle_Item_PO",
                                            obj.iIdItem,
                                            obj.iIdDetalle,
                                            obj.cAño,
                                            obj.cMes,
                                            obj.cNumeroAño,
                                            obj.fImporte
                                         );

                intIdItem = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdItem = 0;
            }

            return intIdItem;
        }
        public Boolean EliminaHojaTrabajo_Detalle_PO(int intIdDetalle)
        {

            Boolean blnResult = false;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "PlanEstrategico.spp_del_mvto_HojaTrabajo_Detalle_PO",
                                                intIdDetalle
                                                );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        public Boolean GeneraSaldoPresupuestal(string strCodCompañia,
                                                string strAñoProceso,
                                                string strPeriodo,
                                                string strMesProceso,
                                                string strAñoActual
                                              )
        {

            Boolean blnResult = false;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Formulacion.spp_cnfg_mvto_HojaTrabajo_GeneraSaldo",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strPeriodo,
                                                strMesProceso,
                                                strAñoActual
                                                );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean GeneraCierreModificacionPresupuestal(string strCodCompañia,
                                                string strAñoModificacion,
                                                string strAñoFormulacion
                                              )
        {

            Boolean blnResult = false;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Formulacion.spp_cnfg_mvto_HojaTrabajo_CierreModificacion",
                                                strCodCompañia,
                                                strAñoModificacion,
                                                strAñoFormulacion
                                                );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public DataSet Lista_OrdenesVigentes(string strCodCompañia,
                                                        string strAñoProceso,
                                                        string strCodCentroCosto,
                                                        string strCodLineaFormulacion
                                                    )
        {
            return SqlHelper.ExecuteDataset(strConnection, "formulacion.spp_lst_mvto_OrdenesVigentes_HojaTrabajo",
                                                            strCodCompañia,
                                                            strAñoProceso,
                                                            strCodCentroCosto
                                                            );
        }

        public DataSet Reporte_Detalle_ModificacionFormulacion(string strCodCompañia,
                          string strAñoProceso,
                          string strVersion,
                          string strPeriodo,
                          string strCodGerencia,
                          string strCodTipoFormulacion,
                          string strCodSubTipoFormulacion
                        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_rpt_mvto_ModificacionFormulacion_Detalle", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodGerencia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodSubTipoFormulacion", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cCodGerencia"].Value = strCodGerencia;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;
            da.SelectCommand.Parameters["@cCodSubTipoFormulacion"].Value = strCodSubTipoFormulacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public List<Model.Dashboard_Formulacion_PIA> Reporte_Detalle_ModificacionFormulacion_dashboard(string strCodCompañia,
                          string strAñoProceso,
                          string strVersion,
                          string strPeriodo,
                          string strCodGerencia,
                          string strCodTipoFormulacion,
                          string strCodSubTipoFormulacion
                        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_rpt_mvto_ModificacionFormulacion_Detalle_dashboard", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodGerencia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodSubTipoFormulacion", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cCodGerencia"].Value = strCodGerencia;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;
            da.SelectCommand.Parameters["@cCodSubTipoFormulacion"].Value = strCodSubTipoFormulacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            var lista = (from order in  ds.Tables[0].AsEnumerable()
                         select new Model.Dashboard_Formulacion_PIA
                         {

                             NOMBRE_TIPO = order.Field<string>("NOMBRE_TIPO"),
                             NOMBRE_SUBTIPO = order.Field<string>("NOMBRE_SUBTIPO"),
                             SIGLA_GERENCIA = order.Field<string>("SIGLA_GERENCIA"),
                             NOMBRE_GERENCIA = order.Field<string>("NOMBRE_GERENCIA"),
                             NOMBRE_CEGE = order.Field<string>("NOMBRE_CEGE"),
                             NOMBRE_CLASIFICADOR = order.Field<string>("NOMBRE_CLASIFICADOR"),
                             NOMBRE_POSPRE = order.Field<string>("NOMBRE_POSPRE"),
                             ANTERIOR = order.Field<double>("ANTERIOR"),
                             ACTUAL = order.Field<double>("ACTUAL"),
                             DIFERENCIA = order.Field<double>("DIFERENCIA"),
                             VARIACION = order.Field<double>("VARIACION"),
                         }
                        ).ToList();


            return lista;

        }

        public DataSet Reporte_Detalle_PlanEstrategico_Formulacion(string strCodCompañia,
                          string strAñoProceso,
                          string strVersion,
                          string strPeriodo,
                          string strCodGerencia,
                          string strCodTipoFormulacion,
                          string strCodSubTipoFormulacion
                        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("PlanEstrategico.spp_lst_mvto_PlanEstrategico_Resumen_Procesos", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodGerencia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodSubTipoFormulacion", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cCodGerencia"].Value = strCodGerencia;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;
            da.SelectCommand.Parameters["@cCodSubTipoFormulacion"].Value = strCodSubTipoFormulacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Reporte_HojaTrabajo_Formulacion_Dashboard(string strCodCompañia,
                  string strAñoProceso,
                  string strVersion,
                  string strPeriodo,
                  bool blnTodasLasVersiones,
                  string strTipoFormulacion
                )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_rpt_mvto_HojaTrabajo_Formulacion_Dashboard", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@bTodasLasVersiones", SqlDbType.Bit);
            da.SelectCommand.Parameters.Add("@cTipoFormulacion", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@bTodasLasVersiones"].Value = blnTodasLasVersiones;
            da.SelectCommand.Parameters["@cTipoFormulacion"].Value = strTipoFormulacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }


        public DataSet Formato_HojaTrabajo_Formato4P_Detalle(string strCodCompañia,
                  string strAñoProceso,
                  string strVersion,
                  string strPeriodo,
                  string strCodGerencia,
                  string strCodTipoFormulacion,
                  string strCodSubTipoFormulacion
                )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_HojaTrabajo_Formato4P_Detalle", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodGerencia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodSubTipoFormulacion", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cCodGerencia"].Value = strCodGerencia;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;
            da.SelectCommand.Parameters["@cCodSubTipoFormulacion"].Value = strCodSubTipoFormulacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_PIA_Formato4P_Detalle(string strCodCompañia,
                  string strAñoProceso
                )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_PIA_Formato4P_Detalle", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_Ejecucion_Egreso_Resumen(string strCodCompañia,
                  string strAñoProceso,
                  string strMes
                )
        {
            DataSet ds = new DataSet();

            //SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_Validacion_Gastos", strConnection);
            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_ValidacionEgreso_Resumen", strConnection);
            
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cMesProceso", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cMesProceso"].Value = strMes;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_Ejecucion_Inversion_Resumen(string strCodCompañia,
                  string strAñoProceso,
                  string strMes
                )
        {
            DataSet ds = new DataSet();

            //SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_Validacion_Gastos", strConnection);
            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_ValidacionInversion_Resumen", strConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cMesProceso", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cMesProceso"].Value = strMes;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_Ejecucion_Egreso_Detalle(string strCodCompañia,
                                                        string strCodPosPre,
                                                        string strAñoProceso,
                                                        string strMes
                                                        )
        {
            DataSet ds = new DataSet();

            //SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_Validacion_Gastos", strConnection);
            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_ValidacionEgreso_Detalle", strConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodPosPre", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cMesProceso", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cCodPosPre"].Value = strCodPosPre;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cMesProceso"].Value = strMes;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_Ejecucion_Egreso_Detalle_Presupuesto(string strCodCompañia,
                                                string strCodPosPre,
                                                string strAñoProceso,
                                                string strMes
                                                )
        {
            DataSet ds = new DataSet();

            //SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_Validacion_Gastos", strConnection);
            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_ValidacionEgreso_Detalle_P", strConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodPosPre", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cMesProceso", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cCodPosPre"].Value = strCodPosPre;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cMesProceso"].Value = strMes;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_Ejecucion_Egreso_Detalle_Contabilidad(string strCodCompañia,
                                        string strCodPosPre,
                                        string strAñoProceso,
                                        string strMes
                                        )
        {
            DataSet ds = new DataSet();

            //SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_Validacion_Gastos", strConnection);
            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_ValidacionEgreso_Detalle_C", strConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodPosPre", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cMesProceso", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cCodPosPre"].Value = strCodPosPre;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cMesProceso"].Value = strMes;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }


        public DataSet Formato_Ejecucion_Inversion_Detalle(string strCodCompañia,
                                                        string strCodPosPre,
                                                        string strAñoProceso,
                                                        string strMes
                                                        )
        {
            DataSet ds = new DataSet();

            //SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_Validacion_Gastos", strConnection);
            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_ValidacionInversion_Detalle", strConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cClase", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cMesProceso", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cClase"].Value = strCodPosPre;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cMesProceso"].Value = strMes;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_Ejecucion_Inversion_Detalle_Presupuesto(string strCodCompañia,
                                                        string strCodPosPre,
                                                        string strAñoProceso,
                                                        string strMes
                                                        )
        {
            DataSet ds = new DataSet();

            //SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_Validacion_Gastos", strConnection);
            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_ValidacionInversion_Detalle_P", strConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cOrden", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cMesProceso", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cOrden"].Value = strCodPosPre;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cMesProceso"].Value = strMes;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_Ejecucion_Inversion_Detalle_Contabilidad(string strCodCompañia,
                                                string strCodPosPre,
                                                string strAñoProceso,
                                                string strMes
                                                )
        {
            DataSet ds = new DataSet();

            //SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_Validacion_Gastos", strConnection);
            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_ValidacionInversion_Detalle_C", strConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cOrden", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cMesProceso", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cOrden"].Value = strCodPosPre;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cMesProceso"].Value = strMes;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }


        public DataSet Formato_Ejecucion_Ingreso_Detalle(string strCodCompañia,
                  string strAñoProceso,
                  string strMes
                )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_Validacion_Ingresos", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cMes", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cMes"].Value = strMes;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_PIA_Formato5P_Resumen(string strCodCompañia,
                                                      string strAñoProceso,
                                                      string strCodTipoFormulacion,
                                                      string strCodSubTipoFormulacion
                                                    )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_PIA_Formato5P_Resumen", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodSubTipoFormulacion", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;
            da.SelectCommand.Parameters["@cCodSubTipoFormulacion"].Value = strCodSubTipoFormulacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_PIA_Formato5E_Resumen(string strCodCompañia,
                                              string strAñoProceso
                                            )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_Formato5E_Resumen", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_PIA_Formato5E_Detalle(string strCodCompañia,
                                      string strAñoProceso
                                    )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_EjecucionPresupuestal_Formato5E_Detalle", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }



        public DataSet Formato_HojaTrabajo_Formato_8P(string strCodCompañia,
          string strAñoProceso,
          string strVersion,
          string strPeriodo
        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_HojaTrabajo_Formato_8P_Detalle", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_PIA_Formato_8P(string strCodCompañia,
                                                      string strAñoProceso
                                                    )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_PIA_Formato_8P_Detalle", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_HojaTrabajo_AjusteManual(string strCodCompañia,
          string strAñoProceso,
          string strCodClasificador_Resumen,
          string strPeriodo
        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_HojaTrabajo_AjusteManual", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodClasificador_Resumen", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cCodClasificador_Resumen"].Value = strCodClasificador_Resumen;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_HojaTrabajo_FONAFE(string strCodCompañia,
                                              string strAñoProceso,
                                              string strPeriodo
                                            )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_HojaTrabajo_FONAFE", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }
        public int Graba_HojaTrabajo_FONAFE(Model.Formulacion_HojaTrabajo_FONAFE obj)
        {
            int intIdFonafe = 0;
            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "Formulacion.spp_ins_mvto_HojaTrabajo_FONAFE", 
                                                 obj.cCodEmpresa,
                                                 obj.cAñoProceso,
                                                 obj.cPeriodo,
                                                 obj.cCodLinea,
                                                 obj.fValor
                                                 );
                intIdFonafe = Convert.ToInt32(dt.Rows[0]["iIdFonafe"]);
            }
            catch (Exception)
            {
            }

            return intIdFonafe;

        }

        public int Modifica_HojaTrabajo_FONAFE(Model.Formulacion_HojaTrabajo_FONAFE obj)
        {
            int intIdFonafe = 0;
            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable("Formulacion.spp_upd_mvto_HojaTrabajo_FONAFE",
                                                 strConnection,
                                                 obj.iIdFonafe,
                                                 obj.cCodEmpresa,
                                                 obj.cAñoProceso,
                                                 obj.cCodLinea,
                                                 obj.fValor
                                                 );
                intIdFonafe = obj.iIdFonafe;
            }
            catch (Exception)
            {
            }

            return intIdFonafe;

        }



        public DataSet Formato_HojaTrabajo_AjusteManual_FONAFE(string strCodCompañia,
                                                          string strAñoProceso,
                                                          string strPeriodo)
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_HojaTrabajo_AjusteManual_FONAFE", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_HojaTrabajo_Distribucion_FONAFE(string strCodCompañia,
                                                  string strAñoProceso,
                                                  string strPeriodo
                                                )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_HojaTrabajo_Distribucion_FONAFE", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }



        public DataSet Formato_HojaTrabajo_AjusteManual_Resumen(string strCodCompañia,
                                                          string strAñoProceso,
                                                          string strPeriodo
                                                        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_HojaTrabajo_AjusteManual_Resumen", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_HojaTrabajo_Conciliacion_Detalle_01(string strCodCompañia,
          string strAñoProceso,
          string strVersion,
          string strPeriodo,
          string strCodGerencia,
          string strCodTipoFormulacion,
          string strCodSubTipoFormulacion
        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_HojaTrabajo_Conciliacion_Detalle_01", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodGerencia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodSubTipoFormulacion", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cCodGerencia"].Value = strCodGerencia;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;
            da.SelectCommand.Parameters["@cCodSubTipoFormulacion"].Value = strCodSubTipoFormulacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_HojaTrabajo_Conciliacion_Detalle_02(string strCodCompañia,
          string strAñoProceso,
          string strVersion,
          string strPeriodo,
          string strCodGerencia,
          string strCodTipoFormulacion,
          string strCodSubTipoFormulacion
        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_HojaTrabajo_Conciliacion_Detalle_02", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodGerencia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodSubTipoFormulacion", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cCodGerencia"].Value = strCodGerencia;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;
            da.SelectCommand.Parameters["@cCodSubTipoFormulacion"].Value = strCodSubTipoFormulacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_HojaTrabajo_Conciliacion_Detalle_03(string strCodCompañia,
                  string strAñoProceso,
                  string strVersion,
                  string strPeriodo,
                  string strCodGerencia,
                  string strCodTipoFormulacion,
                  string strCodSubTipoFormulacion
                )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_HojaTrabajo_Conciliacion_Detalle_03", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodGerencia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodSubTipoFormulacion", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cCodGerencia"].Value = strCodGerencia;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;
            da.SelectCommand.Parameters["@cCodSubTipoFormulacion"].Value = strCodSubTipoFormulacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_HojaTrabajo_Conciliacion_Resumido_03(string strCodCompañia,
          string strAñoProceso,
          string strVersion,
          string strPeriodo,
          string strCodGerencia,
          string strCodTipoFormulacion,
          string strCodSubTipoFormulacion
        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_HojaTrabajo_Conciliacion_Resumido_03", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodGerencia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodSubTipoFormulacion", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cCodGerencia"].Value = strCodGerencia;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;
            da.SelectCommand.Parameters["@cCodSubTipoFormulacion"].Value = strCodSubTipoFormulacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }


        public DataSet Reporte_Formuacion_HojaTrabajo_Detalle(string strCodCompañia,
                          string strAñoProceso,
                          string strVersion,
                          string strPeriodo,
                          string strCodCentroGestor,
                          string strCodTipoFormulacion,
                          string strCodSubTipoFormulacion
                        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_rpt_mvto_Formulacion_HojaTrabajo_Detalle", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodSubTipoFormulacion", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = strCodTipoFormulacion;
            da.SelectCommand.Parameters["@cCodSubTipoFormulacion"].Value = strCodTipoFormulacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Reporte_Detalle_PIA(string strCodCompañia,
                          string strAñoProceso,
                          string strVersion,
                          string strCodCentroGestor
                        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_rpt_mvto_PIA", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Reporte_SaldoDetalle_PIA(string strCodCompañia,
                          string strAñoProceso,
                          string strVersion,
                          string strCodCentroGestor
                        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_rpt_mvto_SaldoPIA", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Reporte_Resumen_ModificacionFormulacion(string strCodCompañia,
                                                              string strAñoProceso,
                                                              string strVersion,
                                                              string strPeriodo
                                                            )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_Seguimiento_HojaTrabajo_Resumen", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cPeriodo", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cPeriodo"].Value = strPeriodo;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Reporte_ResumenMensual_Formulacion(string strCodCompañia,
                                                      string strAñoProceso,
                                                      string strVersion
                                                    )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_Formulacion_Detalle_ResumenAnual", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }


        public DataSet Ayuda_CentroGestor_HojaTrabajo(string strCodCentroGestorSuperior)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_msto_CentroGestor_HojaTrabajo", strCodCentroGestorSuperior);
        }

        public DataSet Ayuda_Gerencia_HojaTrabajo(string strCodEmpresa)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_msto_Gerencia_HojaTrabajo", strCodEmpresa);
        }

        public DataSet Ayuda_TipoFormulacion_HojaTrabajo(string strCodEmpresa)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_ctrl_TipoFormulacion_HojaTrabajo", strCodEmpresa);
        }

        public DataSet Ayuda_SubTipoFormulacion_HojaTrabajo(string strCodEmpresa,string strCodTipoFormulacion)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_help_ctrl_SubTipoFormulacion_HojaTrabajo", strCodEmpresa, strCodTipoFormulacion);
        }


        #endregion

        #region Gestion_HojaTrabajo
        public DataSet Lista_Mensajevalidacion_PasePresupuestal(string strCodCompañia,
                                                        string strAñoProceso,
                                                        string strNumRequerimiento
                                                       )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection,
                                            "Gestion.spp_lst_mvto_requerimiento_cabecera_Validacion",
                                            strCodCompañia,
                                            strAñoProceso,
                                            strNumRequerimiento
                                         );
            return ds;
        }

        public DataSet Combo_TipoMensajeValidacion()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_cbo_ctrl_TipoMensajeValidacion");
        }
        public DataSet Lista_TerminoReferencia_IdaVuelta(string strCodCompañia,
                                                            string strCodEmpleado,
                                                            string strTipoMovimiento
                                                        )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection,
                                            "TDR.spp_lst_mvto_TerminoReferencia_IdaVuelta",
                                            strCodCompañia,
                                            strCodEmpleado,
                                            strTipoMovimiento
                                         );
            return ds;
        }

        public DataSet Lista_Encargatura_Empleado(string strCodCompañia,
                                                  string strCodEmpleado
                                                 )
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                            "Gestion.spp_lst_cnfg_Encargatura_Empleado",
                                            strCodCompañia,
                                            strCodEmpleado
                                            );
            return ds;
        }

        public DataSet Lista_Encargatura(string strCodCompañia)
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                            "Gestion.spp_lst_cnfg_Encargatura",
                                            strCodCompañia
                                            );
            return ds;
        }

        public Model.Encargatura Recupera_Encargatura(int intIdEncargatura)
        {
            DataTable dt = new DataTable();
            Model.Encargatura obj = new Model.Encargatura();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Gestion.spp_sel_cnfg_Encargatura",
                                            intIdEncargatura
                                            );
            if (dt.Rows.Count > 0)
            {
                obj.iIdEncargatura = Convert.ToInt32(dt.Rows[0]["iIdEncargatura"]);
                obj.cNumDocumento = Convert.ToString(dt.Rows[0]["cNumDocumento"]);
                obj.cCodEmpleado_Encargado = Convert.ToString(dt.Rows[0]["cCodEmpleado_Encargado"]);
                obj.vNomEmpleado_Encargado = Convert.ToString(dt.Rows[0]["vNomEmpleado_Encargado"]);
                obj.cCodTipoEncargatura = Convert.ToString(dt.Rows[0]["cCodTipoEncargatura"]);
                obj.vNomTipoEncargatura = Convert.ToString(dt.Rows[0]["vNomTipoEncargatura"]);
                obj.dFecInicio = Convert.ToString(dt.Rows[0]["dFecInicio"]);
                obj.bEncargaturaIndeterminada = Convert.ToBoolean(dt.Rows[0]["bEncargaturaIndeterminada"]);
                obj.dFecFinal = Convert.ToString(dt.Rows[0]["dFecFinal"]);
                obj.cCodEmpleado_Reemplazado = Convert.ToString(dt.Rows[0]["cCodEmpleado_Reemplazado"]);
                obj.vNomEmpleado_Encargado = Convert.ToString(dt.Rows[0]["vNomEmpleado_Encargado"]);
                obj.cCodCeCo = Convert.ToString(dt.Rows[0]["cCodCeCo"]);
                obj.vNomCeCo = Convert.ToString(dt.Rows[0]["vNomCeCo"]);
            }
            return obj;
        }

        public Model.Encargatura Graba_Encargatura(string strAñoProceso,
                                                    Model.Encargatura obj)
        {
            DataTable dt = new DataTable();
            Model.Encargatura objRetorno = new Model.Encargatura();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Gestion.spp_ins_cnfg_Encargatura",
                                            strAñoProceso,
                                            obj.cNumDocumento,
                                            obj.cCodEmpleado_Encargado,
                                            obj.cCodTipoEncargatura,
                                            obj.dFecInicio,
                                            obj.bEncargaturaIndeterminada,
                                            obj.dFecFinal,
                                            obj.cCodEmpleado_Reemplazado,
                                            obj.cCodCeCo
                                            );
            if (dt.Rows.Count > 0)
            {
                obj.iIdEncargatura = Convert.ToInt32(dt.Rows[0]["iIdEncargatura"]);
                obj.cNumDocumento = Convert.ToString(dt.Rows[0]["cNumDocumento"]);
            }
            return obj;
        }

        public int Modifica_Encargatura(string strAñoProceso, Model.Encargatura obj)
        {
            int intIdEncargatura = 0;

            SqlHelper.ExecuteNonQuery(strConnection,
                                            "Gestion.spp_upd_cnfg_Encargatura",
                                            obj.iIdEncargatura,
                                            strAñoProceso,
                                            obj.cNumDocumento,
                                            obj.cCodEmpleado_Encargado,
                                            obj.cCodTipoEncargatura,
                                            obj.dFecInicio,
                                            obj.bEncargaturaIndeterminada,
                                            obj.dFecFinal,
                                            obj.cCodEmpleado_Reemplazado,
                                            obj.cCodCeCo
                                            );

            intIdEncargatura = obj.iIdEncargatura;

            return intIdEncargatura;
        }

        public Boolean Elimina_Encargatura(string strNumDocumento)
        {
            Boolean blnResult = false;

            SqlHelper.ExecuteNonQuery(strConnection,
                                            "Gestion.spp_del_cnfg_Encargatura",
                                            strNumDocumento
                                            );

            blnResult = true;

            return blnResult;
        }


        public DataTable Combo_TipoEngargatura()
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_cbo_ctrl_TipoEncargatura"))
            {
                return ds.Tables[0];
            }
        }

        public DataTable Combo_PeriodoPlanEstrategico(string strCodCompañia)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "PlanEstrategico.spp_cbo_PeriodoProceso_PlanEstrategico", strCodCompañia))
            {
                return ds.Tables[0];
            }
        }

        public DataTable Combo_PeriodoPlanEstrategico_Version(string strCodCompañia,
                                                                string strAñoProceso
                                                            )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "PlanEstrategico.spp_cbo_PeriodoProceso_PlanEstrategico_Version", strCodCompañia, strAñoProceso))
            {
                return ds.Tables[0];
            }
        }

        public Boolean Traslada_Requerimiento_a_SPRING(string strNumRequerimiento)
        {
            Boolean blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                            "Gestion.spp_ins_mvto_Requerimiento_Detalle_Spring",
                                            strNumRequerimiento
                                         );
            }
            catch (Exception)
            {

                blnResult = false;
            }
            return blnResult;

        }

        public DataSet Reporte_EstadoRequerimiento(string strCodCompañia,
                                                    string strPeriodoInicial,
                                                    string strPeriodoFinal,
                                                    string strCodCentroGestor,
                                                    int intTipo
                                          )
        {
            DataSet ds = new DataSet();
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Gestion.spp_lst_mvto_Requerimiento_EstadoPaso",
                                            strCodCompañia,
                                            strPeriodoInicial,
                                            strPeriodoFinal,
                                            strCodCentroGestor,
                                            intTipo
                                         );
        }

        public DataSet Reporte_EstadoReasignacion(string strCodCompañia,
                                                    string strPeriodoInicial,
                                                    string strPeriodoFinal,
                                                    string strCodCentroGestor
                                          )
        {
            DataSet ds = new DataSet();
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Gestion.spp_lst_mvto_Reasignacion_EstadoPaso",
                                            strCodCompañia,
                                            strPeriodoInicial,
                                            strPeriodoFinal,
                                            strCodCentroGestor
                                         );
        }

        public DataSet Ayuda_PlanEstrategico(string strCodCompañia,
                                             string strAñoProceso
                                            )
        {
            DataSet ds = new DataSet();
            return SqlHelper.ExecuteDataset(strConnection,
                                            "PlanEstrategico.spp_help_cnfg_PlanEstrategico",
                                            strCodCompañia,
                                            strAñoProceso
                                         );
        }

        public DataSet Lista_PlanEstrategico_LineaFormulacion(string strCodCompañia,
                                                        string strAñoProceso,
                                                        string strCodIndicadorOperativo
                                                     )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "PlanEstrategico.spp_lst_mvto_PlanEstrategico_LineaFormulacion",
                                                    strCodCompañia,
                                                    strAñoProceso,
                                                    strCodIndicadorOperativo
                                                )
                  )
            {
                return ds;
            }
        }

        public Boolean Graba_PlanEstrategico_LineaFormulacion(string strCodCompañia,
                                                                string strAñoProceso,
                                                                string strCodIndicadorOperativo,
                                                                string strCodLineaFormulacion
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "PlanEstrategico.spp_ins_mvto_PlanEstrategico_LineaFormulacion",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strCodIndicadorOperativo,
                                                strCodLineaFormulacion
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Elimina_PlanEstrategico_LineaFormulacion(string strCodCompañia,
                                                string strAñoProceso,
                                                string strCodIndicadorOperativo,
                                                string strCodLineaFormulacion
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "PlanEstrategico.spp_del_mvto_PlanEstrategico_LineaFormulacion",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strCodIndicadorOperativo,
                                                strCodLineaFormulacion
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }
        public DataSet Lista_Estado_FuenteFinanciamiento(string strCodCompañia,
                                                                string strCodFuenteFinanciamiento
                                                             )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Proyecto.spp_lst_mvto_Estado_FuenteFinanciamiento",
                                                    strCodCompañia,
                                                    strCodFuenteFinanciamiento
                                                )
                  )
            {
                return ds;
            }
        }

        public Boolean Modifica_Estado_FuenteFinanciamiento(string strCodCompañia,
                                                                string strCodFuenteFinanciamiento,
                                                                string strCodProyecto,
                                                                Boolean blnEstado
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "Proyecto.spp_upd_mvto_Estado_FuenteFinanciamiento",
                                                strCodCompañia,
                                                strCodFuenteFinanciamiento,
                                                strCodProyecto,
                                                blnEstado
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }
        #endregion

        #region MotivoRechazoAjuste
        public DataSet Combo_MotivoRechazoAjuste(string strCodTipoRechazo)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_cbo_ctrl_MotivoRechazoAjuste",
                                      strCodTipoRechazo
                                     );

            return ds;
        }

        public DataSet Ayuda_MotivoRechazoAjuste()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_ctrl_MotivoRechazoAjuste"
                                     );

            return ds;
        }

        public Model.MotivoRechazoAjuste Recupera_MotivoRechazoAjuste(int intIdMotivoRechazoAjuste)
        {
            DataTable dt = new DataTable();
            Model.MotivoRechazoAjuste obj = new Model.MotivoRechazoAjuste();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_ctrl_MotivoRechazoAjuste", intIdMotivoRechazoAjuste);

            if (dt.Rows.Count > 0)
            {
                obj.IidMotivoRechazo = Convert.ToInt32(dt.Rows[0]["IidMotivoRechazo"]);
                obj.CcodMotivoRechazo = Convert.ToString(dt.Rows[0]["CcodMotivoRechazo"]);
                obj.VnomMotivoRechazo = Convert.ToString(dt.Rows[0]["VnomMotivoRechazo"]);
                obj.CcodTipoRechazo = Convert.ToString(dt.Rows[0]["CcodTipoRechazo"]);
            }
            return obj;
        }


        public Model.MotivoRechazoAjuste Recupera_MotivoRechazoAjuste_Codigo(string strCodMotivoRechazoAjuste)
        {
            DataTable dt = new DataTable();
            Model.MotivoRechazoAjuste obj = new Model.MotivoRechazoAjuste();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_ctrl_MotivoRechazoAjuste_Codigo", strCodMotivoRechazoAjuste);

            if (dt.Rows.Count > 0)
            {
                obj.IidMotivoRechazo = Convert.ToInt32(dt.Rows[0]["IidMotivoRechazo"]);
                obj.CcodMotivoRechazo = Convert.ToString(dt.Rows[0]["CcodMotivoRechazo"]);
                obj.VnomMotivoRechazo = Convert.ToString(dt.Rows[0]["VnomMotivoRechazo"]);
                obj.CcodTipoRechazo = Convert.ToString(dt.Rows[0]["CcodTipoRechazo"]);
            }
            return obj;
        }

        public int Graba_MotivoRechazoAjuste(Model.MotivoRechazoAjuste obj)
        {

            int intIdMotivoRechazoAjuste;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_ins_ctrl_MotivoRechazoAjuste",
                                            obj.CcodMotivoRechazo,
                                            obj.VnomMotivoRechazo,
                                            obj.CcodTipoRechazo
                                         );

                intIdMotivoRechazoAjuste = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdMotivoRechazoAjuste = 0;
            }

            return intIdMotivoRechazoAjuste;
        }

        public int Modifica_MotivoRechazoAjuste(Model.MotivoRechazoAjuste obj)
        {



            int intIdMotivoRechazoAjuste = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_upd_ctrl_MotivoRechazoAjuste",
                                            obj.IidMotivoRechazo,
                                            obj.CcodMotivoRechazo,
                                            obj.VnomMotivoRechazo,
                                            obj.CcodTipoRechazo

                                         );

                intIdMotivoRechazoAjuste = obj.IidMotivoRechazo;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdMotivoRechazoAjuste = 0;
            }

            return intIdMotivoRechazoAjuste;
        }

        public bool Elimina_MotivoRechazoAjuste(int intIdMotivoRechazoAjuste)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_del_ctrl_MotivoRechazoAjuste",
                                           intIdMotivoRechazoAjuste
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataTable Lista_MotivoRechazoAjuste()
        {



            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Formulacion.spp_lst_ctrl_MotivoRechazoAjuste"
                                     );

            return dt;
        }

        #endregion

        #region MotivoRechazoRequerimiento
        public DataSet Combo_MotivoRechazoRequerimiento(string strCodTipoRechazo)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Gestion.spp_cbo_ctrl_MotivoRechazoRequerimiento",
                                      strCodTipoRechazo
                                     );

            return ds;
        }

        public DataSet Ayuda_MotivoRechazoRequerimiento()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Gestion.spp_help_ctrl_MotivoRechazoRequerimiento"
                                     );

            return ds;
        }

        public Model.MotivoRechazoRequerimiento Recupera_MotivoRechazoRequerimiento(int intIdMotivoRechazoRequerimiento)
        {
            DataTable dt = new DataTable();
            Model.MotivoRechazoRequerimiento obj = new Model.MotivoRechazoRequerimiento();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_sel_ctrl_MotivoRechazoRequerimiento", intIdMotivoRechazoRequerimiento);

            if (dt.Rows.Count > 0)
            {
                obj.IidMotivoRechazo = Convert.ToInt32(dt.Rows[0]["IidMotivoRechazo"]);
                obj.CcodMotivoRechazo = Convert.ToString(dt.Rows[0]["CcodMotivoRechazo"]);
                obj.VnomMotivoRechazo = Convert.ToString(dt.Rows[0]["VnomMotivoRechazo"]);
                obj.CcodTipoRechazo = Convert.ToString(dt.Rows[0]["CcodTipoRechazo"]);
            }
            return obj;
        }


        public Model.MotivoRechazoRequerimiento Recupera_MotivoRechazoRequerimiento_Codigo(string strCodMotivoRechazoRequerimiento)
        {
            DataTable dt = new DataTable();
            Model.MotivoRechazoRequerimiento obj = new Model.MotivoRechazoRequerimiento();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_sel_ctrl_MotivoRechazoRequerimiento_Codigo", strCodMotivoRechazoRequerimiento);

            if (dt.Rows.Count > 0)
            {
                obj.IidMotivoRechazo = Convert.ToInt32(dt.Rows[0]["IidMotivoRechazo"]);
                obj.CcodMotivoRechazo = Convert.ToString(dt.Rows[0]["CcodMotivoRechazo"]);
                obj.VnomMotivoRechazo = Convert.ToString(dt.Rows[0]["VnomMotivoRechazo"]);
                obj.CcodTipoRechazo = Convert.ToString(dt.Rows[0]["CcodTipoRechazo"]);
            }
            return obj;
        }

        public int Graba_MotivoRechazoRequerimiento(Model.MotivoRechazoRequerimiento obj)
        {

            int intIdMotivoRechazoRequerimiento;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Gestion.spp_ins_ctrl_MotivoRechazoRequerimiento",
                                            obj.CcodMotivoRechazo,
                                            obj.VnomMotivoRechazo,
                                            obj.CcodTipoRechazo
                                         );

                intIdMotivoRechazoRequerimiento = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdMotivoRechazoRequerimiento = 0;
            }

            return intIdMotivoRechazoRequerimiento;
        }

        public int Modifica_MotivoRechazoRequerimiento(Model.MotivoRechazoRequerimiento obj)
        {



            int intIdMotivoRechazoRequerimiento = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Gestion.spp_upd_ctrl_MotivoRechazoRequerimiento",
                                            obj.IidMotivoRechazo,
                                            obj.CcodMotivoRechazo,
                                            obj.VnomMotivoRechazo,
                                            obj.CcodTipoRechazo

                                         );

                intIdMotivoRechazoRequerimiento = obj.IidMotivoRechazo;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdMotivoRechazoRequerimiento = 0;
            }

            return intIdMotivoRechazoRequerimiento;
        }

        public bool Elimina_MotivoRechazoRequerimiento(int intIdMotivoRechazoRequerimiento)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Gestion.spp_del_ctrl_MotivoRechazoRequerimiento",
                                           intIdMotivoRechazoRequerimiento
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataTable Lista_MotivoRechazoRequerimiento()
        {



            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Gestion.spp_lst_ctrl_MotivoRechazoRequerimiento"
                                     );

            return dt;
        }

        #endregion

        #region ParametroLogistica

        public Model.ParametroLogistica Recupera_ParametroLogistica(int intIdParametro)
        {
            DataTable dt = new DataTable();
            Model.ParametroLogistica obj = new Model.ParametroLogistica();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Logistica.spp_sel_cnfg_ParametroLogistica", intIdParametro);

            if (dt.Rows.Count > 0)
            {
                obj.iIdParametroLogistica = Convert.ToInt32(dt.Rows[0]["iIdParametro"]);
                //obj.cCodEmpresa = Convert.ToString(dt.Rows[0]["cCodEmpresa"]);
                obj.cCodParametroLogistica = Convert.ToString(dt.Rows[0]["cCodParametroLogistica"]);
                obj.vDesParametroLogistica = Convert.ToString(dt.Rows[0]["vDesParametroLogistica"]);
                obj.vValParametroLogistica = Convert.ToString(dt.Rows[0]["vValParametroLogistica"]);
            }
            return obj;
        }

        public int Graba_ParametroLogistica(Model.ParametroLogistica obj)
        {

            int intIdParametro = 0;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_cnfg_ParametroLogistica",
                                            obj.cCodParametroLogistica,
                                            obj.vDesParametroLogistica,
                                            obj.vValParametroLogistica
                                         );

                intIdParametro = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdParametro = 0;
            }

            return intIdParametro;
        }

        public int Modifica_ParametroLogistica(Model.ParametroLogistica obj)
        {

            int intIdParametro = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_cnfg_ParametroLogistica",
                                            obj.iIdParametroLogistica,
                                            obj.cCodParametroLogistica,
                                            obj.vDesParametroLogistica,
                                            obj.vValParametroLogistica

                                         );

                intIdParametro = obj.iIdParametroLogistica;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdParametro = 0;
            }

            return intIdParametro;
        }

        public bool Elimina_ParametroLogistica(int intIdParametro)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_cnfg_ParametroLogistica",
                                           intIdParametro
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_ParametroLogistica(string strCodEmpresa)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Logistica.spp_lst_cnfg_ParametroLogistica",
                                      strCodEmpresa
                                     );

            return ds;
        }

        #endregion

        #region ParametroFormulacion
        public Model.ParametroFormulacion Recupera_ParametroFormulacion_Codigo( string strCodEmpresa,
                                                                                string strCodParametro
                                                                              )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_sel_cnfg_ParametroFormulacion_Codigo", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodParametro", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodEmpresa;
            da.SelectCommand.Parameters["@cCodParametro"].Value = strCodParametro;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            Model.ParametroFormulacion obj = new Model.ParametroFormulacion();

            if (ds.Tables[0].Rows.Count > 0)
            {
                obj.iIdParametro = Convert.ToInt32(ds.Tables[0].Rows[0]["iIdParametro"]);
                obj.cCodEmpresa = Convert.ToString(ds.Tables[0].Rows[0]["cCodEmpresa"]);
                obj.cCodParametro = Convert.ToString(ds.Tables[0].Rows[0]["cCodParametro"]);
                obj.vNomParametro = Convert.ToString(ds.Tables[0].Rows[0]["vNomParametro"]);
                obj.vValParametro = Convert.ToString(ds.Tables[0].Rows[0]["vValParametro"]);
            }
            return obj;
        }

        public Model.ParametroFormulacion Recupera_ParametroFormulacion(int intIdParametro)
        {
            DataTable dt = new DataTable();
            Model.ParametroFormulacion obj = new Model.ParametroFormulacion();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_cnfg_ParametroFormulacion", intIdParametro);

            if (dt.Rows.Count > 0)
            {
                obj.iIdParametro = Convert.ToInt32(dt.Rows[0]["iIdParametro"]);
                obj.cCodEmpresa = Convert.ToString(dt.Rows[0]["cCodEmpresa"]);
                obj.cCodParametro = Convert.ToString(dt.Rows[0]["cCodParametro"]);
                obj.vNomParametro = Convert.ToString(dt.Rows[0]["vNomParametro"]);
                obj.vValParametro = Convert.ToString(dt.Rows[0]["vValParametro"]);
            }
            return obj;
        }

        public int Graba_ParametroFormulacion(Model.ParametroFormulacion obj)
        {

            int intIdParametro = 0;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_ins_cnfg_ParametroFormulacion",
                                            obj.cCodEmpresa,
                                            obj.cCodParametro,
                                            obj.vNomParametro,
                                            obj.vValParametro
                                         );

                intIdParametro = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdParametro = 0;
            }

            return intIdParametro;
        }

        public int Modifica_ParametroFormulacion(Model.ParametroFormulacion obj)
        {

            int intIdParametro = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_upd_cnfg_ParametroFormulacion",
                                            obj.iIdParametro,
                                            obj.cCodEmpresa,
                                            obj.cCodParametro,
                                            obj.vNomParametro,
                                            obj.vValParametro

                                         );

                intIdParametro = obj.iIdParametro;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdParametro = 0;
            }

            return intIdParametro;
        }

        public bool Elimina_ParametroFormulacion(int intIdParametro)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_del_cnfg_ParametroFormulacion",
                                           intIdParametro
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_ParametroFormulacion(string strCodEmpresa)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_lst_cnfg_ParametroFormulacion",
                                      strCodEmpresa
                                     );

            return ds;
        }

        #endregion

        #region ParametroGestion
        public Model.ParametroGestion Recupera_ParametroGestion_Codigo(string strCodParametroGestion)
        {
            DataTable dt = new DataTable();
            Model.ParametroGestion obj = new Model.ParametroGestion();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_sel_cnfg_ParametroGestion_Codigo", strCodParametroGestion);

            if (dt.Rows.Count > 0)
            {
                obj.iIdParametroGestion = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodParametroGestion = Convert.ToString(dt.Rows[0][1]);
                obj.vDesParametroGestion = Convert.ToString(dt.Rows[0][2]);
                obj.vValParametroGestion = Convert.ToString(dt.Rows[0][3]);
            }
            return obj;
        }

        public Model.ParametroGestion Recupera_ParametroGestion(int intIdParametroGestion)
        {
            DataTable dt = new DataTable();
            Model.ParametroGestion obj = new Model.ParametroGestion();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_sel_cnfg_ParametroGestion", intIdParametroGestion);

            if (dt.Rows.Count > 0)
            {
                obj.iIdParametroGestion = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodParametroGestion = Convert.ToString(dt.Rows[0][1]);
                obj.vDesParametroGestion = Convert.ToString(dt.Rows[0][2]);
                obj.vValParametroGestion = Convert.ToString(dt.Rows[0][3]);
            }
            return obj;
        }

        public int Graba_ParametroGestion(Model.ParametroGestion obj)
        {

            int intIdParametro = 0;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Gestion.spp_ins_cnfg_ParametroGestion",
                                            obj.cCodParametroGestion,
                                            obj.vDesParametroGestion,
                                            obj.vValParametroGestion
                                         );

                intIdParametro = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdParametro = 0;
            }

            return intIdParametro;
        }

        public int Modifica_ParametroGestion(Model.ParametroGestion obj)
        {

            int intIdParametro = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Gestion.spp_upd_cnfg_ParametroGestion",
                                            obj.iIdParametroGestion,
                                            obj.cCodParametroGestion,
                                            obj.vDesParametroGestion,
                                            obj.vValParametroGestion

                                         );

                intIdParametro = obj.iIdParametroGestion;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdParametro = 0;
            }

            return intIdParametro;
        }

        public bool Elimina_ParametroGestion(int intIdParametro)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Gestion.spp_del_cnfg_ParametroGestion",
                                           intIdParametro
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_ParametroGestion()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Gestion.spp_lst_cnfg_Parametrogestion"
                                     );

            return ds;
        }

        #endregion

        #region PasoAjuste
        public Model.Paso_Ajuste GetPaso_Ajuste(string strNumAjuste
                                                     )
        {
            DataTable dt = new DataTable();


            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_ins_mvto_Ajuste_Firma_Smart", strNumAjuste);

            Model.Paso_Ajuste objMES = new Model.Paso_Ajuste();

            foreach (DataRow row in dt.Rows)
            {
                objMES = GetEmpDataTableRow(row);
            }

            return objMES;
        }


        private Model.Paso_Ajuste GetEmpDataTableRow(DataRow dr)
        {
            Model.Paso_Ajuste objMES = new Model.Paso_Ajuste();

            objMES.CcodCeGe = Convert.ToString(dr["CcodCeGe"]);
            objMES.CnumAjuste = Convert.ToString(dr["CnumAjuste"]);
            objMES.DfecPaso = Convert.ToDateTime(dr["DfecPaso"]);
            objMES.CPaso = Convert.ToString(dr["CPaso"]);
            objMES.CestadoPaso = Convert.ToString(dr["CestadoPaso"]);

            return (objMES);
        }

        #endregion

        #region PasoRequerimiento
        public Model.Paso_Requerimiento GetPaso_Requerimiento(string strNumRequerimiento
                                                     )
        {
            DataTable dt = new DataTable();


            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_ins_mvto_Requerimiento_Firma_Smart", strNumRequerimiento);

            Model.Paso_Requerimiento objMES = new Model.Paso_Requerimiento();

            foreach (DataRow row in dt.Rows)
            {
                objMES = GetEmpDataTableRow_Pry(row);
            }

            return objMES;
        }


        private Model.Paso_Requerimiento GetEmpDataTableRow_Pry(DataRow dr)
        {
            Model.Paso_Requerimiento objMES = new Model.Paso_Requerimiento();

            objMES.CcodCeGe = Convert.ToString(dr["CcodCeGe"]);
            objMES.CnumRequerimiento = Convert.ToString(dr["CnumRequerimiento"]);
            objMES.DfecPaso = Convert.ToDateTime(dr["DfecPaso"]);
            objMES.CPaso = Convert.ToString(dr["CPaso"]);
            objMES.CestadoPaso = Convert.ToString(dr["CestadoPaso"]);

            return (objMES);
        }

        #endregion

        #region PAC_HojaTrabajo

        public int Elimina_PAC(int Id)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                           "PAC.spp_del_msto_PAC",
                                            Id
                                        );
            }
            catch (Exception)
            {
                Id = 0;
            }
            return Id;
        }

        public Boolean EliminaPacHojaTrabajo_Detalle(int intIdDetalle)
        {

            Boolean blnResult = false;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "PAC.spp_del_mvto_Pac_HojaTrabajo_Detalle",
                                                intIdDetalle
                                                );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }


        public DataSet Reporte_Detalle_PAC(string strCodCompañia,
                  string strAñoProceso,
                  string strVersion,
                  string strCodCentroGestor
                )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("PAC.spp_rpt_mvto_Pac_HojaTrabajo", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }


        public DataTable Combo_PeriodoPAC_Version(string strCodCompañia, string strAñoProceso)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "PAC.spp_cbo_ctrl_pac_HojaTrabajo_Periodo_Version", strCodCompañia, strAñoProceso))
            {
                return ds.Tables[0];
            }
        }

        public Model.Formulacion_Detlle_CodFormulacion Recupera_Formulacion_Detlle_CodFormulacion(string strCodCompañia,
                                                                                                    string strAñoProceso,
                                                                                                    string strCodCentroGestor,
                                                                                                    string strCodFormulacion
                                                                                                 )
        {
            Model.Formulacion_Detlle_CodFormulacion obj = new Model.Formulacion_Detlle_CodFormulacion();
            DataTable dt = new DataTable();
            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "PAC.spp_sel_mvto_Forulacion_HojaTrabajo_CentroGestor",
                                            strCodCompañia,
                                            strAñoProceso,
                                            strCodCentroGestor,
                                            strCodFormulacion
                                           );



            if (dt.Rows.Count > 0)
            {
                obj.cCodFormulacion = Convert.ToString(dt.Rows[0]["cCodFormulacion"]);
                obj.tDescripcionGasto = Convert.ToString(dt.Rows[0]["tDescripcionGasto"]);
                obj.cCodFuenteFinanciamiento = Convert.ToString(dt.Rows[0]["cCodFuenteFinanciamiento"]);
                obj.vNomFuenteFinanciamiento = Convert.ToString(dt.Rows[0]["vNomFuenteFinanciamiento"]);
                obj.fImporte = Convert.ToDouble(dt.Rows[0]["fImporte"]);
                obj.fImporte_1 = Convert.ToDouble(dt.Rows[0]["fImporte_1"]);
                obj.fImporte_2 = Convert.ToDouble(dt.Rows[0]["fImporte_2"]);
                obj.Mes01 = Convert.ToDouble(dt.Rows[0]["Mes01"]);
                obj.Mes02 = Convert.ToDouble(dt.Rows[0]["Mes02"]);
                obj.Mes03 = Convert.ToDouble(dt.Rows[0]["Mes03"]);
                obj.Mes04 = Convert.ToDouble(dt.Rows[0]["Mes04"]);
                obj.Mes05 = Convert.ToDouble(dt.Rows[0]["Mes05"]);
                obj.Mes06 = Convert.ToDouble(dt.Rows[0]["Mes06"]);
                obj.Mes07 = Convert.ToDouble(dt.Rows[0]["Mes07"]);
                obj.Mes08 = Convert.ToDouble(dt.Rows[0]["Mes08"]);
                obj.Mes09 = Convert.ToDouble(dt.Rows[0]["Mes09"]);
                obj.Mes10 = Convert.ToDouble(dt.Rows[0]["Mes10"]);
                obj.Mes11 = Convert.ToDouble(dt.Rows[0]["Mes11"]);
                obj.Mes12 = Convert.ToDouble(dt.Rows[0]["Mes12"]);
                obj.Mes13 = Convert.ToDouble(dt.Rows[0]["Mes13"]);
            }
            return obj;
        }

        public DataSet Lista_Pac_HojaTrabajo(string strCodCompañia,
                                                        string strAñoProceso,
                                                        string strVersion,
                                                        string strCodCentroGestor
                                                    )
        {
            return SqlHelper.ExecuteDataset(strConnection, "PAC.spp_lst_mvto_Pac_HojaTrabajo",
                                                            strCodCompañia,
                                                        strAñoProceso,
                                                        strVersion,
                                                        strCodCentroGestor
                                                            );
        }

        public DataTable Combo_PeriodoPAC(string strCodCompañia)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "PAC.spp_cbo_ctrl_pac_HojaTrabajo_Periodo", strCodCompañia))
            {
                return ds.Tables[0];
            }
        }

        public string Graba_Pac_HojaTrabajo(Model.Pac_HojaTrabajo obj)
        {

            string strCodPac = "";

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "PAC.spp_ins_msto_Pac_HojaTrabajo",
                                            obj.cAñoProceso,
                                            obj.cCodPac,
                                            obj.cCodObjetoContratacion,
                                            obj.tDesContratacion
                                         );

                strCodPac = Convert.ToString(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                strCodPac = "";
            }

            return strCodPac;
        }

        public int Graba_Pac_HojaTrabajo_Detalle(Model.Pac_HojaTrabajo_detalle obj)
        {

            int intIdDetalle = 0;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "PAC.spp_ins_mvto_Pac_HojaTrabajo_Detalle",
                                            obj.iIdCabecera,
                                            obj.cCodCeGe,
                                            obj.cCodPac,
                                            obj.cCodFormulacion,
                                            obj.fImporteFormulacion
                                         );

                intIdDetalle = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdDetalle = 0;
            }

            return intIdDetalle;
        }

        public int Modifica_Pac_HojaTrabajo_Detalle(Model.Pac_HojaTrabajo_detalle obj)
        {

            int intIdDetalle = 0;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "PAC.spp_upd_mvto_Pac_HojaTrabajo_Detalle",
                                            obj.iIdDetalle,
                                            obj.cCodPac,
                                            obj.cCodFormulacion,
                                            obj.fImporteFormulacion
                                         );

                intIdDetalle = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdDetalle = 0;
            }

            return intIdDetalle;
        }

        public int Graba_Pac_HojaTrabajo_Detalle_Item(Model.Pac_HojaTrabajo_detalle_Item obj)
        {
            int intIdItem = 0;

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "PAC.spp_ins_mvto_Pac_HojaTrabajo_Detalle_Item",
                                            obj.iIdDetalle,
                                            obj.cAño,
                                            obj.cMes,
                                            obj.cNumeroAño,
                                            obj.fImporte
                                         );

                intIdItem = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdItem = 0;
            }

            return intIdItem;
        }
        public int Modifica_Pac_HojaTrabajo_Detalle_Item(Model.Pac_HojaTrabajo_detalle_Item obj)
        {



            int intIdItem = 0;

            DataTable dt = new DataTable();

            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "PAC.spp_upd_mvto_Pac_HojaTrabajo_Detalle_Item",
                                            obj.iIdItem,
                                            obj.iIdDetalle,
                                            obj.cAño,
                                            obj.cMes,
                                            obj.cNumeroAño,
                                            obj.fImporte
                                         );

                intIdItem = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdItem = 0;
            }

            return intIdItem;
        }


        public DataSet Ayuda_Pac_HojaTrabajo(string strCodEmpresa,
                                             string strAñoProceso,
                                             string strCodCentroGestor
                                            )
        {
            return SqlHelper.ExecuteDataset(strConnection, "PAC.spp_help_msto_pac_hojatrabajo",
                                                            strCodEmpresa,
                                                            strAñoProceso,
                                                            strCodCentroGestor
                                                            );
        }

        public DataSet Ayuda_Formulacion_HojaTrabajo_CentroGestor(string strCodEmpresa,
                                                                    string strAñoProceso,
                                                                    string strCodCentroGestor,
                                                                    string strLineas
                                                                 )
        {
            return SqlHelper.ExecuteDataset(strConnection, "PAC.spp_help_mvto_Formulacion_HojaTrabajo_CentroGestor",
                                                            strCodEmpresa,
                                                            strAñoProceso,
                                                            strCodCentroGestor,
                                                            strLineas
                                                            );
        }

        public int Recupera_PeriodoPac_IdCabecera(string strCodCompañia,
                                                          string strAñoProceso,
                                                          string strVersion
                                                        )
        {
            DataTable dt = new DataTable();
            using (dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "PAC.spp_cbo_ctrl_pac_HojaTrabajo_Periodo_IdCabecera",
                                                strCodCompañia,
                                                strAñoProceso, strVersion
                                                ))
            {
                return Convert.ToInt32(dt.Rows[0][0]);
            }
        }

        #endregion

        #region Requerimiento
        public DataSet Ayuda_PDF(string strCodCeGe,
                         string strNumDocumento
                       )
        {
            DataSet ds = new DataSet();


            ds = SqlHelper.ExecuteDataset(strConnection,
                                          "Gestion.spp_help_mvto_BuscaPDF",
                                          strCodCeGe,
                                          strNumDocumento
                                          );

            return ds;
        }


        public Model.Requerimiento GetRequerimiento(string strNumRequerimiento)
        {
            DataTable dt = new DataTable();


            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_lst_mvto_Requerimiento_Detalle_Requerimiento_Smart", strNumRequerimiento);

            Model.Requerimiento objMES = new Model.Requerimiento();

            foreach (DataRow row in dt.Rows)
            {
                objMES = GetEmpDataTableRow_Req(row);
            }

            return objMES;
        }

        public List<Model.Requerimiento> GetListaRequerimiento(string strCodCentroGestor)
        {
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_lst_mvto_Requerimiento_Detalle_CentroGestor_Smart", strCodCentroGestor);
            List<Model.Requerimiento> ListaobjMES = new List<Model.Requerimiento>();
            ListaobjMES = new List<Model.Requerimiento>(
                           (from dRow in dt.AsEnumerable()
                            select (GetEmpDataTableRow_Req(dRow)))
                           );


            return ListaobjMES;
        }

        private Model.Requerimiento GetEmpDataTableRow_Req(DataRow dr)
        {
            Model.Requerimiento objMES = new Model.Requerimiento();

            objMES.CnumRequerimiento = Convert.ToString(dr["CnumRequerimiento"]);
            objMES.DfecRequerimiento = Convert.ToDateTime(dr["DfecRequerimiento"]);
            objMES.Tnota = Convert.ToString(dr["Tnota"]);
            objMES.cCodFuenteFinanciamiento = Convert.ToString(dr["cCodFuenteFinanciamiento"]);
            objMES.vNomFuenteFinanciamiento = Convert.ToString(dr["vNomFuenteFinanciamiento"]);
            objMES.CcodCeCo = Convert.ToString(dr["CcodCeCo"]);
            objMES.vNomCeCo = Convert.ToString(dr["vNomCeCo"]);
            objMES.CcodProyecto = Convert.ToString(dr["CcodProyecto"]);
            objMES.vNomCortoProyecto = Convert.ToString(dr["vNomCortoProyecto"]);
            objMES.CcodPosPre = Convert.ToString(dr["CcodPosPre"]);
            objMES.vNomPosPre = Convert.ToString(dr["vNomPosPre"]);
            objMES.CcodClasificador = Convert.ToString(dr["CcodClasificador"]);
            objMES.vNomClasificador = Convert.ToString(dr["vNomClasificador"]);
            objMES.CcodTipoGasto = Convert.ToString(dr["CcodTipoGasto"]);
            objMES.vNomClaseGasto = Convert.ToString(dr["vNomClaseGasto"]);
            objMES.FimporteTotal = Convert.ToDouble(dr["FimporteTotal"]);
            objMES.cPaso = Convert.ToString(dr["cPaso"]);

            return (objMES);
        }






        public Model.Formulacion_Saldo Recupera_Formulacion_Saldo(Model.Formulacion_Saldo obj)
        {
            DataTable dt = new DataTable();


            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_sel_mvto_Formulacion_Saldo", obj.CañoProceso,
                                                                                                     obj.CcodFormulacion
                                            );

            Model.Formulacion_Saldo objMES = new Model.Formulacion_Saldo();

            foreach (DataRow row in dt.Rows)
            {
                objMES = GetSalDataTableRow(row);
            }

            return objMES;
        }

        //public List<Model.Requerimiento> GetListaRequerimiento(string strCodCentroCosto_Gestor)
        //{
        //    DataTable dt = new DataTable();

        //    dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_lst_mvto_Requerimiento_Detalle_CentroCosto_Gestor_Smart", strCodCentroCosto_Gestor);
        //    List<Model.Requerimiento> ListaobjMES = new List<Model.Requerimiento>();
        //    ListaobjMES = new List<Model.Requerimiento>(
        //                   (from dRow in dt.AsEnumerable()
        //                    select (GetEmpDataTableRow(dRow)))
        //                   );


        //    return ListaobjMES;
        //}

        private Model.Formulacion_Saldo GetSalDataTableRow(DataRow dr)
        {
            Model.Formulacion_Saldo objMES = new Model.Formulacion_Saldo();


            objMES.CcodFormulacion = Convert.ToString(dr["CcodFormulacion"]);
            objMES.fAjuste = Convert.ToDouble(dr["fAjuste"]);
            objMES.fFormulado_cero = Convert.ToDouble(dr["fFormulado_cero"]);
            objMES.fFormulado_uno = Convert.ToDouble(dr["fFormulado_uno"]);
            objMES.fFormulado_dos = Convert.ToDouble(dr["fFormulado_dos"]);
            objMES.fFormulado_tres = Convert.ToDouble(dr["fFormulado_tres"]);
            objMES.fGasto_cero = Convert.ToDouble(dr["fGasto_cero"]);
            objMES.fGasto_uno = Convert.ToDouble(dr["fGasto_uno"]);
            objMES.fGasto_dos = Convert.ToDouble(dr["fGasto_dos"]);
            objMES.fGasto_tres = Convert.ToDouble(dr["fGasto_tres"]);
            objMES.FimporteComprometido = Convert.ToDouble(dr["FimporteComprometido"]);
            objMES.FimporteEjecutado = Convert.ToDouble(dr["FimporteEjecutado"]);

            return (objMES);
        }

        #endregion

        #region Requerimiento_Adjunto
        public DataSet Lista_Requerimiento_Adjunto_Codigo(string strNumDocumento)
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Gestion.spp_lst_mvto_Requerimiento_Adjunto_Codigo",
                                            strNumDocumento
                                           );

        }
        public DataSet Lista_Requerimiento_Adjunto(string strNumProcedimiento)
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Gestion.spp_lst_mvto_Requerimiento_Adjunto",
                                            strNumProcedimiento
                                           );

        }

        public DataSet Lista_Requerimiento_Adjunto_Consulta(string strNumProcedimiento)
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Gestion.spp_lst_mvto_Requerimiento_Adjunto_Consulta",
                                            strNumProcedimiento
                                           );

        }

        public Model.Requerimiento_Adjunto Recupera_Requerimiento_Adjunto_Codigo(string strNumRequerimiento)
        {

            DataTable dt = new DataTable();
            Model.Requerimiento_Adjunto obj = new Model.Requerimiento_Adjunto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_sel_mvto_Requerimiento_Adjunto_Codigo", strNumRequerimiento);

            if (dt.Rows.Count > 0)
            {
                obj.IidAdjunto = Convert.ToInt32(dt.Rows[0]["IidAdjunto"]);
                obj.CnumRequerimiento = Convert.ToString(dt.Rows[0]["CnumRequerimiento"]);
                obj.VarchivoOriginal = Convert.ToString(dt.Rows[0]["VarchivoOriginal"]);
                obj.VarchivoActual = Convert.ToString(dt.Rows[0]["VarchivoActual"]);
                obj.Vnombre = Convert.ToString(dt.Rows[0]["Vnombre"]);
                obj.DfechaCreacion = Convert.ToDateTime(dt.Rows[0]["DfechaCreacion"]);
                obj.CcodEmpleado = Convert.ToString(dt.Rows[0]["CcodEmpleado"]);
                obj.CcodEstadoAdjunto = Convert.ToString(dt.Rows[0]["CcodEstadoAdjunto"]);
                obj.Tnota = Convert.ToString(dt.Rows[0]["Tnota"]);
            }
            return obj;
        }


        public Model.Requerimiento_Adjunto Recupera_Requerimiento_Adjunto(int intIdAdjunto)
        {

            DataTable dt = new DataTable();
            Model.Requerimiento_Adjunto obj = new Model.Requerimiento_Adjunto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_sel_mvto_Requerimiento_Adjunto", intIdAdjunto);

            if (dt.Rows.Count > 0)
            {
                obj.IidAdjunto = Convert.ToInt32(dt.Rows[0]["IidAdjunto"]);
                obj.CnumRequerimiento = Convert.ToString(dt.Rows[0]["CnumRequerimiento"]);
                obj.VarchivoOriginal = Convert.ToString(dt.Rows[0]["VarchivoOriginal"]);
                obj.VarchivoActual = Convert.ToString(dt.Rows[0]["VarchivoActual"]);
                obj.Vnombre = Convert.ToString(dt.Rows[0]["Vnombre"]);
                obj.DfechaCreacion = Convert.ToDateTime(dt.Rows[0]["DfechaCreacion"]);
                obj.CcodEmpleado = Convert.ToString(dt.Rows[0]["CcodEmpleado"]);
                obj.CcodEstadoAdjunto = Convert.ToString(dt.Rows[0]["CcodEstadoAdjunto"]);
                obj.Tnota = Convert.ToString(dt.Rows[0]["Tnota"]);
            }
            return obj;


        }
        public int Graba_Requerimiento_Adjunto(Model.Requerimiento_Adjunto obj)
        {

            int intIdRequerimiento_Adjunto = 0;
            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Gestion.spp_ins_mvto_Requerimiento_Adjunto",
                                            obj.CnumRequerimiento,
                                            obj.VarchivoOriginal,
                                            obj.VarchivoActual,
                                            obj.Vnombre,
                                            obj.DfechaCreacion,
                                            obj.CcodEmpleado,
                                            obj.CcodEstadoAdjunto,
                                            obj.Tnota
                                       );

                intIdRequerimiento_Adjunto = Convert.ToInt32(dt.Rows[0][0]);

            }
            catch
            {
                intIdRequerimiento_Adjunto = 0;
            }

            return intIdRequerimiento_Adjunto;

        }
        public int Modifica_Requerimiento_Adjunto(Model.Requerimiento_Adjunto obj)
        {
            int intIdRequerimiento_Adjunto = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Gestion.spp_upd_mvto_Requerimiento_Adjunto",
                                            obj.IidAdjunto,
                                            obj.CnumRequerimiento,
                                            obj.VarchivoOriginal,
                                            obj.VarchivoActual,
                                            obj.Vnombre,
                                            obj.DfechaCreacion,
                                            obj.CcodEmpleado,
                                            obj.CcodEstadoAdjunto,
                                            obj.Tnota
                                       );
            }
            catch
            {
                intIdRequerimiento_Adjunto = 0;
            }

            return intIdRequerimiento_Adjunto;

        }

        public bool Elimina_Requerimiento_Adjunto(int intIdAdjunto)
        {


            bool blnResult = true;

            try
            {

                SqlHelper.ExecuteDataset(strConnection,
                                          "Gestion.spp_del_mvto_Requerimiento_Adjunto",
                                        intIdAdjunto
                                       );
            }
            catch
            {
                blnResult = false;
            }


            return blnResult;


        }

        #endregion

        #region Requerimiento_Cabecera
        public Model.Requerimiento_Cabecera Recupera_Requerimiento_Cabecera_NumRequerimiento(string strNumRequerimiento)
        {
            DataTable dt = new DataTable();
            Model.Requerimiento_Cabecera obj = new Model.Requerimiento_Cabecera();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_sel_mvto_Requerimiento_Cabecera_NumRequerimiento", strNumRequerimiento);

            if (dt.Rows.Count > 0)
            {
                obj.IidRequerimiento_Cabecera = Convert.ToInt32(dt.Rows[0]["IidRequerimiento_Cabecera"]);
                obj.CañoProceso = Convert.ToString(dt.Rows[0]["CañoProceso"]);
                obj.CcodCeGe = Convert.ToString(dt.Rows[0]["CcodCeGe"]);
                obj.VnomCeGe = Convert.ToString(dt.Rows[0]["VnomCeGe"]);
                obj.CnumRequerimiento = Convert.ToString(dt.Rows[0]["CnumRequerimiento"]);
                obj.DfecRequerimiento = Convert.ToDateTime(dt.Rows[0]["DfecRequerimiento"]);
                obj.Tnota = Convert.ToString(dt.Rows[0]["Tnota"]);
                obj.CcodTipoAdquisicion = Convert.ToString(dt.Rows[0]["CcodTipoAdquisicion"]);
                obj.CcodPrioridad = Convert.ToString(dt.Rows[0]["CcodPrioridad"]);
                obj.CcodTipoMoneda = Convert.ToString(dt.Rows[0]["CcodTipoMoneda"]);
                obj.FtipoCambio = Convert.ToDouble(dt.Rows[0]["FtipoCambio"]);
                obj.Tjustificacion = Convert.ToString(dt.Rows[0]["Tjustificacion"]);
                obj.CcodUsuario = Convert.ToString(dt.Rows[0]["CcodUsuario"]);
                obj.CcodEmpleado = Convert.ToString(dt.Rows[0]["CcodEmpleado"]);
                obj.CnumAdjunto = Convert.ToString(dt.Rows[0]["CnumAdjunto"]);
                obj.CcodEstadoRequerimiento = Convert.ToString(dt.Rows[0]["CcodEstadoRequerimiento"]);
                obj.EsInversion = Convert.ToBoolean(dt.Rows[0]["EsInversion"]);
                obj.EsPasajeAereo = Convert.ToBoolean(dt.Rows[0]["EsPasajeAereo"]);
                obj.Cpaso = Convert.ToString(dt.Rows[0]["Cpaso"]);
            }

            return obj;

        }
        public Model.Requerimiento_Cabecera Recupera_Requerimiento_Cabecera(int intIdRequrimiento_Cabecera)
        {
            DataTable dt = new DataTable();
            Model.Requerimiento_Cabecera obj = new Model.Requerimiento_Cabecera();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_sel_mvto_Requerimiento_Cabecera", intIdRequrimiento_Cabecera);

            if (dt.Rows.Count > 0)
            {
                obj.IidRequerimiento_Cabecera = Convert.ToInt32(dt.Rows[0]["IidRequerimiento_Cabecera"]);
                obj.CañoProceso = Convert.ToString(dt.Rows[0]["CañoProceso"]);
                obj.CcodCeGe = Convert.ToString(dt.Rows[0]["CcodCeGe"]);
                obj.CnumRequerimiento = Convert.ToString(dt.Rows[0]["CnumRequerimiento"]);
                obj.DfecRequerimiento = Convert.ToDateTime(dt.Rows[0]["DfecRequerimiento"]);
                obj.Tnota = Convert.ToString(dt.Rows[0]["Tnota"]);
                obj.CcodTipoAdquisicion = Convert.ToString(dt.Rows[0]["CcodTipoAdquisicion"]);
                obj.CcodPrioridad = Convert.ToString(dt.Rows[0]["CcodPrioridad"]);
                obj.CcodTipoMoneda = Convert.ToString(dt.Rows[0]["CcodTipoMoneda"]);
                obj.FtipoCambio = Convert.ToDouble(dt.Rows[0]["FtipoCambio"]);
                obj.Tjustificacion = Convert.ToString(dt.Rows[0]["Tjustificacion"]);
                obj.CcodUsuario = Convert.ToString(dt.Rows[0]["CcodUsuario"]);
                obj.CcodEmpleado = Convert.ToString(dt.Rows[0]["CcodEmpleado"]);
                obj.CnumAdjunto = Convert.ToString(dt.Rows[0]["CnumAdjunto"]);
                obj.CcodEstadoRequerimiento = Convert.ToString(dt.Rows[0]["CcodEstadoRequerimiento"]);
                obj.EsInversion = Convert.ToBoolean(dt.Rows[0]["EsInversion"]);
                obj.EsPasajeAereo = Convert.ToBoolean(dt.Rows[0]["EsPasajeAereo"]);
            }

            return obj;

        }

        public Model.Requerimiento_Cabecera Graba_Requerimiento_Cabecera(Model.Requerimiento_Cabecera obj)
        {

            Model.Requerimiento_Cabecera MRC = new Model.Requerimiento_Cabecera();
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_ins_mvto_Requerimiento_Cabecera", obj.CañoProceso,
                                                                                                            obj.CcodCeGe,
                                                                                                            obj.CnumRequerimiento,
                                                                                                            obj.DfecRequerimiento,
                                                                                                            obj.Tnota,
                                                                                                            obj.CcodTipoAdquisicion,
                                                                                                            obj.CcodPrioridad,
                                                                                                            obj.CcodTipoMoneda,
                                                                                                            obj.FtipoCambio,
                                                                                                            obj.Tjustificacion,
                                                                                                            obj.CcodEmpleado,
                                                                                                            obj.CcodUsuario,
                                                                                                            obj.CnumAdjunto,
                                                                                                            obj.EsInversion,
                                                                                                            obj.EsPasajeAereo,
                                                                                                            obj.CcodSolicitud
                                                          );
                MRC.IidRequerimiento_Cabecera = Convert.ToInt32(dt.Rows[0][0]);
                MRC.CnumRequerimiento = Convert.ToString(dt.Rows[0][1]);
            }
            catch
            {
                MRC.IidRequerimiento_Cabecera = 0;
                MRC.CnumRequerimiento = "";
            }
            return MRC;
        }

        public int Modifica_Requerimiento_Cabecera(Model.Requerimiento_Cabecera obj)
        {
            int intIdRequerimiento_Cabecera = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_upd_mvto_Requerimiento_Cabecera", obj.IidRequerimiento_Cabecera,
                                                                                                            obj.CañoProceso,
                                                                                                            obj.CcodCeGe,
                                                                                                            obj.CnumRequerimiento,
                                                                                                            obj.DfecRequerimiento,
                                                                                                            obj.Tnota,
                                                                                                            obj.CcodTipoAdquisicion,
                                                                                                            obj.CcodPrioridad,
                                                                                                            obj.CcodTipoMoneda,
                                                                                                            obj.FtipoCambio,
                                                                                                            obj.Tjustificacion,
                                                                                                            obj.CcodEmpleado,
                                                                                                            obj.CcodUsuario,
                                                                                                            obj.CnumAdjunto,
                                                                                                            obj.EsInversion,
                                                                                                            obj.EsPasajeAereo
                                                          );
                intIdRequerimiento_Cabecera = obj.IidRequerimiento_Cabecera;
            }
            catch
            {
                intIdRequerimiento_Cabecera = 0;
            }
            return intIdRequerimiento_Cabecera;
        }

        public int Modifica_Requerimiento_Cabecera_NumRequerimiento(Model.Requerimiento_Cabecera obj)
        {
            int intIdRequerimiento_Cabecera = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_upd_mvto_Requerimiento_Cabecera_NumRequerimiento", obj.IidRequerimiento_Cabecera,
                                                                                                            obj.CañoProceso,
                                                                                                            obj.CcodCeGe,
                                                                                                            obj.CnumRequerimiento,
                                                                                                            obj.DfecRequerimiento,
                                                                                                            obj.Tnota,
                                                                                                            obj.CcodTipoAdquisicion,
                                                                                                            obj.CcodPrioridad,
                                                                                                            obj.CcodTipoMoneda,
                                                                                                            obj.FtipoCambio,
                                                                                                            obj.Tjustificacion,
                                                                                                            obj.CcodEmpleado,
                                                                                                            obj.CcodUsuario,
                                                                                                            obj.CnumAdjunto,
                                                                                                            obj.EsInversion,
                                                                                                            obj.EsPasajeAereo
                                                          );
                intIdRequerimiento_Cabecera = obj.IidRequerimiento_Cabecera;
            }
            catch
            {
                intIdRequerimiento_Cabecera = 0;
            }
            return intIdRequerimiento_Cabecera;
        }

        public int Modifica_Requerimiento_Cabecera_Requerimiento(Model.Requerimiento_Cabecera obj)
        {
            SqlHelper.ExecuteNonQuery(strConnection, "Gestion.spp_upd_mvto_Requerimiento_Cabecera_Requerimiento", obj.IidRequerimiento_Cabecera,
                                                                                                        obj.CañoProceso,
                                                                                                        obj.CcodCeGe,
                                                                                                        obj.CnumRequerimiento,
                                                                                                        obj.DfecRequerimiento,
                                                                                                        obj.Tnota,
                                                                                                        obj.CcodTipoAdquisicion,
                                                                                                        obj.CcodPrioridad,
                                                                                                        obj.CcodTipoMoneda,
                                                                                                        obj.FtipoCambio,
                                                                                                        obj.Tjustificacion,
                                                                                                        obj.CcodEmpleado,
                                                                                                        obj.CcodUsuario,
                                                                                                        obj.CnumAdjunto,
                                                                                                        obj.EsInversion,
                                                                                                        obj.EsPasajeAereo
                                                      );

            return obj.IidRequerimiento_Cabecera;
        }

        public int Elimina_Requerimiento_Cabecera(int intIdRequerimiento_Cabecera)
        {
            int intResultado = 0;

            try
            {
                intResultado = Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Gestion.spp_del_mvto_Requerimiento_Cabecera", intIdRequerimiento_Cabecera));

            }
            catch
            {
                intResultado = 0;
            }
            return intResultado;
        }

        public DataSet Lista_Requerimiento_Cabecera_Adjunto(string strNumRequerimiento)
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_requerimiento_Cabecera_Adjunto", strNumRequerimiento);

            return ds;
        }

        public Boolean Graba_Requerimiento_Cabecera_Adjunto(string strNumRequerimiento,
                                                             string strArchivo,
                                                             string strNombreArchivo
                                                           )
        {
            Boolean blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Gestion.spp_ins_mvto_Requerimiento_Cabecera_Adjunto", strNumRequerimiento,
                                                                                                        strArchivo,
                                                                                                        strNombreArchivo
                                          );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public Boolean Elimina_Requerimiento_Cabecera_Adjunto(string strNumRequerimiento,
                                                             string strArchivo,
                                                             string strNombreArchivo
                                                           )
        {
            Boolean blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Gestion.spp_del_mvto_Requerimiento_Cabecera_Adjunto", strNumRequerimiento,
                                                                                                        strArchivo,
                                                                                                        strNombreArchivo
                                          );
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region Requerimiento_Cabecera_Viatico
        public Model.Requerimiento_Cabecera_Viatico Recupera_Requerimiento_Cabecera_Viatico(int intIdRequrimiento_Cabecera_Viatico)
        {
            DataTable dt = new DataTable();
            Model.Requerimiento_Cabecera_Viatico obj = new Model.Requerimiento_Cabecera_Viatico();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_sel_mvto_Requerimiento_Cabecera_Viatico", intIdRequrimiento_Cabecera_Viatico);

            if (dt.Rows.Count > 0)
            {
                obj.iIdRequerimiento_Cabecera_Viatico = Convert.ToInt32(dt.Rows[0]["iIdRequerimiento_Cabecera_Viatico"]); ;
                obj.cNumRequerimiento = Convert.ToString(dt.Rows[0]["cNumRequerimiento"]); ;
                obj.cCodViajero = Convert.ToString(dt.Rows[0]["cCodViajero"]); ;
                obj.vNomViajero = Convert.ToString(dt.Rows[0]["vNomViajero"]); ;
                obj.cNumDocumentoIdentidad = Convert.ToString(dt.Rows[0]["cNumDocumentoIdentidad"]); ;
                obj.cCodAeropuertoOrigen = Convert.ToString(dt.Rows[0]["cCodAeropuertoOrigen"]); ;
                obj.vNomAeropuertoOrigen = Convert.ToString(dt.Rows[0]["vNomAeropuertoOrigen"]); ;
                obj.cCodAeropuertoDestino = Convert.ToString(dt.Rows[0]["cCodAeropuertoDestino"]); ;
                obj.vNomAeropuertoDestino = Convert.ToString(dt.Rows[0]["CañoProceso"]); ;
                obj.dFechaPartida = Convert.ToDateTime(dt.Rows[0]["dFechaPartida"]);
                obj.cHoraPartida = Convert.ToString(dt.Rows[0]["cHoraPartida"]);
                obj.dFechaRetorno = Convert.ToDateTime(dt.Rows[0]["dFechaRetorno"]);
                obj.cHoraRetorno = Convert.ToString(dt.Rows[0]["cHoraRetorno"]);
                obj.bSoloIda = Convert.ToBoolean(dt.Rows[0]["bSoloIda"]);

            }

            return obj;

        }

        public int Graba_Requerimiento_Cabecera_Viatico(Model.Requerimiento_Cabecera_Viatico obj)
        {

            int intIdReuerimiento_Cabecera_Viatico = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "Gestion.spp_ins_mvto_Requerimiento_Cabecera_Viatico",
                                                obj.cNumRequerimiento,
                                                obj.cCodViajero,
                                                obj.cCodAeropuertoOrigen,
                                                obj.cCodAeropuertoDestino,
                                                obj.dFechaPartida,
                                                obj.cHoraPartida,
                                                obj.dFechaRetorno,
                                                obj.cHoraRetorno,
                                                obj.bSoloIda
                                                          );
                intIdReuerimiento_Cabecera_Viatico = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdReuerimiento_Cabecera_Viatico = 0;
            }
            return intIdReuerimiento_Cabecera_Viatico;
        }

        public int Modifica_Requerimiento_Cabecera_Viatico(Model.Requerimiento_Cabecera_Viatico obj)
        {
            int intIdRequerimiento_Cabecera_Viatico = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "Gestion.spp_upd_mvto_Requerimiento_Cabecera_Viatico",
                                                obj.iIdRequerimiento_Cabecera_Viatico,
                                                obj.cNumRequerimiento,
                                                obj.cCodViajero,
                                                obj.cCodAeropuertoOrigen,
                                                obj.cCodAeropuertoDestino,
                                                obj.dFechaPartida,
                                                obj.cHoraPartida,
                                                obj.dFechaRetorno,
                                                obj.cHoraRetorno,
                                                obj.bSoloIda
                                                          );
                intIdRequerimiento_Cabecera_Viatico = obj.iIdRequerimiento_Cabecera_Viatico;
            }
            catch
            {
                intIdRequerimiento_Cabecera_Viatico = 0;
            }
            return intIdRequerimiento_Cabecera_Viatico;
        }


        public Boolean Elimina_Requerimiento_Cabecera_Viatico(int intIdRequerimiento_Cabecera_Viatico)
        {
            Boolean blnResultado = true;

            try
            {
                SqlHelper.ExecuteScalar(strConnection,
                                        "Gestion.spp_del_mvto_Requerimiento_Cabecera_Viatico",
                                         intIdRequerimiento_Cabecera_Viatico);

            }
            catch
            {
                blnResultado = false;
            }
            return blnResultado;
        }

        public DataSet Lista_Requerimiento_Cabecera_Viatico(string strNumRequerimiento)
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_requerimiento_Cabecera_Viatico", strNumRequerimiento);

            return ds;
        }

        #endregion

        #region Requerimiento_Detalle
        public DataSet Recupera_Saldo_vs_Tope(String strAñoProceso,
                                       string strCodTipoGasto,
                                       string strCodFuenteFinanciamiento,
                                       string strCodProyecto,
                                       string strCodComponente
                                      )
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                            "Gestion.spp_sel_mvto_Formulacion_Saldo_vs_tope",
                                            strAñoProceso,
                                            strCodTipoGasto,
                                            strCodFuenteFinanciamiento,
                                            strCodProyecto,
                                            strCodComponente
                                         );
            return ds;
        }

        public Model.Requerimiento_Detalle Recupera_Requerimiento_Detalle(int intIdRequrimiento_Detalle)
        {
            DataTable dt = new DataTable();
            Model.Requerimiento_Detalle obj = new Model.Requerimiento_Detalle();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_sel_mvto_Requerimiento_Detalle", intIdRequrimiento_Detalle);

            if (dt.Rows.Count > 0)
            {
                obj.IidRequerimiento_Cabecera = Convert.ToInt32(dt.Rows[0]["IidRequerimiento_Cabecera"]);
                obj.IidRequerimiento_Detalle = Convert.ToInt32(dt.Rows[0]["IidRequerimiento_Detalle"]);
                obj.CcodFormulacion = Convert.ToString(dt.Rows[0]["CcodFormulacion"]);
                obj.CañoProceso = Convert.ToString(dt.Rows[0]["CañoProceso"]);
                obj.CnumeroAño = Convert.ToString(dt.Rows[0]["CnumeroAño"]);
                obj.Fimporte = Convert.ToDouble(dt.Rows[0]["Fimporte"]);
                obj.FfactorImpuesto = Convert.ToDouble(dt.Rows[0]["FfactorImpuesto"]);
                obj.bIncluyeImpuesto = Convert.ToBoolean(dt.Rows[0]["bIncluyeImpuesto"]);
                obj.CcodUsuario = Convert.ToString(dt.Rows[0]["CcodUsuario"]);
            }

            return obj;

        }

        public int Graba_Requerimiento_Detalle(Model.Requerimiento_Detalle obj)
        {
            int intIdRequerimiento_Detalle = 0;
            DataTable dt = new DataTable();
            
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, 
                    "Gestion.spp_ins_mvto_Requerimiento_Detalle", obj.IidRequerimiento_Cabecera,
                                    obj.CcodFormulacion,
                                    obj.CañoProceso,
                                    obj.CnumeroAño,
                                    obj.Fimporte,
                                    obj.FfactorImpuesto,
                                    obj.bIncluyeImpuesto,
                                    obj.CcodUsuario,
                                    obj.CnumSolicitud
                                                          );
                intIdRequerimiento_Detalle = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdRequerimiento_Detalle = 0;
            }
            return intIdRequerimiento_Detalle;
        }

        public int Modifica_Requerimiento_Detalle(Model.Requerimiento_Detalle obj)
        {
            int intIdRequerimiento_Detalle = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, 
                    "Gestion.spp_upd_mvto_Requerimiento_Detalle", obj.IidRequerimiento_Detalle,
                                    obj.CcodFormulacion,
                                    obj.CañoProceso,
                                    obj.CnumeroAño,
                                    obj.Fimporte,
                                    obj.FfactorImpuesto,
                                    obj.bIncluyeImpuesto,
                                    obj.CcodUsuario,
                                    obj.CnumSolicitud
                                                          );
                intIdRequerimiento_Detalle = obj.IidRequerimiento_Detalle;
            }
            catch
            {
                intIdRequerimiento_Detalle = 0;
            }
            return intIdRequerimiento_Detalle;
        }

        public int Elimina_Requerimiento_Detalle(int intIdRequerimiento_Detalle,
                                                 Boolean EsCofinanciado,
                                                 string strNumRequerimiento,
                                                 string strCodTipoAdquisicion
                                                )
        {
            int intResultado = 0;

            try
            {
                intResultado = Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Gestion.spp_del_mvto_Requerimiento_Detalle",
                                                                       intIdRequerimiento_Detalle,
                                                                       EsCofinanciado,
                                                                       strNumRequerimiento,
                                                                       strCodTipoAdquisicion
                                                                       )
                                              );

            }
            catch
            {
                intResultado = 0;
            }
            return intResultado;
        }

        public DataSet Lista_Requerimiento_Detalle(string strNumRequerimiento)
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_Requerimiento_Detalle", strNumRequerimiento);
            return ds;
        }

        public DataSet Lista_EjecucionPresupuestal_CentroGestor(string strAñoProceso, string strCodCentroGestor)
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_EjecucionPresupuestal_CentroGestor", strAñoProceso, strCodCentroGestor);
            return ds;
        }

        public DataSet Lista_Consulta_LineaFormulacion(string strAñoProceso, string strCodCentroGestor)
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_EjecucionPresupuestal_LineaFormulacion", strAñoProceso, strCodCentroGestor);
            return ds;
        }

        public DataSet Lista_EjecucionPresupuestal_CentroGestor_Grafico(string strAñoProceso,
                                                                       string strCodCentroGestor,
                                                                       string strCodCentroCosto,
                                                                       string strCodClasificador
                                                                      )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection,
                                          "Gestion.spp_lst_mvto_EjecucionPresupuestal_CentroGestor_Grafico",
                                          strAñoProceso,
                                          strCodCentroGestor,
                                          strCodCentroCosto,
                                          strCodClasificador
                                          );
            return ds;
        }

        public DataSet Lista_EjecucionPresupuestal_Proyecto(string strAñoProceso, string strCodProyecto)
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_EjecucionPresupuestal_Proyecto", strAñoProceso, strCodProyecto);
            return ds;
        }


        public DataSet Lista_Requerimiento_Detalle_Requerido(Model.Formulacion_Saldo obj)
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_sel_mvto_Requerimiento_Detalle_Requerido", obj.CañoProceso,
                                                                                                                 obj.CcodFormulacion
                                                                                                                 );
            return ds;
        }

        public DataSet Lista_Requerimiento_Detalle_Ejecutado(Model.Formulacion_Saldo obj)
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_sel_mvto_Requerimiento_Detalle_Ejecutado", obj.CañoProceso,
                                                                                                                 obj.CcodFormulacion
                                                                                                                 );
            return ds;
        }

        public DataSet Lista_Requerimiento_Detalle_Ajustado(Model.Formulacion_Saldo obj)
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_sel_mvto_Requerimiento_Detalle_Ajustado", obj.CañoProceso,
                                                                                                                 obj.CcodFormulacion
                                                                                                                 );
            return ds;
        }

        public DataSet Lista_Requerimiento_Detalle_Requerimiento(Model.Formulacion_Saldo obj)
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_sel_mvto_Requerimiento_Detalle_Requerimiento", obj.CañoProceso,
                                                                                                                 obj.CcodFormulacion
                                                                                                                 );
            return ds;
        }

        public DataSet Lista_Ajustado_CentroGestor(string strAñoProceso,
                                                    string strCodCentroGestor,
                                                    string strCodCentroCosto,
                                                    string strCodClasificador
                                                  )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_Ajustado_CentroGestor", strAñoProceso,
                                                                                                       strCodCentroGestor,
                                                                                                       strCodCentroCosto,
                                                                                                       strCodClasificador
                                         );
            return ds;
        }

        public DataSet Lista_Ajustado_SinAprobacion(string strAñoProceso,
                                                    string strCodCentroGestor
                                                  )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_Ajustado_SinAprobacion", strAñoProceso,
                                                                                                       strCodCentroGestor
                                         );
            return ds;
        }

        public DataSet Lista_Formulado_CentroGestor(string strAñoProceso,
                                                    string strCodCentroGestor,
                                                    string strCodCentroCosto,
                                                    string strCodClasificador
                                                  )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_Formulado_CentroGestor", strAñoProceso,
                                                                                                       strCodCentroGestor,
                                                                                                       strCodCentroCosto,
                                                                                                       strCodClasificador
                                         );
            return ds;
        }

        public DataSet Lista_Disponible_CentroGestor(string strAñoProceso,
                                                    string strCodCentroGestor,
                                                    string strCodCentroCosto,
                                                    string strCodClasificador
                                                  )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_Disponible_CentroGestor", strAñoProceso,
                                                                                                       strCodCentroGestor,
                                                                                                       strCodCentroCosto,
                                                                                                       strCodClasificador
                                         );
            return ds;
        }

        public DataSet Lista_Ejecutado_CentroGestor(string strAñoProceso,
                                                    string strCodCentroGestor,
                                                    string strCodCentroCosto,
                                                    string strCodClasificador
                                                  )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_Ejecutado_CentroGestor", strAñoProceso,
                                                                                                       strCodCentroGestor,
                                                                                                       strCodCentroCosto,
                                                                                                       strCodClasificador
                                         );
            return ds;
        }

        public DataSet Lista_Comprometido_CentroGestor(string strAñoProceso,
                                                    string strCodCentroGestor,
                                                    string strCodCentroCosto,
                                                    string strCodClasificador
                                                  )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_Comprometido_CentroGestor", strAñoProceso,
                                                                                                       strCodCentroGestor,
                                                                                                       strCodCentroCosto,
                                                                                                       strCodClasificador
                                         );
            return ds;
        }


        public DataSet Lista_Formulado_Proyecto(string strAñoProceso,
                                            string strCodFuenteFinanciamiento,
                                            string strCodProyecto,
                                            string strCodClasificador
                                          )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_Formulado_Proyecto", strAñoProceso,
                                                                                                    strCodFuenteFinanciamiento,
                                                                                                       strCodProyecto,
                                                                                                       strCodClasificador
                                         );
            return ds;
        }

        public DataSet Lista_Ajustado_Proyecto(string strAñoProceso,
                                            string strCodFuenteFinanciamiento,
                                            string strCodProyecto,
                                            string strCodClasificador
                                          )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_Ajustado_Proyecto", strAñoProceso,
                                                                                                    strCodFuenteFinanciamiento,
                                                                                                       strCodProyecto,
                                                                                                       strCodClasificador
                                         );
            return ds;
        }

        public DataSet Lista_Disponible_Proyecto(string strAñoProceso,
                                                    string strCodFuenteFinanciamiento,
                                                    string strCodProyecto,
                                                    string strCodClasificador
                                                  )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_Disponible_Proyecto", strAñoProceso,
                                                                                                    strCodFuenteFinanciamiento,
                                                                                                       strCodProyecto,
                                                                                                       strCodClasificador
                                         );
            return ds;
        }

        public DataSet Lista_Ejecutado_Proyecto(string strAñoProceso,
                                                    string strCodFuenteFinanciamiento,
                                                    string strCodProyecto,
                                                    string strCodClasificador
                                                  )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_Ejecutado_Proyecto", strAñoProceso,
                                                                                                    strCodFuenteFinanciamiento,
                                                                                                       strCodProyecto,
                                                                                                       strCodClasificador
                                         );
            return ds;
        }

        public DataSet Lista_Comprometido_Proyecto(string strAñoProceso,
                                                    string strCodFuenteFinanciamiento,
                                                    string strCodProyecto,
                                                    string strCodClasificador
                                                  )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_Comprometido_Proyecto", strAñoProceso,
                                                                                                        strCodFuenteFinanciamiento,
                                                                                                       strCodProyecto,
                                                                                                       strCodClasificador
                                         );
            return ds;
        }
        public DataSet Formato_Requerimiento(string strNumRequerimiento)
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Gestion.spp_lst_mvto_Requerimiento_Detalle_Requerimiento", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cNumRequerimiento", SqlDbType.Char);

            da.SelectCommand.Parameters["@cNumRequerimiento"].Value = strNumRequerimiento;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;
        }

        public DataSet Formato_Requerimiento_Estado(string strCodCentro_Gestor,
                                                    string strEstado,
                                                    string strCodEmpleado
                                                   )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_Requerimiento_Detalle_CentroCosto_Gestor", strCodCentro_Gestor,
                                                                                                                          strEstado,
                                                                                                                          strCodEmpleado
                                                                                                                 );
            return ds;
        }

        public DataSet Formato_Requerimiento_PasePresupuestal(string strCodCompañia,
                                                              string strAñoProceso
                                                            )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_Requerimiento_Detalle_PasePresupuestal", strCodCompañia,
                                                                                                                          strAñoProceso
                                                                                                                 );
            return ds;
        }


        public DataSet Formato_Requerimiento_Cege(string strCodCentro_Gestor)
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Gestion.spp_lst_mvto_Requerimiento_Detalle_CentroCosto", strCodCentro_Gestor
                                                                                                                 );
            return ds;
        }

        public Boolean Formato_Requerimiento_Firma(string strCodCentro_Gestor,
                                                    string strPaso,
                                                    string strNumRequerimiento,
                                                    string strCodEmpleado
                                                   )
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Gestion.spp_ins_mvto_Requerimiento_Firma", strCodCentro_Gestor,
                                                                                                   strPaso,
                                                                                                   strNumRequerimiento,
                                                                                                   strCodEmpleado
                                                                                           );
            }
            catch (Exception)
            {

                blnResult = false;
            }

            return blnResult;
        }

        public Boolean Graba_Requerimiento_PasePresupuestal(string strNumRequerimiento,
                                                                string strCodMensaje,
                                                                string strMensaje,
                                                                string strCodEmpleado,
                                                                string strPaso,
                                                                string strCodCentroGestor
                                                             )
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Gestion.spp_ins_mvto_Requerimiento_PasePresupuestal", strNumRequerimiento,
                                                                                                   strCodMensaje,
                                                                                                   strMensaje,
                                                                                                   strCodEmpleado,
                                                                                                   strPaso,
                                                                                                   strCodCentroGestor
                                                                                           );
            }
            catch (Exception)
            {

                blnResult = false;
            }

            return blnResult;
        }

        public Boolean Formato_Requerimiento_DescarteFirma(string strNumRequerimiento,
                                                            string strCodMotivoDescarte,
                                                            DateTime dateFecDescarte,
                                                            string strMotivoDescarte
                                                          )
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Gestion.spp_ins_mvto_Requerimiento_DescarteFirma", strNumRequerimiento,
                                                                                                             strCodMotivoDescarte,
                                                                                                             dateFecDescarte,
                                                                                                             strMotivoDescarte
                                                                                           );
            }
            catch (Exception)
            {

                blnResult = false;
            }

            return blnResult;
        }

        public Boolean Graba_Requerimiento_DescartePasePresupuestal(string strNumRequerimiento,
                                                    string strCodMotivoDescarte,
                                                    DateTime dateFecDescarte,
                                                    string strMotivoDescarte
                                                  )
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Gestion.spp_ins_mvto_Requerimiento_DescartePasePresupuestal", strNumRequerimiento,
                                                                                                             strCodMotivoDescarte,
                                                                                                             dateFecDescarte,
                                                                                                             strMotivoDescarte
                                                                                           );
            }
            catch (Exception)
            {

                blnResult = false;
            }

            return blnResult;
        }

        public Boolean Formato_Requerimiento_Anulacion(string strNumRequerimiento,
                                                    string strCodMotivoDescarte,
                                                    DateTime dateFecDescarte,
                                                    string strMotivoDescarte
                                                  )
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Gestion.spp_ins_mvto_Requerimiento_Anulacion", strNumRequerimiento,
                                                                                                             strCodMotivoDescarte,
                                                                                                             dateFecDescarte,
                                                                                                             strMotivoDescarte
                                                                                           );
            }
            catch (Exception)
            {

                blnResult = false;
            }

            return blnResult;
        }

        #endregion

        #region Requerimiento_Detalle_Bien
        public Model.Requerimiento_Detalle_Bien Recupera_Requerimiento_Detalle_Bien(int intIdRequrimiento_Detalle_Bien)
        {
            DataTable dt = new DataTable();
            Model.Requerimiento_Detalle_Bien obj = new Model.Requerimiento_Detalle_Bien();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_sel_mvto_Requerimiento_Detalle_Bien", intIdRequrimiento_Detalle_Bien);

            if (dt.Rows.Count > 0)
            {
                obj.IidRequerimiento_Detalle = Convert.ToInt32(dt.Rows[0]["IidRequerimiento_Detalle"]);
                obj.IidRequerimiento_Detalle_Bien = Convert.ToInt32(dt.Rows[0]["IidRequerimiento_Detalle_Bien"]);
                obj.CcodMaterial = Convert.ToString(dt.Rows[0]["CcodMaterial"]);
                obj.TespecificacionTecnica = Convert.ToString(dt.Rows[0]["TespecificacionTecnica"]);
                obj.CcodUnidadMedida = Convert.ToString(dt.Rows[0]["CcodUnidadMedida"]);
                obj.Fcantidad = Convert.ToDouble(dt.Rows[0]["Fcantidad"]);
                obj.FprecioUnitario = Convert.ToDouble(dt.Rows[0]["FprecioUnitario"]);
                obj.FprecioUnitario_Extranjero = Convert.ToDouble(dt.Rows[0]["FprecioUnitario_Extranjero"]);
                obj.Fstock = Convert.ToDouble(dt.Rows[0]["Fstock"]);
            }

            return obj;

        }

        public int Graba_Requerimiento_Detalle_Bien(Model.Requerimiento_Detalle_Bien obj)
        {
            int intIdRequerimiento_Detalle_Bien = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_ins_mvto_Requerimiento_Detalle_Bien", obj.IidRequerimiento_Detalle,
                                                                                                                    obj.CcodMaterial,
                                                                                                                    obj.TespecificacionTecnica,
                                                                                                                    obj.CcodUnidadMedida,
                                                                                                                    obj.Fcantidad,
                                                                                                                    obj.FprecioUnitario,
                                                                                                                    obj.FprecioUnitario_Extranjero,
                                                                                                                    obj.Fstock
                                                          );
                intIdRequerimiento_Detalle_Bien = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdRequerimiento_Detalle_Bien = 0;
            }
            return intIdRequerimiento_Detalle_Bien;
        }

        public int Modifica_Requerimiento_Detalle_Bien(Model.Requerimiento_Detalle_Bien obj)
        {
            int intIdRequerimiento_Detalle_Bien = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_upd_mvto_Requerimiento_Detalle_Bien", obj.IidRequerimiento_Detalle_Bien,
                                                                                                                    obj.CcodMaterial,
                                                                                                                    obj.TespecificacionTecnica,
                                                                                                                    obj.CcodUnidadMedida,
                                                                                                                    obj.Fcantidad,
                                                                                                                    obj.FprecioUnitario,
                                                                                                                    obj.FprecioUnitario_Extranjero,
                                                                                                                    obj.Fstock
                                                          );
                intIdRequerimiento_Detalle_Bien = obj.IidRequerimiento_Detalle_Bien;
            }
            catch
            {
                intIdRequerimiento_Detalle_Bien = 0;
            }
            return intIdRequerimiento_Detalle_Bien;
        }

        public int Elimina_Requerimiento_Detalle_Bien(int intIdRequerimiento_Detalle_Bien)
        {
            int intResultado = 0;

            try
            {
                intResultado = Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Gestion.spp_del_mvto_Requerimiento_Detalle_Bien", intIdRequerimiento_Detalle_Bien));

            }
            catch
            {
                intResultado = 0;
            }
            return intResultado;
        }

        #endregion

        #region Requerimiento_Detalle_CoFinanciado
        public Model.Requerimiento_Detalle_CoFinanciado Recupera_Requerimiento_Detalle_CoFinanciado(string strNumRequerimiento)
        {
            DataTable dt = new DataTable();
            Model.Requerimiento_Detalle_CoFinanciado obj = new Model.Requerimiento_Detalle_CoFinanciado();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_sel_mvto_requerimiento_detalle_cofinanciado", strNumRequerimiento);

            if (dt.Rows.Count > 0)
            {
                obj.IidRequerimiento_Cofinanciado = Convert.ToInt32(dt.Rows[0]["IidRequerimiento_Cofinanciado"]);
                obj.CnumRequerimiento = Convert.ToString(dt.Rows[0]["CnumRequerimiento"]);
                obj.CcodPosPre = Convert.ToString(dt.Rows[0]["CcodPosPre"]);
                obj.CcodClasificador = Convert.ToString(dt.Rows[0]["CcodClasificador"]);
                obj.CcodFuenteFinanciamiento = Convert.ToString(dt.Rows[0]["CcodFuenteFinanciamiento"]);
                obj.CcodCeCo = Convert.ToString(dt.Rows[0]["CcodCeCo"]);
                obj.CcodServicio = Convert.ToString(dt.Rows[0]["CcodServicio"]);
                obj.CcodMaterial = Convert.ToString(dt.Rows[0]["CcodMaterial"]);
                obj.Fimporte = Convert.ToDouble(dt.Rows[0]["Fimporte"]);
                obj.Tnota = Convert.ToString(dt.Rows[0]["Tnota"]);
            }

            return obj;

        }

        public int Graba_Requerimiento_Detalle_CoFinanciado(Model.Requerimiento_Detalle_CoFinanciado obj)
        {
            int intIdRequerimiento_CoFinanciado = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_ins_mvto_Requerimiento_Detalle_CoFinanciado", obj.CnumRequerimiento,
                                                                                                            obj.Tnota,
                                                                                                            obj.Fimporte
                                                          );
                intIdRequerimiento_CoFinanciado = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdRequerimiento_CoFinanciado = 0;
            }
            return intIdRequerimiento_CoFinanciado;
        }

        public int Modifica_Requerimiento_Detalle_CoFinanciado(Model.Requerimiento_Detalle_CoFinanciado obj)
        {
            int intIdRequerimiento_CoFinanciado = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_upd_mvto_Requerimiento_Detalle_CoFinanciado", obj.CnumRequerimiento,
                                                                                                            obj.Tnota,
                                                                                                            obj.Fimporte
                                                          );
                intIdRequerimiento_CoFinanciado = obj.IidRequerimiento_Cofinanciado;
            }
            catch
            {
                intIdRequerimiento_CoFinanciado = 0;
            }
            return intIdRequerimiento_CoFinanciado;
        }

        public int Elimina_Requerimiento_Detalle_CoFinanciado(string strNumRequerimiento)
        {
            int intResultado = 0;

            try
            {
                intResultado = Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Gestion.spp_del_mvto_Requerimiento_Detalle_CoFinanciado", strNumRequerimiento));

            }
            catch
            {
                intResultado = 0;
            }
            return intResultado;
        }

        #endregion

        #region Requerimiento_Detalle_Cronograma

        public bool modifica_Requerimiento_Detalle_Cronograma(Model.Requerimiento_Detalle_Cronograma obj)
        {
            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                            "Gestion.spp_upd_mvto_Requerimiento_Detalle_Cronograma",
                                            obj.IidRequerimiento_Detalle,
                                            obj.CañoProceso,
                                            obj.Fene,
                                            obj.Ffeb,
                                            obj.Fmar,
                                            obj.Fabr,
                                            obj.Fmay,
                                            obj.Fjun,
                                            obj.Fjul,
                                            obj.Fago,
                                            obj.Fset,
                                            obj.Foct,
                                            obj.Fnov,
                                            obj.Fdic
                                         );
            }
            catch (Exception)
            {
                blnResult = false;
            }

            return blnResult;
        }

        public bool elimina_Requerimiento_Detalle_Cronograma(int intIdCronograma)
        {
            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                            "Gestion.spp_del_mvto_Requerimiento_Detalle_Cronograma",
                                            intIdCronograma
                                         );
            }
            catch (Exception)
            {
                blnResult = false;
            }

            return blnResult;
        }


        public bool graba_Requerimiento_Detalle_Cronograma(Model.Requerimiento_Detalle_Cronograma obj)
        {
            bool blnResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                            "Gestion.spp_ins_mvto_Requerimiento_Detalle_Cronograma",
                                            obj.IidRequerimiento_Detalle,
                                            obj.CañoProceso,
                                            obj.Fene,
                                            obj.Ffeb,
                                            obj.Fmar,
                                            obj.Fabr,
                                            obj.Fmay,
                                            obj.Fjun,
                                            obj.Fjul,
                                            obj.Fago,
                                            obj.Fset,
                                            obj.Foct,
                                            obj.Fnov,
                                            obj.Fdic
                                         );
            }
            catch (Exception)
            {
                blnResult = false;
            }

            return blnResult;
        }

        public Model.Requerimiento_Detalle_Cronograma recupera_Requerimiento_Detalle_Cronograma(int intIdRequerimiento_Detalle)
        {
            Model.Requerimiento_Detalle_Cronograma MRDC = new Model.Requerimiento_Detalle_Cronograma();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "Gestion.spp_sel_mvto_Requerimiento_Detalle_Cronograma",
                                             intIdRequerimiento_Detalle
                                            );
            if (dt.Rows.Count > 0)
            {
                MRDC.IidRequerimiento_Detalle = Convert.ToInt32(dt.Rows[0]["IidRequerimiento_Detalle"]);
                MRDC.CañoProceso = Convert.ToString(dt.Rows[0]["CañoProceso"]);
                MRDC.Fene = Convert.ToDouble(dt.Rows[0]["Fene"]);
                MRDC.Ffeb = Convert.ToDouble(dt.Rows[0]["Ffeb"]);
                MRDC.Fmar = Convert.ToDouble(dt.Rows[0]["Fmar"]);
                MRDC.Fabr = Convert.ToDouble(dt.Rows[0]["Fabr"]);
                MRDC.Fmay = Convert.ToDouble(dt.Rows[0]["Fmay"]);
                MRDC.Fjun = Convert.ToDouble(dt.Rows[0]["Fjun"]);
                MRDC.Fjul = Convert.ToDouble(dt.Rows[0]["Fjul"]);
                MRDC.Fago = Convert.ToDouble(dt.Rows[0]["Fago"]);
                MRDC.Fset = Convert.ToDouble(dt.Rows[0]["Fset"]);
                MRDC.Foct = Convert.ToDouble(dt.Rows[0]["Foct"]);
                MRDC.Fnov = Convert.ToDouble(dt.Rows[0]["Fnov"]);
                MRDC.Fdic = Convert.ToDouble(dt.Rows[0]["Fdic"]);
            }

            return MRDC;

        }

        public DataTable lista_Requerimiento_Detalle_Cronograma(int intIdRequerimiento_Detalle)
        {
            return SqlHelper.ExecuteDataTable(strConnection,
                                             "Gestion.spp_lst_mvto_Requerimiento_Detalle_Cronograma",
                                             intIdRequerimiento_Detalle
                                            );

        }

        #endregion

        #region Requerimiento_Detalle_Servicio
        public Model.Requerimiento_Detalle_Servicio Recupera_Requerimiento_Detalle_Servicio(int intIdRequrimiento_Detalle_Servicio)
        {
            DataTable dt = new DataTable();
            Model.Requerimiento_Detalle_Servicio obj = new Model.Requerimiento_Detalle_Servicio();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_sel_mvto_Requerimiento_Detalle_Servicio", intIdRequrimiento_Detalle_Servicio);

            if (dt.Rows.Count > 0)
            {
                obj.IidRequerimiento_Detalle = Convert.ToInt32(dt.Rows[0]["IidRequerimiento_Detalle"]);
                obj.IidRequerimiento_Detalle_Servicio = Convert.ToInt32(dt.Rows[0]["IidRequerimiento_Detalle_Servicio"]);
                obj.CcodServicio = Convert.ToString(dt.Rows[0]["CcodServicio"]);
                obj.TespecificacionTecnica = Convert.ToString(dt.Rows[0]["TespecificacionTecnica"]);
                obj.Fprecio = Convert.ToDouble(dt.Rows[0]["Fprecio"]);
                obj.Fprecio_Extranjero = Convert.ToDouble(dt.Rows[0]["Fprecio_Extranjero"]);
            }

            return obj;

        }

        public int Graba_Requerimiento_Detalle_Servicio(Model.Requerimiento_Detalle_Servicio obj)
        {
            int intIdRequerimiento_Detalle_Servicio = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_ins_mvto_Requerimiento_Detalle_Servicio", obj.IidRequerimiento_Detalle,
                                                                                                                    obj.CcodServicio,
                                                                                                                    obj.TespecificacionTecnica,
                                                                                                                    obj.Fprecio,
                                                                                                                    obj.Fprecio_Extranjero
                                                          );
                intIdRequerimiento_Detalle_Servicio = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdRequerimiento_Detalle_Servicio = 0;
            }
            return intIdRequerimiento_Detalle_Servicio;
        }

        public int Modifica_Requerimiento_Detalle_Servicio(Model.Requerimiento_Detalle_Servicio obj)
        {
            int intIdRequerimiento_Detalle_Servicio = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_upd_mvto_Requerimiento_Detalle_Servicio", obj.IidRequerimiento_Detalle_Servicio,
                                                                                                                    obj.CcodServicio,
                                                                                                                    obj.TespecificacionTecnica,
                                                                                                                    obj.Fprecio,
                                                                                                                    obj.Fprecio_Extranjero
                                                          );
                intIdRequerimiento_Detalle_Servicio = obj.IidRequerimiento_Detalle_Servicio;
            }
            catch
            {
                intIdRequerimiento_Detalle_Servicio = 0;
            }
            return intIdRequerimiento_Detalle_Servicio;
        }

        public int Elimina_Requerimiento_Detalle_Servicio(int intIdRequerimiento_Detalle_Servicio)
        {
            int intResultado = 0;

            try
            {
                intResultado = Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Gestion.spp_del_mvto_Requerimiento_Detalle_Servicio", intIdRequerimiento_Detalle_Servicio));

            }
            catch
            {
                intResultado = 0;
            }
            return intResultado;
        }

        #endregion

        #region ReasignacionAPP
        public List<Model.Ajuste> GetReasignacion(string strNumAjuste)
        {
            DataTable dt = new DataTable();


            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_srl_mvto_Ajuste_Reasignacion_Smart", strNumAjuste);

            List<Model.Ajuste> ListaobjMES = new List<Model.Ajuste>();
            ListaobjMES = new List<Model.Ajuste>(
                           (from dRow in dt.AsEnumerable()
                            select (GetEmpDataTableRowAPP(dRow)))
                           );

            return ListaobjMES;
        }

        public List<Model.Ajuste> GetListaReasignacion(string strCodCentroGestor)
        {
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Gestion.spp_lst_mvto_Ajuste_Detalle_CentroGestor_Smart", strCodCentroGestor);
            List<Model.Ajuste> ListaobjMES = new List<Model.Ajuste>();
            ListaobjMES = new List<Model.Ajuste>(
                           (from dRow in dt.AsEnumerable()
                            select (GetEmpDataTableRowAPP(dRow)))
                           );


            return ListaobjMES;
        }

        private Model.Ajuste GetEmpDataTableRowAPP(DataRow dr)
        {
            Model.Ajuste objMES = new Model.Ajuste();

            objMES.CnumAjuste = Convert.ToString(dr["CnumAjuste"]).TrimEnd();
            objMES.DfecAjuste = Convert.ToDateTime(dr["DfecAjuste"]);
            objMES.FimporteTotal = Convert.ToDouble(dr["FimporteTotal"]);
            objMES.Tmotivo = Convert.ToString(dr["Tmotivo"]).TrimEnd();
            objMES.CtipoAjuste = Convert.ToString(dr["CtipoAjuste"]).TrimEnd();
            objMES.cCodFuenteFinanciamiento_O = Convert.ToString(dr["cCodFuenteFinanciamiento_O"]).TrimEnd();
            objMES.VnomFuenteFinanciamiento_O = Convert.ToString(dr["VnomFuenteFinanciamiento_O"]).TrimEnd();
            objMES.CcodCeCo_O = Convert.ToString(dr["CcodCeCo_O"]).TrimEnd();
            objMES.VnomCeCo_O = Convert.ToString(dr["VnomCeCo_O"]).TrimEnd();
            objMES.CcodCeGe_O = Convert.ToString(dr["CcodCeGe_O"]).TrimEnd();
            objMES.VnomCeGe_O = Convert.ToString(dr["VnomCeGe_O"]).TrimEnd();
            objMES.CcodFormulacion_O = Convert.ToString(dr["CcodFormulacion_O"]).TrimEnd();
            objMES.CcodProyecto_O = Convert.ToString(dr["CcodProyecto_O"]).TrimEnd();
            objMES.VnomCortoProyecto_O = Convert.ToString(dr["VnomCortoProyecto_O"]).TrimEnd();
            objMES.CcodComponente_O = Convert.ToString(dr["CcodComponente_O"]).TrimEnd();
            objMES.VnomComponente_O = Convert.ToString(dr["VnomComponente_O"]).TrimEnd();
            objMES.CcodPosPre_O = Convert.ToString(dr["CcodPosPre_O"]).TrimEnd();
            objMES.VnomPosPre_O = Convert.ToString(dr["VnomPosPre_O"]).TrimEnd();
            objMES.CcodClasificador_O = Convert.ToString(dr["CcodClasificador_O"]).TrimEnd();
            objMES.VnomClasificador_O = Convert.ToString(dr["VnomClasificador_O"]).TrimEnd();
            objMES.CcodClaseGasto_O = Convert.ToString(dr["CcodClaseGasto_O"]).TrimEnd();
            objMES.VnomClaseGasto_O = Convert.ToString(dr["VnomClaseGasto_O"]).TrimEnd();
            objMES.TdescripcionGasto_O = Convert.ToString(dr["TdescripcionGasto_O"]).TrimEnd();
            objMES.CcodFuenteFinanciamiento_D = Convert.ToString(dr["CcodFuenteFinanciamiento_D"]).TrimEnd();
            objMES.VnomFuenteFinanciamiento_D = Convert.ToString(dr["VnomFuenteFinanciamiento_D"]).TrimEnd();
            objMES.CcodCeCo_D = Convert.ToString(dr["CcodCeCo_D"]).TrimEnd();
            objMES.VnomCeCo_D = Convert.ToString(dr["VnomCeCo_D"]).TrimEnd();
            objMES.CcodCeGe_D = Convert.ToString(dr["CcodCeGe_D"]).TrimEnd();
            objMES.VnomCeGe_D = Convert.ToString(dr["VnomCeGe_D"]).TrimEnd();
            objMES.CcodFormulacion_D = Convert.ToString(dr["CcodFormulacion_D"]).TrimEnd();
            objMES.CcodProyecto_D = Convert.ToString(dr["CcodProyecto_D"]).TrimEnd();
            objMES.VnomCortoProyecto_D = Convert.ToString(dr["VnomCortoProyecto_D"]).TrimEnd();
            objMES.CcodComponente_D = Convert.ToString(dr["CcodComponente_D"]).TrimEnd();
            objMES.VnomComponente_D = Convert.ToString(dr["VnomComponente_D"]).TrimEnd();
            objMES.CcodPosPre_D = Convert.ToString(dr["CcodPosPre_D"]).TrimEnd();
            objMES.VnomPosPre_D = Convert.ToString(dr["VnomPosPre_D"]).TrimEnd();
            objMES.CcodClasificador_D = Convert.ToString(dr["CcodClasificador_D"]).TrimEnd();
            objMES.VnomClasificador_D = Convert.ToString(dr["VnomClasificador_D"]).TrimEnd();
            objMES.CcodClaseGasto_D = Convert.ToString(dr["CcodClaseGasto_D"]).TrimEnd();
            objMES.VnomClaseGasto_D = Convert.ToString(dr["VnomClaseGasto_D"]).TrimEnd();
            objMES.TdescripcionGasto_D = Convert.ToString(dr["TdescripcionGasto_D"]).TrimEnd();
            objMES.Cpaso = Convert.ToString(dr["Cpaso"]).TrimEnd();

            return (objMES);
        }

        #endregion

        #region Clasificacion
        public DataSet Ayuda_Clasificador(string strCodEmpresa)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_Clasificador",
                                      strCodEmpresa
                                     );

            return ds;
        }

        public DataSet Ayuda_TipoClasificador(string strCodEmpresa)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_ctrl_TipoClasificador",
                                      strCodEmpresa
                                     );

            return ds;
        }

        public DataSet Ayuda_AgrupadorClasificador(string strCodEmpresa)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_AgrupadorClasificador",
                                      strCodEmpresa
                                     );

            return ds;
        }

        public DataSet Ayuda_Clasificacion_Formulacion(string strAñoProceso)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_Clasificacion_Formulacion", strAñoProceso
                                     );

            return ds;
        }

        #endregion

        #region PosicionPresupuestal_SAP
        public DataSet Lista_PosicionPresupuestal_SAP(string strCodCompañia)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_lst_msto_PosicionPresupuestal_SAP",
                                      strCodCompañia
                                     );


            return ds;
        }
        public DataSet Ayuda_PosicionPresupuestal_SAP(string strCodCompañia)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_PosicionPresupuestal_SAP",
                                      strCodCompañia
                                     );

            return ds;
        }


        public Model.PosicionPresupuestal_SAP Recupera_PosicionPresupuestal_SAP_Codigo(string strCodCompañia,
                                                                                string strCodPosPre
                                                                              )
        {
            DataTable dt = new DataTable();
            Model.PosicionPresupuestal_SAP obj = new Model.PosicionPresupuestal_SAP();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Formulacion.spp_sel_msto_PosicionPresupuestal_SAP_Codigo",
                                            strCodCompañia,
                                            strCodPosPre
                                            );

            if (dt.Rows.Count > 0)
            {
                obj.IidPosPre = Convert.ToInt32(dt.Rows[0]["IidPosPre"]);
                obj.CcodPosPre = Convert.ToString(dt.Rows[0]["CcodPosPre"]);
                obj.VnomPosPre = Convert.ToString(dt.Rows[0]["VnomPosPre"]);
            }

            return obj;

        }

        public Model.PosicionPresupuestal_SAP Recupera_PosicionPresupuestal_SAP(int intIdCodPosPre)
        {
            DataTable dt = new DataTable();
            Model.PosicionPresupuestal_SAP obj = new Model.PosicionPresupuestal_SAP();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_msto_PosicionPresupuestal_SAP", intIdCodPosPre);

            if (dt.Rows.Count > 0)
            {
                obj.IidPosPre = Convert.ToInt32(dt.Rows[0]["IidPosPre"]);
                obj.CcodPosPre = Convert.ToString(dt.Rows[0]["CcodPosPre"]);
                obj.VnomPosPre = Convert.ToString(dt.Rows[0]["VnomPosPre"]);
            }

            return obj;

        }

        public int Graba_PosicionPresupuestal_SAP(Model.PosicionPresupuestal_SAP obj)
        {
            int intIdPosPre = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_ins_msto_PosicionPresupuestal_SAP", obj.CcodPosPre,
                                                                                                                        obj.VnomPosPre
                                                          );
                intIdPosPre = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdPosPre = 0;
            }
            return intIdPosPre;
        }

        public int Modifica_PosicionPresupuestal_SAP(Model.PosicionPresupuestal_SAP obj)
        {
            int intIdPosPre = 0;

            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_upd_msto_PosicionPresupuestal_SAP", obj.IidPosPre,
                                                                                                                obj.CcodPosPre,
                                                                                                                obj.VnomPosPre
                                                          );
                intIdPosPre = obj.IidPosPre;
            }
            catch
            {
                intIdPosPre = 0;
            }
            return intIdPosPre;
        }

        public bool Elimina_PosicionPresupuestal_SAP(int intIdPosPre)
        {
            Boolean blnResult = false;

            try
            {
                Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Formulacion.spp_del_msto_PosicionPresupuestal_SAP", intIdPosPre));
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region PosicionPresupuestal
        public DataSet Lista_PosicionPresupuestal(string strCodCompañia)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_lst_msto_PosicionPresupuestal",
                                      strCodCompañia
                                     );


            return ds;
        }

        public DataSet Ayuda_PosicionPresupuestal_FuenteFinanciamiento(string strCodCompañia,
                                                                        string strCodFuenteFinanciamiento
                                                                      )
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_PosicionPresupuestal_FuenteFinanciamiento",
                                      strCodCompañia,
                                      strCodFuenteFinanciamiento
                                     );

            return ds;
        }

        public DataSet Ayuda_PosicionPresupuestal_HojaTrabajo(string strCodCompañia)
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_PosicionPresupuestal_HojaTrabajo",
                                      strCodCompañia
                                     );

            return ds;
        }

        public DataSet Ayuda_PosicionPresupuestal_Formulacion_HojaTrabajo(string strCodCompañia,
                                                                         string strAñoProceso,
                                                                         string strPeriodo,
                                                                         string strCodCentroGestor,
                                                                         string strCodCentroCosto,
                                                                         string strCodTipoFormulacion,
                                                                         string strCodSubTipoFormulacion,
                                                                         bool blnManejavariosCentroCosto
                                                                        )
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_PosicionPresupuestal_Formulacion_HojaTrabajo",
                                      strCodCompañia,
                                      strAñoProceso,
                                      strPeriodo,
                                      strCodCentroGestor,
                                      strCodCentroCosto,
                                      strCodTipoFormulacion,
                                      strCodSubTipoFormulacion,
                                      blnManejavariosCentroCosto
                                     );

            return ds;
        }

        public DataSet Ayuda_PosicionPresupuestal_Total(string strCodCompañia)
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_PosicionPresupuestal_Total",
                                      strCodCompañia
                                     );

            return ds;
        }

        public DataSet Ayuda_Orden_Total(string strCodCompañia)
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_Orden_Total",
                                      strCodCompañia
                                     );

            return ds;
        }


        public DataSet Ayuda_PosicionPresupuestal(string strCodCompañia)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_PosicionPresupuestal",
                                      strCodCompañia
                                     );

            return ds;
        }


        public DataSet Ayuda_PosicionPresupuestal_Clasificador(string strCodCompañia,
                                                                string strCodClasificador,
                                                               string strCodFuenteFinanciamiento
                                                                )
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_PosicionPresupuestal_Clasificador",
                                      strCodCompañia,
                                      strCodClasificador,
                                      strCodFuenteFinanciamiento
                                     );

            return ds;
        }

        public DataSet Ayuda_PosicionPresupuestal_Formulacion(string strCodCompañia,
                                                              string strAñoProceso
                                                            )
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_msto_PosicionPresupuestal_Formulacion",
                                      strCodCompañia,
                                      strAñoProceso
                                     );

            return ds;
        }


        public Model.PosicionPresupuestal Recupera_PosicionPresupuestal_Codigo(string strCodCompañia,
                                                                                string strCodPosPre
                                                                              )
        {
            DataTable dt = new DataTable();
            Model.PosicionPresupuestal obj = new Model.PosicionPresupuestal();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Formulacion.spp_sel_msto_PosicionPresupuestal_Codigo",
                                            strCodCompañia,
                                            strCodPosPre
                                            );

            if (dt.Rows.Count > 0)
            {
                obj.IidPosPre = Convert.ToInt32(dt.Rows[0]["IidPosPre"]);
                obj.CcodPosPre = Convert.ToString(dt.Rows[0]["CcodPosPre"]);
                obj.VnomPosPre = Convert.ToString(dt.Rows[0]["VnomPosPre"]);
                obj.CcodClasificador = Convert.ToString(dt.Rows[0]["CcodClasificador"]);
                obj.VnomClasificador = Convert.ToString(dt.Rows[0]["VnomClasificador"]);
                obj.CcodObjetoContratacion = Convert.ToString(dt.Rows[0]["CcodObjetoContratacion"]);
                obj.CcodClaseGasto = Convert.ToString(dt.Rows[0]["CcodClaseGasto"]);
                obj.VnomClaseGasto = Convert.ToString(dt.Rows[0]["VnomClaseGasto"]);
                obj.CcodFamiliaPosicionPresupuestal = Convert.ToString(dt.Rows[0]["CcodFamiliaPosicionPresupuestal"]);
                obj.CcodFormato = Convert.ToString(dt.Rows[0]["CcodFormato"]);
            }

            return obj;

        }

        public Model.PosicionPresupuestal Recupera_PosicionPresupuestal(int intIdCodPosPre)
        {
            DataTable dt = new DataTable();
            Model.PosicionPresupuestal obj = new Model.PosicionPresupuestal();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_msto_PosicionPresupuestal", intIdCodPosPre);

            if (dt.Rows.Count > 0)
            {
                obj.IidPosPre = Convert.ToInt32(dt.Rows[0]["IidPosPre"]);
                obj.CcodPosPre = Convert.ToString(dt.Rows[0]["CcodPosPre"]);
                obj.VnomPosPre = Convert.ToString(dt.Rows[0]["VnomPosPre"]);
                obj.CcodClasificador = Convert.ToString(dt.Rows[0]["CcodClasificador"]);
                obj.CcodObjetoContratacion = Convert.ToString(dt.Rows[0]["CcodObjetoContratacion"]);
                obj.CcodFamiliaPosicionPresupuestal = Convert.ToString(dt.Rows[0]["CcodFamiliaPosicionPresupuestal"]);
            }

            return obj;

        }

        public int Graba_PosicionPresupuestal(Model.PosicionPresupuestal obj)
        {
            int intIdPosPre = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_ins_msto_PosicionPresupuestal", obj.CcodPosPre,
                                                                                                                        obj.VnomPosPre,
                                                                                                                        obj.CcodClasificador,
                                                                                                                        obj.CcodObjetoContratacion,
                                                                                                                        obj.CcodFamiliaPosicionPresupuestal,
                                                                                                                        obj.CcodClaseGasto,
                                                                                                                        obj.CcodFormato
                                                          );
                intIdPosPre = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdPosPre = 0;
            }
            return intIdPosPre;
        }

        public int Modifica_PosicionPresupuestal(Model.PosicionPresupuestal obj)
        {
            int intIdPosPre = 0;

            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_upd_msto_PosicionPresupuestal", obj.IidPosPre,
                                                                                                                obj.CcodPosPre,
                                                                                                                obj.VnomPosPre,
                                                                                                                obj.CcodClasificador,
                                                                                                                obj.CcodObjetoContratacion,
                                                                                                                obj.CcodFamiliaPosicionPresupuestal,
                                                                                                                obj.CcodClaseGasto,
                                                                                                                obj.CcodFormato
                                                          );
                intIdPosPre = obj.IidPosPre;
            }
            catch
            {
                intIdPosPre = 0;
            }
            return intIdPosPre;
        }

        public bool Elimina_PosicionPresupuestal(int intIdPosPre)
        {
            Boolean blnResult = false;

            try
            {
                Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Formulacion.spp_del_msto_PosicionPresupuestal", intIdPosPre));
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region FuenteFinanciamiento
        public DataSet Ayuda_FuenteFinanciamiento_Reporte(string strCodEmpresa)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Formulacion.spp_help_msto_FuenteFinanciamiento_Reporte",
                                             strCodEmpresa
                                           );
        }

        public DataSet Combo_FuenteFinanciamiento_Reporte(string strCodEmpresa)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Formulacion.spp_cbo_msto_FuenteFinanciamiento_Reporte",
                                            strCodEmpresa
                                            );
        }

        public DataSet Ayuda_FuenteFinanciamiento_Proyecto( string strCodEmpresa, string strCodProyecto)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Proyecto.spp_help_msto_FuenteFinanciamiento_Proyecto",
                                             strCodEmpresa,
                                             strCodProyecto
                                           );

        }

        public DataSet Ayuda_FuenteFinanciamiento_Proyecto_Reasignacion(string strCodEmpresa, string strCodProyecto)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Proyecto.spp_help_msto_FuenteFinanciamiento_Proyecto_Reasignacion",
                                             strCodEmpresa,
                                             strCodProyecto
                                           );

        }
        public DataSet Ayuda_FuenteFinanciamiento()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "General.spp_help_ctrl_FuenteFinanciamiento"

                                           );

        }

        public DataSet Combo_FuenteFinanciamiento()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "General.spp_cbo_msto_FuenteFinanciamiento"
                                           );

        }

        public DataSet Combo_FuenteFinanciamiento_Pase()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "General.spp_cbo_msto_FuenteFinanciamiento_Pase"
                                           );

        }

        public Model.FuenteFinanciamiento Recupera_FuenteFinanciamiento(int intIdFuenteFinanciamiento)
        {
            DataTable dt = new DataTable();
            Model.FuenteFinanciamiento obj = new Model.FuenteFinanciamiento();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_msto_FuenteFinanciamiento", intIdFuenteFinanciamiento);

            if (dt.Rows.Count > 0)
            {
                obj.IidFuenteFinanciamiento = Convert.ToInt32(dt.Rows[0]["IidFuenteFinanciamiento"]);
                obj.CcodFuenteFinanciamiento = Convert.ToString(dt.Rows[0]["CcodFuenteFinanciamiento"]);
                obj.VnomFuenteFinanciamiento = Convert.ToString(dt.Rows[0]["VnomFuenteFinanciamiento"]);
            }
            return obj;
        }

        public Model.FuenteFinanciamiento Recupera_FuenteFinanciamiento_Codigo( string strCodEmpresa,
                                                                                string strCodFuenteFinanciamiento
                                                                                )
        {
            DataTable dt = new DataTable();
            Model.FuenteFinanciamiento obj = new Model.FuenteFinanciamiento();

            dt = SqlHelper.ExecuteDataTable(strConnection, 
                                            "Proyecto.spp_sel_msto_FuenteFinanciamiento_Codigo", 
                                            strCodEmpresa,
                                            strCodFuenteFinanciamiento
                                            );

            if (dt.Rows.Count > 0)
            {
                obj.IidFuenteFinanciamiento = Convert.ToInt32(dt.Rows[0]["IidFuenteFinanciamiento"]);
                obj.CcodFuenteFinanciamiento = Convert.ToString(dt.Rows[0]["CcodFuenteFinanciamiento"]);
                obj.VnomFuenteFinanciamiento = Convert.ToString(dt.Rows[0]["VnomFuenteFinanciamiento"]);
            }
            return obj;
        }


        public int Graba_FuenteFinanciamiento(Model.FuenteFinanciamiento obj)
        {
            int intIdFuenteFinanciamiento = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "Proyecto.spp_ins_msto_FuenteFinanciamiento",
                                                obj.CcodEmpresa,
                                                obj.CcodFuenteFinanciamiento,
                                                obj.VnomFuenteFinanciamiento
                                                );
                intIdFuenteFinanciamiento = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch (Exception)
            {

                intIdFuenteFinanciamiento = 0;
            }
            return intIdFuenteFinanciamiento;
        }

        public int Modifica_FuenteFinanciamiento(Model.FuenteFinanciamiento obj)
        {
            int intIdFuenteFinanciamiento = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "Proyecto.spp_upd_msto_FuenteFinanciamiento",
                                                obj.IidFuenteFinanciamiento,
                                                obj.CcodFuenteFinanciamiento,
                                                obj.VnomFuenteFinanciamiento
                                                );
                intIdFuenteFinanciamiento = obj.IidFuenteFinanciamiento;
            }
            catch (Exception)
            {

                intIdFuenteFinanciamiento = 0;
            }
            return intIdFuenteFinanciamiento;
        }

        public DataSet Lista_FuenteFinanciamiento(string strCodEmpresa)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "Proyecto.spp_lst_msto_FuenteFinanciamiento",
                                             strCodEmpresa
                                           );

        }

        public Boolean Elimina_FuenteFinanciamiento(int intIdFuenteFinanciamiento)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                             "General.spp_del_msto_FuenteFinanciamiento"
                                           );
            }
            catch (Exception)
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region Familia_PosicionPresupustal
        public DataSet Combo_FamiliaPosicionPresupuestal()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_cbo_ctrl_FamiliaPosicionPresupuestal"
                                     );

            return ds;
        }

        public DataSet Ayuda_FamiliaPosicionPresupuestal()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_ctrl_FamiliaPosicionPresupuestal"
                                     );

            return ds;
        }

        public Model.FamiliaPosicionPresupuestal Recupera_FamiliaPosicionPresupuestal(int intIdFamiliaPosicionPresupuestal)
        {
            DataTable dt = new DataTable();
            Model.FamiliaPosicionPresupuestal obj = new Model.FamiliaPosicionPresupuestal();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_ctrl_FamiliaPosicionPresupuestal", intIdFamiliaPosicionPresupuestal);

            if (dt.Rows.Count > 0)
            {
                obj.IidFamiliaPosicionPresupuestal = Convert.ToInt32(dt.Rows[0]["IidFamiliaPosicionPresupuestal"]);
                obj.CcodFamiliaPosicionPresupuestal = Convert.ToString(dt.Rows[0]["CcodFamiliaPosicionPresupuestal"]);
                obj.VnomFamiliaPosicionPresupuestal = Convert.ToString(dt.Rows[0]["VnomFamiliaPosicionPresupuestal"]);
            }
            return obj;
        }


        public Model.FamiliaPosicionPresupuestal Recupera_FamiliaPosicionPresupuestal_Codigo(string strCodFamiliaPosicionPresupuestal)
        {
            DataTable dt = new DataTable();
            Model.FamiliaPosicionPresupuestal obj = new Model.FamiliaPosicionPresupuestal();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_ctrl_FamiliaPosicionPresupuestal_Codigo", strCodFamiliaPosicionPresupuestal);

            if (dt.Rows.Count > 0)
            {
                obj.IidFamiliaPosicionPresupuestal = Convert.ToInt32(dt.Rows[0]["IidFamiliaPosicionPresupuestal"]);
                obj.CcodFamiliaPosicionPresupuestal = Convert.ToString(dt.Rows[0]["CcodFamiliaPosicionPresupuestal"]);
                obj.VnomFamiliaPosicionPresupuestal = Convert.ToString(dt.Rows[0]["VnomFamiliaPosicionPresupuestal"]);
            }
            return obj;
        }

        public int Graba_FamiliaPosicionPresupuestal(Model.FamiliaPosicionPresupuestal obj)
        {

            int intIdFamiliaPosicionPresupuestal;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_ins_ctrl_FamiliaPosicionPresupuestal",
                                            obj.CcodFamiliaPosicionPresupuestal,
                                            obj.VnomFamiliaPosicionPresupuestal
                                         );

                intIdFamiliaPosicionPresupuestal = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdFamiliaPosicionPresupuestal = 0;
            }

            return intIdFamiliaPosicionPresupuestal;
        }

        public int Modifica_FamiliaPosicionPresupuestal(Model.FamiliaPosicionPresupuestal obj)
        {



            int intIdFamiliaPosicionPresupuestal = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_upd_ctrl_FamiliaPosicionPresupuestal",
                                            obj.IidFamiliaPosicionPresupuestal,
                                            obj.CcodFamiliaPosicionPresupuestal,
                                            obj.VnomFamiliaPosicionPresupuestal

                                         );

                intIdFamiliaPosicionPresupuestal = obj.IidFamiliaPosicionPresupuestal;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdFamiliaPosicionPresupuestal = 0;
            }

            return intIdFamiliaPosicionPresupuestal;
        }

        public bool Elimina_FamiliaPosicionPresupuestal(int intIdFamiliaPosicionPresupuestal)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_del_ctrl_FamiliaPosicionPresupuestal",
                                           intIdFamiliaPosicionPresupuestal
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_FamiliaPosicionPresupuestal()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_lst_ctrl_FamiliaPosicionPresupuestal"
                                     );

            return ds;
        }

        #endregion

        #region LineaPosicionPresupuestal
        public DataSet Combo_LineaPosicionPresupuestal(string strCodFamiliaPosicionPresupuestal)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_cbo_ctrl_LineaPosicionPresupuestal",
                                      strCodFamiliaPosicionPresupuestal
                                     );

            return ds;
        }

        public DataSet Ayuda_LineaPosicionPresupuestal(string strCodFamiliaPosicionPresupuestal)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_help_ctrl_LineaPosicionPresupuestal",
                                      strCodFamiliaPosicionPresupuestal
                                     );

            return ds;
        }

        public Model.LineaPosicionPresupuestal Recupera_LineaPosicionPresupuestal(int intIdLineaPosicionPresupuestal)
        {
            DataTable dt = new DataTable();
            Model.LineaPosicionPresupuestal obj = new Model.LineaPosicionPresupuestal();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_ctrl_LineaPosicionPresupuestal", intIdLineaPosicionPresupuestal);

            if (dt.Rows.Count > 0)
            {
                obj.IidLineaPosicionPresupuestal = Convert.ToInt32(dt.Rows[0]["IidLineaPosicionPresupuestal"]);
                obj.CcodFamiliaPosicionPresupuestal = Convert.ToString(dt.Rows[0]["CcodFamiliaPosicionPresupuestal"]);
                obj.CcodLineaPosicionPresupuestal = Convert.ToString(dt.Rows[0]["CcodLineaPosicionPresupuestal"]);
                obj.VnomLineaPosicionPresupuestal = Convert.ToString(dt.Rows[0]["VnomLineaPosicionPresupuestal"]);
                obj.CcodEstado = Convert.ToString(dt.Rows[0]["CcodEstado"]);
            }
            return obj;
        }


        public Model.LineaPosicionPresupuestal Recupera_LineaPosicionPresupuestal_Codigo(string strCodLineaPosicionPresupuestal)
        {
            DataTable dt = new DataTable();
            Model.LineaPosicionPresupuestal obj = new Model.LineaPosicionPresupuestal();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_ctrl_LineaPosicionPresupuestal_Codigo", strCodLineaPosicionPresupuestal);

            if (dt.Rows.Count > 0)
            {
                obj.IidLineaPosicionPresupuestal = Convert.ToInt32(dt.Rows[0]["IidLineaPosicionPresupuestal"]);
                obj.CcodFamiliaPosicionPresupuestal = Convert.ToString(dt.Rows[0]["CcodFamiliaPosicionPresupuestal"]);
                obj.CcodLineaPosicionPresupuestal = Convert.ToString(dt.Rows[0]["CcodLineaPosicionPresupuestal"]);
                obj.VnomLineaPosicionPresupuestal = Convert.ToString(dt.Rows[0]["VnomLineaPosicionPresupuestal"]);
                obj.CcodEstado = Convert.ToString(dt.Rows[0]["CcodEstado"]);
            }
            return obj;
        }

        public int Graba_LineaPosicionPresupuestal(Model.LineaPosicionPresupuestal obj)
        {

            int intIdLineaPosicionPresupuestal;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_ins_ctrl_LineaPosicionPresupuestal",
                                            obj.CcodFamiliaPosicionPresupuestal,
                                            obj.CcodLineaPosicionPresupuestal,
                                            obj.VnomLineaPosicionPresupuestal,
                                            obj.CcodEstado
                                         );

                intIdLineaPosicionPresupuestal = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdLineaPosicionPresupuestal = 0;
            }

            return intIdLineaPosicionPresupuestal;
        }

        public int Modifica_LineaPosicionPresupuestal(Model.LineaPosicionPresupuestal obj)
        {



            int intIdLineaPosicionPresupuestal = 0;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_upd_ctrl_LineaPosicionPresupuestal",
                                            obj.IidLineaPosicionPresupuestal,
                                            obj.CcodFamiliaPosicionPresupuestal,
                                            obj.CcodLineaPosicionPresupuestal,
                                            obj.VnomLineaPosicionPresupuestal,
                                            obj.CcodEstado

                                         );

                intIdLineaPosicionPresupuestal = obj.IidLineaPosicionPresupuestal;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdLineaPosicionPresupuestal = 0;
            }

            return intIdLineaPosicionPresupuestal;
        }

        public bool Elimina_LineaPosicionPresupuestal(int intIdLineaPosicionPresupuestal)
        {



            bool blnResult;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_del_ctrl_LineaPosicionPresupuestal",
                                           intIdLineaPosicionPresupuestal
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_LineaPosicionPresupuestal(string strCodFamiliaPosicionPresupuestal)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Formulacion.spp_lst_ctrl_LineaPosicionPresupuestal",
                                      strCodFamiliaPosicionPresupuestal
                                     );

            return ds;
        }

        #endregion

        #region TipoClasificador
        public DataSet Combo_TipoClasificador()
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_cbo_ctrl_TipoClasificador"))
            {
                return ds;
            }

        }
        #endregion

        #region TopePresupuestal
        public Double Recupera_TopePresupuestal_Saldo(Model.TopePresupuestal obj
                                                              )
        {
            Double DblTopePresupuestal = 0.0;

            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "Formulacion.spp_sel_mvto_TopePresupuestal_Saldo",
                                            obj.CcodEmpresa,
                                            obj.CañoProceso,
                                            obj.Cversion,
                                            obj.CcodTipoGasto,
                                            obj.CcodFuenteFinanciamiento,
                                            obj.CcodProyecto,
                                            obj.CcodComponente
                                            );

            if (dt.Rows.Count == 0)
            {
                DblTopePresupuestal = 0;

            }
            else
            {
                DblTopePresupuestal = Convert.ToDouble(dt.Rows[0]["FTopePresupuestal"]);
            }

            return DblTopePresupuestal;

        }

        public Model.TopePresupuestal Recupera_TopePresupuestal(int intIdTopePresupuestal)
        {
            DataTable dt = new DataTable();
            Model.TopePresupuestal obj = new Model.TopePresupuestal();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Formulacion.spp_sel_mvto_TopePresupuestal", intIdTopePresupuestal);

            if (dt.Rows.Count > 0)
            {
                obj.IidTopePresupuestal = Convert.ToInt32(dt.Rows[0]["IidTopePresupuestal"]);
                obj.CcodEmpresa = Convert.ToString(dt.Rows[0]["CcodEmpresa"]);
                obj.CañoProceso = Convert.ToString(dt.Rows[0]["CcodEmpresa"]);
                obj.Cversion = Convert.ToString(dt.Rows[0]["Cversion"]);
                obj.CcodTipoGasto = Convert.ToString(dt.Rows[0]["CcodTipoGasto"]);
                obj.CcodFuenteFinanciamiento = Convert.ToString(dt.Rows[0]["CcodFuenteFinanciamiento"]);
                obj.CcodProyecto = Convert.ToString(dt.Rows[0]["CcodProyecto"]);
                obj.CcodComponente = Convert.ToString(dt.Rows[0]["CcodComponente"]);
                obj.FTopePresupuestal = Convert.ToDouble(dt.Rows[0]["FTopePresupuestal"]);
            }

            return obj;

        }

        public int Graba_TopePresupuestal(Model.TopePresupuestal obj)
        {
            int intIdTopePresupuestal = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "[Formulacion].[spp_ins_mvto_TopePresupuestal]", obj.CcodEmpresa,
                                                                                                                obj.CañoProceso,
                                                                                                                obj.Cversion,
                                                                                                                obj.CcodTipoGasto,
                                                                                                                obj.CcodFuenteFinanciamiento,
                                                                                                                obj.CcodProyecto,
                                                                                                                obj.CcodComponente,
                                                                                                                obj.FTopePresupuestal


                                                          );
                intIdTopePresupuestal = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdTopePresupuestal = 0;
            }
            return intIdTopePresupuestal;
        }

        public int Modifica_TopePresupuestal(Model.TopePresupuestal obj)
        {
            int intIdTopePresupuestal = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "[Formulacion].[spp_upd_mvto_TopePresupuestal]", obj.IidTopePresupuestal,
                                                                                                                obj.CcodEmpresa,
                                                                                                                obj.CañoProceso,
                                                                                                                obj.Cversion,
                                                                                                                obj.CcodTipoGasto,
                                                                                                                obj.CcodFuenteFinanciamiento,
                                                                                                                obj.CcodProyecto,
                                                                                                                obj.CcodComponente,
                                                                                                                obj.FTopePresupuestal

                                                          );
                intIdTopePresupuestal = obj.IidTopePresupuestal;
            }
            catch
            {
                intIdTopePresupuestal = 0;
            }
            return intIdTopePresupuestal;
        }

        public bool Elimina_TopePresupuestal(int intidTopePresupuestal)
        {
            Boolean resultado = true;

            try
            {
                SqlHelper.ExecuteScalar(strConnection, "[Formulacion].[spp_del_mvto_TopePresupuestal]", intidTopePresupuestal);

            }
            catch
            {
                resultado = false;
            }
            return resultado;
        }


        public DataSet Lista_TopePresupuestal(string strCodEmpresa, string strAñoProceso, string strVersion)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                  "Formulacion.spp_lst_mvto_TopePresupuestal",
                                                  strCodEmpresa,
                                                  strAñoProceso,
                                                  strVersion)) ;
            {
                return ds;
            }
        }

        #endregion

        #region Empleado_CentroGestor
        public DataSet Arbol_Empleado()
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_Arbol_Empleado_CentroGestor"))
            {
                return ds;
            }

        }
        public int Graba_Empleado_CentroGestor(int iCodEmpleado, string strCodCege)
        {
            int resultado = 0;
            DataTable dt = new DataTable();
            try
            {
                resultado = Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Formulacion.spp_ins_Empleado_CentroGestor", iCodEmpleado,
                                                                                                                strCodCege
                                                          ));

            }
            catch
            {
                resultado = 0;
            }
            return resultado;
        }

        public int Modifica_Empleado_CentroGestor(int iCodEmpleado, string strCodCege)
        {
            int resultado = 0;
            DataTable dt = new DataTable();
            try
            {
                resultado = Convert.ToInt32(SqlHelper.ExecuteScalar(strConnection, "Formulacion.spp_upd_Empleado_CentroGestor", iCodEmpleado,
                                                                                                                strCodCege
                                                          ));

            }
            catch
            {
                resultado = 0;
            }
            return resultado;
        }

        public DataSet Recupera_Empleado_CentroGestor(int iCodEmpleado)
        {

            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "Formulacion.spp_Recupera_Empleado_CentroGestor", iCodEmpleado))
            {
                return ds;
            }

        }

        #endregion

        #region Reporte
        public DataSet Lista_Formulacion_ResumenClasificador_Gasto(string strCodCompañia,
                                                          string strAñoProceso,
                                                          string strVersion,
                                                          string strCodFuenteFinanciamiento,
                                                          string strCodCentroGestor,
                                                          string strCodProyecto,
                                                          int intTipoAgrupacion
                                                        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_Formulacion_Detalle_ResumenClasificador_Gasto", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodFuenteFinanciamiento", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodProyecto", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@iTipoAgrupacion", SqlDbType.Int);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cCodFuenteFinanciamiento"].Value = strCodFuenteFinanciamiento;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodProyecto"].Value = strCodProyecto;
            da.SelectCommand.Parameters["@iTipoAgrupacion"].Value = intTipoAgrupacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Lista_Formulacion_HojaTrabajo_Gasto(string strCodCompañia,
                                                                  string strAñoProceso,
                                                                  string strVersion,
                                                                  string strCodFuenteFinanciamiento,
                                                                  string strCodCentroGestor,
                                                                  string strCodProyecto,
                                                                  int intTipoAgrupacion
                                                                )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_Formulacion_Detalle_HojaTrabajo_Gasto", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodFuenteFinanciamiento", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodProyecto", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@iTipoAgrupacion", SqlDbType.Int);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cCodFuenteFinanciamiento"].Value = strCodFuenteFinanciamiento;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodProyecto"].Value = strCodProyecto;
            da.SelectCommand.Parameters["@iTipoAgrupacion"].Value = intTipoAgrupacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Lista_Formulacion_ResumenClasificador_Ingreso(string strCodCompañia,
                                                                  string strAñoProceso,
                                                                  string strVersion,
                                                                  string strCodFuenteFinanciamiento,
                                                                  string strCodCentroGestor,
                                                                  string strCodProyecto,
                                                                  int intTipoAgrupacion
                                                                )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_Formulacion_Detalle_ResumenClasificador_Ingreso", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodFuenteFinanciamiento", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodProyecto", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@iTipoAgrupacion", SqlDbType.Int);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cCodFuenteFinanciamiento"].Value = strCodFuenteFinanciamiento;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodProyecto"].Value = strCodProyecto;
            da.SelectCommand.Parameters["@iTipoAgrupacion"].Value = intTipoAgrupacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Lista_Formulacion_HojaTrabajo_Ingreso(string strCodCompañia,
                                                          string strAñoProceso,
                                                          string strVersion,
                                                          string strCodFuenteFinanciamiento,
                                                          string strCodCentroGestor,
                                                          string strCodProyecto,
                                                          int intTipoAgrupacion
                                                        )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_Formulacion_Detalle_HojaTrabajo_Ingreso", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodFuenteFinanciamiento", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodProyecto", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@iTipoAgrupacion", SqlDbType.Int);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cCodFuenteFinanciamiento"].Value = strCodFuenteFinanciamiento;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodProyecto"].Value = strCodProyecto;
            da.SelectCommand.Parameters["@iTipoAgrupacion"].Value = intTipoAgrupacion;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }


        public DataSet Lista_FormulacionReporteProyecto(string cCodCompañia, string strAñoProceso, string strVersion, string cCodTipoFormulacion, string cCodProyecto)
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_sel_mvto_Formulacion_Detalle_Proyecto_cod_proyecto", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodProyecto", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = cCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = cCodTipoFormulacion;
            da.SelectCommand.Parameters["@cCodProyecto"].Value = cCodProyecto;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;
        }

        public DataSet Lista_FormulacionReporteProyecto_CentroGestor(string cCodCompañia,
                                                                    string cCodTipoFormulacion,
                                                                    string cCodProyecto,
                                                                    string cCodCentroGestor_Gestor
            )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_Formulacion_Detalle_Proyecto_CentroGestor", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodProyecto", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = cCodCompañia;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = cCodTipoFormulacion;
            da.SelectCommand.Parameters["@cCodProyecto"].Value = cCodProyecto;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = cCodCentroGestor_Gestor;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;
        }


        public DataSet Lista_FormulacionReporteContrato(string cCodCompañia, string cNumeroOrden, string cTipoOrden)
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_sel_mvto_Formulacion_Detalle_Proyecto_cod_proyecto", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cNumeroOrden", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cTipoOrden", SqlDbType.Char);
            da.SelectCommand.Parameters["@cCodCompañia"].Value = cCodCompañia;
            da.SelectCommand.Parameters["@cNumeroOrden"].Value = cNumeroOrden;
            da.SelectCommand.Parameters["@cTipoOrden"].Value = cTipoOrden;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;
        }


        public DataSet Help_FormulacionTipoFormulacion()
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_help_tipo_Formulacion", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;
        }

        public DataSet Lista_FormulacionReporteProyecto_Cege(string cCodCompañia, string strAñoProceso, string strVersion, string cCodTipoFormulacion, string CodCentroGestor)
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_sel_mvto_Formulacion_Detalle_Proyecto_cod_proyecto_Cege", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodTipoFormulacion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@CodCentroGestor", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = cCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cCodTipoFormulacion"].Value = cCodTipoFormulacion;
            da.SelectCommand.Parameters["@CodCentroGestor"].Value = CodCentroGestor;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_4P(string strCodCompañia,
                                  string strAñoProceso,
                                  string strVersion,
                                  string strCodFuenteFinanciamiento,
                                  string strCodCentroGestor,
                                  string strCodProyecto
                                )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_lst_mvto_Formulacion_Detalle_Formato4P", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodFuenteFinanciamiento", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodProyecto", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cCodFuenteFinanciamiento"].Value = strCodFuenteFinanciamiento;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodProyecto"].Value = strCodProyecto;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Formato_4E(string strCodCompañia,
                                  string strAñoProceso,
                                  string strCodFuenteFinanciamiento,
                                  string strCodCentroGestor,
                                  string strCodProyecto
                                )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Gestion.spp_lst_mvto_Requerimiento_Detalle_Formato4E", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodFuenteFinanciamiento", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodProyecto", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cCodFuenteFinanciamiento"].Value = strCodFuenteFinanciamiento;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodProyecto"].Value = strCodProyecto;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Reporte_Detalle_Formulacion(string strCodCompañia,
                                  string strAñoProceso,
                                  string strVersion,
                                  string strCodFuenteFinanciamiento,
                                  string strCodCentroGestor,
                                  string strCodProyecto
                                )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Formulacion.spp_rpt_mvto_Formulacion_Detalle", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cAñoProceso", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cVersion", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodFuenteFinanciamiento", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodCentroGestor", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@cCodProyecto", SqlDbType.Char);

            da.SelectCommand.Parameters["@cCodCompañia"].Value = strCodCompañia;
            da.SelectCommand.Parameters["@cAñoProceso"].Value = strAñoProceso;
            da.SelectCommand.Parameters["@cVersion"].Value = strVersion;
            da.SelectCommand.Parameters["@cCodFuenteFinanciamiento"].Value = strCodFuenteFinanciamiento;
            da.SelectCommand.Parameters["@cCodCentroGestor"].Value = strCodCentroGestor;
            da.SelectCommand.Parameters["@cCodProyecto"].Value = strCodProyecto;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Lista_FormulacionReporteProyecto_Saldo(string cCodCompañia)
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Logistica.spp_lst_mvto_SaldoProyecto_NoIncluidosEnConfiguracion", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodCompañia", SqlDbType.Char);


            da.SelectCommand.Parameters["@cCodCompañia"].Value = cCodCompañia;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;

        }

        public DataSet Reporte_ResumenGasto(string strCodCompañia,
                                            string strPeriodoInicial,
                                            string strPeriodoFinal,
                                            int intTipoReporte
                                            )
        {
            DataSet ds = new DataSet();

            return SqlHelper.ExecuteDataset(strConnection,
                                             "Gestion.spp_rpt_mvto_ResumenGasto",
                                             strCodCompañia,
                                             strPeriodoInicial,
                                             strPeriodoFinal,
                                             intTipoReporte
                                            );

        }

        #endregion

        #endregion

        #region PROYECTO
        #region CadenaFuncionalProyecto
        public DataSet Ayuda_CadenaFuncionalProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_CadenaFuncionalProyecto");
        }
        public DataSet Lista_CadenaFuncionalProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_ctrl_CadenaFuncionalProyecto");
        }

        public DataSet Combo_CadenaFuncionalProyecto_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_CadenaFuncionalProyecto_Reporte");
        }

        public DataSet Combo_CadenaFuncionalProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_CadenaFuncionalProyecto");
        }

        public DataSet Combo_SituacionActualProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_SituacionActualProyecto");
        }
        public Model.CadenaFuncionalProyecto Recupera_CadenaFuncionalProyecto(int intIdCadenaFuncionalProyecto)
        {
            DataTable dt = new DataTable();
            Model.CadenaFuncionalProyecto obj = new Model.CadenaFuncionalProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_CadenaFuncionalProyecto", intIdCadenaFuncionalProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidCadenaFuncionalProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodCadenaFuncionalProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomCadenaFuncionalProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public Model.CadenaFuncionalProyecto Recupera_CadenaFuncionalProyecto_codigo(string strCodCadenaFuncionalProyecto)
        {

            DataTable dt = new DataTable();
            Model.CadenaFuncionalProyecto obj = new Model.CadenaFuncionalProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_CadenaFuncionalProyecto_codigo", strCodCadenaFuncionalProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidCadenaFuncionalProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodCadenaFuncionalProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomCadenaFuncionalProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;

        }
        public int Graba_CadenaFuncionalProyecto(Model.CadenaFuncionalProyecto obj)
        {
            int intIdCadenaFuncionalProyecto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_ctrl_CadenaFuncionalProyecto", obj.CcodCadenaFuncionalProyecto,
                                                                                     obj.VnomCadenaFuncionalProyecto
                                                          );
                intIdCadenaFuncionalProyecto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdCadenaFuncionalProyecto = 0;
            }
            return intIdCadenaFuncionalProyecto;
        }
        public int Modifica_CadenaFuncionalProyecto(Model.CadenaFuncionalProyecto obj)
        {

            int intIdCadenaFuncionalProyecto = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_ctrl_CadenaFuncionalProyecto", obj.IidCadenaFuncionalProyecto,
                                                                                     obj.CcodCadenaFuncionalProyecto,
                                                                                     obj.VnomCadenaFuncionalProyecto
                                                          );
                intIdCadenaFuncionalProyecto = obj.IidCadenaFuncionalProyecto;
            }
            catch
            {
                intIdCadenaFuncionalProyecto = 0;
            }
            return intIdCadenaFuncionalProyecto;
        }

        public bool Elimina_CadenaFuncionalProyecto(int intIdCadenaFuncionalProyecto)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_ctrl_CadenaFuncionalProyecto", intIdCadenaFuncionalProyecto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region ClaseProyecto
        public DataSet Ayuda_ClaseProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_ClaseProyecto");
        }
        public DataSet Lista_ClaseProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_ctrl_ClaseProyecto");
        }

        public DataSet Naturaleza_ClaseProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_ClaseProyecto");
        }

        public DataSet Combo_ClaseProyecto_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_ClaseProyecto_Reporte");
        }
        public DataSet Combo_ClaseProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_ClaseProyecto");
        }
        public Model.ClaseProyecto Recupera_ClaseProyecto(int intIdClaseProyecto)
        {
            DataTable dt = new DataTable();
            Model.ClaseProyecto obj = new Model.ClaseProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_ClaseProyecto", intIdClaseProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidClaseProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodGrupoClaseProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomGrupoClaseProyecto = Convert.ToString(dt.Rows[0][2]);
                obj.CcodClaseProyecto = Convert.ToString(dt.Rows[0][3]);
                obj.VnomClaseProyecto = Convert.ToString(dt.Rows[0][4]);
            }
            return obj;
        }

        public Model.ClaseProyecto Recupera_ClaseProyecto_codigo(string strCodClaseProyecto)
        {

            DataTable dt = new DataTable();
            Model.ClaseProyecto obj = new Model.ClaseProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_ClaseProyecto_codigo", strCodClaseProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidClaseProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodGrupoClaseProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomGrupoClaseProyecto = Convert.ToString(dt.Rows[0][2]);
                obj.CcodClaseProyecto = Convert.ToString(dt.Rows[0][3]);
                obj.VnomClaseProyecto = Convert.ToString(dt.Rows[0][4]);
            }
            return obj;

        }
        public int Graba_ClaseProyecto(Model.ClaseProyecto obj)
        {
            int intIdClaseProyecto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_ctrl_ClaseProyecto", obj.CcodClaseProyecto,
                                                                                                      obj.VnomClaseProyecto,
                                                                                                      obj.CcodGrupoClaseProyecto
                                                          );
                intIdClaseProyecto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdClaseProyecto = 0;
            }
            return intIdClaseProyecto;
        }
        public int Modifica_ClaseProyecto(Model.ClaseProyecto obj)
        {

            int intIdClaseProyecto = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_ctrl_ClaseProyecto", obj.IidClaseProyecto,
                                                                                     obj.CcodClaseProyecto,
                                                                                     obj.VnomClaseProyecto,
                                                                                     obj.CcodGrupoClaseProyecto
                                                          );
                intIdClaseProyecto = obj.IidClaseProyecto;
            }
            catch
            {
                intIdClaseProyecto = 0;
            }
            return intIdClaseProyecto;
        }

        public bool Elimina_ClaseProyecto(int intIdClaseProyecto)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_ctrl_ClaseProyecto", intIdClaseProyecto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }
        #endregion

        #region EstadoProyecto
        public DataSet Ayuda_EstadoProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_EstadoProyecto");
        }

        public DataSet Lista_EstadoProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_ctrl_EstadoProyecto");
        }

        public DataSet Combo_EstadoProyecto_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_EstadoProyecto_Reporte");
        }

        public DataSet Combo_EstadoProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_EstadoProyecto");
        }
        public Model.EstadoProyecto Recupera_EstadoProyecto(int intIdEstadoProyecto)
        {
            DataTable dt = new DataTable();
            Model.EstadoProyecto obj = new Model.EstadoProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_EstadoProyecto", intIdEstadoProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidEstadoProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodEstadoProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomEstadoProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public Model.EstadoProyecto Recupera_EstadoProyecto_codigo(string strCodEstadoProyecto)
        {

            DataTable dt = new DataTable();
            Model.EstadoProyecto obj = new Model.EstadoProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_EstadoProyecto_codigo", strCodEstadoProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidEstadoProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodEstadoProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomEstadoProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;

        }
        public int Graba_EstadoProyecto(Model.EstadoProyecto obj)
        {
            int intIdEstadoProyecto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_ctrl_EstadoProyecto", obj.CcodEstadoProyecto,
                                                                                     obj.VnomEstadoProyecto
                                                          );
                intIdEstadoProyecto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdEstadoProyecto = 0;
            }
            return intIdEstadoProyecto;
        }
        public int Modifica_EstadoProyecto(Model.EstadoProyecto obj)
        {

            int intIdEstadoProyecto = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_ctrl_EstadoProyecto", obj.IidEstadoProyecto,
                                                                                     obj.CcodEstadoProyecto,
                                                                                     obj.VnomEstadoProyecto
                                                          );
                intIdEstadoProyecto = obj.IidEstadoProyecto;
            }
            catch
            {
                intIdEstadoProyecto = 0;
            }
            return intIdEstadoProyecto;
        }

        public bool Elimina_EstadoProyecto(int intIdEstadoProyecto)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_ctrl_EstadoProyecto", intIdEstadoProyecto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region EtapaProyecto
        public DataSet Lista_EtapaProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_ctrl_EtapaProyecto");
        }

        public DataSet Ayuda_EtapaProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_EtapaProyecto");
        }

        public DataSet Combo_EtapaProyecto_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_EtapaProyecto_Reporte");
        }

        public DataSet Combo_EtapaProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_EtapaProyecto");
        }
        public Model.EtapaProyecto Recupera_EtapaProyecto(int intIdEtapaProyecto)
        {
            DataTable dt; // = new DataTable();
            Model.EtapaProyecto obj = new Model.EtapaProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_EtapaProyecto", intIdEtapaProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidEtapaProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodClaseProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomClaseProyecto = Convert.ToString(dt.Rows[0][2]);
                obj.CcodEtapaProyecto = Convert.ToString(dt.Rows[0][3]);
                obj.VnomEtapaProyecto = Convert.ToString(dt.Rows[0][4]);
                obj.VnomCortoEtapaProyecto = Convert.ToString(dt.Rows[0][5]);
                obj.BestadoEtapaProyecto = Convert.ToBoolean(dt.Rows[0][6]);
            }
            return obj;
        }

        public Model.EtapaProyecto Recupera_EtapaProyecto_codigo(string strCodEtapaProyecto)
        {

            DataTable dt; // = new DataTable();
            Model.EtapaProyecto obj = new Model.EtapaProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_EtapaProyecto_codigo", strCodEtapaProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidEtapaProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodClaseProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomClaseProyecto = Convert.ToString(dt.Rows[0][2]);
                obj.CcodEtapaProyecto = Convert.ToString(dt.Rows[0][3]);
                obj.VnomEtapaProyecto = Convert.ToString(dt.Rows[0][4]);
                obj.VnomCortoEtapaProyecto = Convert.ToString(dt.Rows[0][5]);
                obj.BestadoEtapaProyecto = Convert.ToBoolean(dt.Rows[0][6]);
            }
            return obj;

        }
        public int Graba_EtapaProyecto(Model.EtapaProyecto obj)
        {
            int intIdEtapaProyecto = 0;
            DataTable dt; // = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_ctrl_EtapaProyecto", obj.CcodClaseProyecto,
                                                                                                     obj.CcodEtapaProyecto,
                                                                                                     obj.VnomEtapaProyecto,
                                                                                                     obj.VnomCortoEtapaProyecto,
                                                                                                     obj.BestadoEtapaProyecto
                                                          );
                intIdEtapaProyecto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdEtapaProyecto = 0;
            }
            return intIdEtapaProyecto;
        }
        public int Modifica_EtapaProyecto(Model.EtapaProyecto obj)
        {

            int intIdEtapaProyecto = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_ctrl_EtapaProyecto", obj.IidEtapaProyecto,
                                                                                                obj.CcodClaseProyecto,
                                                                                                     obj.CcodEtapaProyecto,
                                                                                                     obj.VnomEtapaProyecto,
                                                                                                     obj.VnomCortoEtapaProyecto,
                                                                                                     obj.BestadoEtapaProyecto
                                                          );
                intIdEtapaProyecto = obj.IidEtapaProyecto;
            }
            catch
            {
                intIdEtapaProyecto = 0;
            }
            return intIdEtapaProyecto;
        }

        public bool Elimina_EtapaProyecto(int intIdEtapaProyecto)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_ctrl_EtapaProyecto", intIdEtapaProyecto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region Fase_ActividadProyecto
        public DataSet Lista_Fase_ActividadProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_msto_Fase_ActividadProyecto");
        }

        public DataSet Lista_Fase_ActividadProyecto_Clase(string strCodClaseProyecto)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_msto_Fase_ActividadProyecto_Clase", strCodClaseProyecto);
        }

        public DataSet Ayuda_Fase_ActividadProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_msto_Fase_ActividadProyecto");
        }

        public DataSet Combo_Fase_ActividadProyecto_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_msto_Fase_ActividadProyecto_Reporte");
        }

        public DataSet Combo_Fase_ActividadProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_msto_Fase_ActividadProyecto");
        }
        public Model.Fase_ActividadProyecto Recupera_Fase_ActividadProyecto(int intIdFase_ActividadProyecto)
        {
            DataTable dt = new DataTable();
            Model.Fase_ActividadProyecto obj = new Model.Fase_ActividadProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_msto_Fase_ActividadProyecto", intIdFase_ActividadProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidFaseProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.IidFase_ActividadProyecto = Convert.ToInt32(dt.Rows[0][1]);
                obj.CcodActividadProyecto = Convert.ToString(dt.Rows[0][2]);
                obj.VnomActividadProyecto = Convert.ToString(dt.Rows[0][3]);
                obj.VnomCortoActividadProyecto = Convert.ToString(dt.Rows[0][4]);
                obj.Inivel_ActividadProyecto = Convert.ToInt32(dt.Rows[0][5]);
                obj.BestadoActividadProyecto = Convert.ToBoolean(dt.Rows[0][6]);
            }
            return obj;
        }

        public Model.Fase_ActividadProyecto Recupera_Fase_ActividadProyecto_codigo(string strCodFase_ActividadProyecto)
        {

            DataTable dt = new DataTable();
            Model.Fase_ActividadProyecto obj = new Model.Fase_ActividadProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_msto_Fase_ActividadProyecto_codigo", strCodFase_ActividadProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidFaseProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.IidFase_ActividadProyecto = Convert.ToInt32(dt.Rows[0][1]);
                obj.CcodActividadProyecto = Convert.ToString(dt.Rows[0][2]);
                obj.VnomActividadProyecto = Convert.ToString(dt.Rows[0][3]);
                obj.VnomCortoActividadProyecto = Convert.ToString(dt.Rows[0][4]);
                obj.Inivel_ActividadProyecto = Convert.ToInt32(dt.Rows[0][5]);
                obj.BestadoActividadProyecto = Convert.ToBoolean(dt.Rows[0][6]);
            }
            return obj;

        }
        public int Graba_Fase_ActividadProyecto(Model.Fase_ActividadProyecto obj)
        {
            int intIdFase_ActividadProyecto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_msto_Fase_ActividadProyecto", obj.IidFaseProyecto,
                                                                                                     obj.CcodActividadProyecto,
                                                                                                     obj.VnomActividadProyecto,
                                                                                                     obj.VnomCortoActividadProyecto,
                                                                                                     obj.Inivel_ActividadProyecto,
                                                                                                     obj.BestadoActividadProyecto
                                                          );
                intIdFase_ActividadProyecto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdFase_ActividadProyecto = 0;
            }
            return intIdFase_ActividadProyecto;
        }
        public int Modifica_Fase_ActividadProyecto(Model.Fase_ActividadProyecto obj)
        {

            int intIdFase_ActividadProyecto = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_msto_Fase_ActividadProyecto", obj.IidFase_ActividadProyecto,
                                                                                                     obj.CcodActividadProyecto,
                                                                                                     obj.VnomActividadProyecto,
                                                                                                     obj.VnomCortoActividadProyecto,
                                                                                                     obj.Inivel_ActividadProyecto,
                                                                                                     obj.BestadoActividadProyecto
                                                          );
                intIdFase_ActividadProyecto = obj.IidFase_ActividadProyecto;
            }
            catch
            {
                intIdFase_ActividadProyecto = 0;
            }
            return intIdFase_ActividadProyecto;
        }

        public bool Elimina_Fase_ActividadProyecto(int intIdFase_ActividadProyecto)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_msto_Fase_ActividadProyecto", intIdFase_ActividadProyecto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region GrupoClaseProyecto
        public DataSet Ayuda_GrupoClaseProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_hlp_ctrl_GrupoClaseProyecto");
        }
        public DataSet Lista_GrupoClaseProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_ctrl_GrupoClaseProyecto");
        }

        public DataSet GrupoClase_GrupoClaseProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_GrupoClaseProyecto");
        }

        public DataSet Combo_GrupoClaseProyecto_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_GrupoClaseProyecto_Reporte");
        }

        public DataSet Combo_GrupoClaseProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_GrupoClaseProyecto");
        }
        public Model.GrupoClaseProyecto Recupera_GrupoClaseProyecto(int intIdGrupoClaseProyecto)
        {
            DataTable dt = new DataTable();
            Model.GrupoClaseProyecto obj = new Model.GrupoClaseProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_GrupoClaseProyecto", intIdGrupoClaseProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidGrupoClaseProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodGrupoClaseProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomGrupoClaseProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public Model.GrupoClaseProyecto Recupera_GrupoClaseProyecto_codigo(string strCodGrupoClaseProyecto)
        {

            DataTable dt = new DataTable();
            Model.GrupoClaseProyecto obj = new Model.GrupoClaseProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_GrupoClaseProyecto_codigo", strCodGrupoClaseProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidGrupoClaseProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodGrupoClaseProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomGrupoClaseProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;

        }
        public int Graba_GrupoClaseProyecto(Model.GrupoClaseProyecto obj)
        {
            int intIdGrupoClaseProyecto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_ctrl_GrupoClaseProyecto", obj.CcodGrupoClaseProyecto,
                                                                                     obj.VnomGrupoClaseProyecto
                                                          );
                intIdGrupoClaseProyecto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdGrupoClaseProyecto = 0;
            }
            return intIdGrupoClaseProyecto;
        }
        public int Modifica_GrupoClaseProyecto(Model.GrupoClaseProyecto obj)
        {

            int intIdGrupoClaseProyecto = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_ctrl_GrupoClaseProyecto", obj.IidGrupoClaseProyecto,
                                                                                     obj.CcodGrupoClaseProyecto,
                                                                                     obj.VnomGrupoClaseProyecto
                                                          );
                intIdGrupoClaseProyecto = obj.IidGrupoClaseProyecto;
            }
            catch
            {
                intIdGrupoClaseProyecto = 0;
            }
            return intIdGrupoClaseProyecto;
        }

        public bool Elimina_GrupoClaseProyecto(int intIdGrupoClaseProyecto)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_ctrl_GrupoClaseProyecto", intIdGrupoClaseProyecto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region GrupoProyecto
        public DataSet Lista_GrupoProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_ctrl_GrupoProyecto");
        }

        public DataSet Ayuda_GrupoProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_GrupoProyecto");
        }

        public DataSet Combo_GrupoProyecto_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_GrupoProyecto_Reporte");
        }

        public DataSet Combo_GrupoProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_GrupoProyecto");
        }
        public Model.GrupoProyecto Recupera_GrupoProyecto(int intIdGrupoProyecto)
        {
            DataTable dt = new DataTable();
            Model.GrupoProyecto obj = new Model.GrupoProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_GrupoProyecto", intIdGrupoProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidGrupoProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodGrupoProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomGrupoProyecto = Convert.ToString(dt.Rows[0][2]);
                obj.ICorrelativo = Convert.ToInt32(dt.Rows[0][3]);
            }
            return obj;
        }

        public Model.GrupoProyecto Recupera_GrupoProyecto_codigo(string strCodGrupoProyecto)
        {

            DataTable dt = new DataTable();
            Model.GrupoProyecto obj = new Model.GrupoProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_GrupoProyecto_codigo", strCodGrupoProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidGrupoProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodGrupoProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomGrupoProyecto = Convert.ToString(dt.Rows[0][2]);
                obj.ICorrelativo = Convert.ToInt32(dt.Rows[0][3]);
            }
            return obj;

        }
        public int Graba_GrupoProyecto(Model.GrupoProyecto obj)
        {
            int intIdGrupoProyecto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_ctrl_GrupoProyecto", obj.CcodGrupoProyecto,
                                                                                     obj.VnomGrupoProyecto,
                                                                                    obj.ICorrelativo
                                                          );
                intIdGrupoProyecto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdGrupoProyecto = 0;
            }
            return intIdGrupoProyecto;
        }
        public int Modifica_GrupoProyecto(Model.GrupoProyecto obj)
        {

            int intIdGrupoProyecto = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_ctrl_GrupoProyecto", obj.IidGrupoProyecto,
                                                                                     obj.CcodGrupoProyecto,
                                                                                     obj.VnomGrupoProyecto,
                                                                                    obj.ICorrelativo
                                                          );
                intIdGrupoProyecto = obj.IidGrupoProyecto;
            }
            catch
            {
                intIdGrupoProyecto = 0;
            }
            return intIdGrupoProyecto;
        }

        public bool Elimina_GrupoProyecto(int intIdGrupoProyecto)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_ctrl_GrupoProyecto", intIdGrupoProyecto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region MacroProyecto
        public DataSet Lista_MacroProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_ctrl_MacroProyecto");
        }

        public DataSet Ayuda_MacroProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_MacroProyecto");
        }


        public DataSet Combo_MacroProyecto_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_MacroProyecto_Reporte");
        }

        public DataSet Combo_MacroProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_MacroProyecto");
        }
        public Model.MacroProyecto Recupera_MacroProyecto(int intIdMacroProyecto)
        {
            DataTable dt = new DataTable();
            Model.MacroProyecto obj = new Model.MacroProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_MacroProyecto", intIdMacroProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidMacroProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodMacroProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomMacroProyecto = Convert.ToString(dt.Rows[0][2]);
                obj.VnomCortoMacroProyecto = Convert.ToString(dt.Rows[0][3]);
                obj.CcodEstadoMacroProyecto = Convert.ToString(dt.Rows[0][4]);
                obj.VnomEstadoMacroProyecto = Convert.ToString(dt.Rows[0][5]);
            }
            return obj;
        }

        public Model.MacroProyecto Recupera_MacroProyecto_codigo(string strCodMacroProyecto)
        {

            DataTable dt = new DataTable();
            Model.MacroProyecto obj = new Model.MacroProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_MacroProyecto_codigo", strCodMacroProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidMacroProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodMacroProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomMacroProyecto = Convert.ToString(dt.Rows[0][2]);
                obj.VnomCortoMacroProyecto = Convert.ToString(dt.Rows[0][3]);
                obj.CcodEstadoMacroProyecto = Convert.ToString(dt.Rows[0][7]);
                obj.VnomEstadoMacroProyecto = Convert.ToString(dt.Rows[0][8]);
            }
            return obj;

        }
        public int Graba_MacroProyecto(Model.MacroProyecto obj)
        {
            int intIdMacroProyecto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_ctrl_MacroProyecto", obj.CcodMacroProyecto,
                                                                                     obj.VnomMacroProyecto,
                                                                                     obj.VnomCortoMacroProyecto,
                                                                                     obj.CcodEstadoMacroProyecto

                                                          );
                intIdMacroProyecto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdMacroProyecto = 0;
            }
            return intIdMacroProyecto;
        }
        public int Modifica_MacroProyecto(Model.MacroProyecto obj)
        {

            int intIdMacroProyecto = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_ctrl_MacroProyecto", obj.IidMacroProyecto,
                                                                                     obj.CcodMacroProyecto,
                                                                                     obj.VnomMacroProyecto,
                                                                                     obj.VnomCortoMacroProyecto,
                                                                                     obj.CcodEstadoMacroProyecto
                                                          );
                intIdMacroProyecto = obj.IidMacroProyecto;
            }
            catch
            {
                intIdMacroProyecto = 0;
            }
            return intIdMacroProyecto;
        }

        public bool Elimina_MacroProyecto(int intIdMacroProyecto)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_ctrl_MacroProyecto", intIdMacroProyecto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region NaturalezaProyecto
        public DataSet Ayuda_NaturalezaProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_hlp_ctrl_NaturalezaProyecto");
        }
        public DataSet Lista_NaturalezaProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_ctrl_NaturalezaProyecto");
        }

        public DataSet Naturaleza_NaturalezaProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_NaturalezaProyecto");
        }

        public DataSet Combo_NaturalezaProyecto_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_NaturalezaProyecto_Reporte");
        }

        public DataSet Combo_NaturalezaProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_NaturalezaProyecto");
        }
        public Model.NaturalezaProyecto Recupera_NaturalezaProyecto(int intIdNaturalezaProyecto)
        {
            DataTable dt = new DataTable();
            Model.NaturalezaProyecto obj = new Model.NaturalezaProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_NaturalezaProyecto", intIdNaturalezaProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidNaturalezaProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodNaturalezaProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomNaturalezaProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public Model.NaturalezaProyecto Recupera_NaturalezaProyecto_codigo(string strCodNaturalezaProyecto)
        {

            DataTable dt = new DataTable();
            Model.NaturalezaProyecto obj = new Model.NaturalezaProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_NaturalezaProyecto_codigo", strCodNaturalezaProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidNaturalezaProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodNaturalezaProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomNaturalezaProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;

        }
        public int Graba_NaturalezaProyecto(Model.NaturalezaProyecto obj)
        {
            int intIdNaturalezaProyecto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_ctrl_NaturalezaProyecto", obj.CcodNaturalezaProyecto,
                                                                                     obj.VnomNaturalezaProyecto
                                                          );
                intIdNaturalezaProyecto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdNaturalezaProyecto = 0;
            }
            return intIdNaturalezaProyecto;
        }
        public int Modifica_NaturalezaProyecto(Model.NaturalezaProyecto obj)
        {

            int intIdNaturalezaProyecto = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_ctrl_NaturalezaProyecto", obj.IidNaturalezaProyecto,
                                                                                     obj.CcodNaturalezaProyecto,
                                                                                     obj.VnomNaturalezaProyecto
                                                          );
                intIdNaturalezaProyecto = obj.IidNaturalezaProyecto;
            }
            catch
            {
                intIdNaturalezaProyecto = 0;
            }
            return intIdNaturalezaProyecto;
        }

        public bool Elimina_NaturalezaProyecto(int intIdNaturalezaProyecto)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_ctrl_NaturalezaProyecto", intIdNaturalezaProyecto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region Proyecto
        public DataSet Ayuda_Proyecto_Componente_Spring(string strCodCompañia,
                                        string strCodProyecto
                                    )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Proyecto.spp_help_msto_Componente",
                                            strCodCompañia,
                                            strCodProyecto
                                            );
        }

        //public DataSet Ayuda_Proyecto_Spring(string strCodCompañia,
        //                                string strCodCentroGestor
        //                            )
        //{
        //    return SqlHelper.ExecuteDataset(strConnection, 
        //                                    "Formulacion.spp_help_msto_Proyecto_Spring", 
        //                                    strCodCompañia, 
        //                                    strCodCentroGestor
        //                                    );
        //}


        public DataSet Ayuda_Proyecto_Componente(string strCodCompañia,
                                                string strAñoProceso,
                                                string strCodProyecto
                                            )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Proyecto.spp_help_msto_Componente",
                                            strCodCompañia,
                                            strCodProyecto
                                            );
        }

        public DataSet Ayuda_Proyecto_Componente_Servicio(string strCodCompañia)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Proyecto.spp_help_msto_Proyecto_Componente",
                                            strCodCompañia
                                            );
        }

        public DataSet Ayuda_Proyecto_Componente_Todos(string strCodCompañia)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Proyecto.spp_help_msto_Componente_Todos",
                                            strCodCompañia
                                            );
        }

        public DataSet Graba_Proyecto_OrdenTemporal(string strCodEmpleado,
                                                    string strTipoOrden,
                                                    string strNumeroOrden
                                                  )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Formulacion.spp_ins_mvto_OrdenTemporal",
                                            strCodEmpleado,
                                            strTipoOrden,
                                            strNumeroOrden
                                            );
        }

        public DataSet Elimina_Proyecto_OrdenTemporal(string strCodEmpleado,
                                                    string strTipoOrden,
                                                    string strNumeroOrden
                                                  )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Formulacion.spp_del_mvto_OrdenTemporal",
                                            strCodEmpleado,
                                            strTipoOrden,
                                            strNumeroOrden
                                            );
        }
        public DataSet Ayuda_Proyecto_CentroGestor(string strCodCentroGestor, int intDigito, string strCodEmpleado)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Formulacion.spp_help_msto_Proyecto_CentroGestor",
                                            strCodCentroGestor,
                                            intDigito,
                                            strCodEmpleado
                                            );
        }


        public DataSet Ayuda_Proyecto_Reporte(string strCodFuenteFinanciamiento,
                                              string strCodCentroGestor
                                             )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Formulacion.spp_help_msto_Proyecto_Reporte",
                                            strCodFuenteFinanciamiento, strCodCentroGestor
                                            );
        }


        public DataSet Lista_Proyecto(string strCodEmpresa,
                                      int intTipoProyecto
                                     )
        {
            DataSet ds = new DataSet();

            SqlDataAdapter da = new SqlDataAdapter("Proyecto.spp_lst_msto_Proyecto", strConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@cCodEmpresa", SqlDbType.Char);
            da.SelectCommand.Parameters.Add("@iTipoProyecto", SqlDbType.Int);

            da.SelectCommand.Parameters["@cCodEmpresa"].Value = strCodEmpresa;
            da.SelectCommand.Parameters["@iTipoProyecto"].Value = intTipoProyecto;

            da.SelectCommand.CommandTimeout = 600000000;
            da.Fill(ds);

            return ds;
        }

        public DataSet Ayuda_Proyecto(string strCodEmpresa,
                                      int intTipoProyecto
            )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_msto_Proyecto",
                                                            strCodEmpresa,
                                                            intTipoProyecto
                                                            );
        }

        public DataSet Ayuda_Proyecto_FuenteFinanciamiento(string strCodEmpresa,
                                                    string strCodProyecto
                                )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Proyecto.spp_help_msto_Proyecto_FuenteFinanciamiento",
                                            strCodEmpresa,
                                            strCodProyecto
                                            );
        }

        public DataSet Ayuda_Proyecto_FuenteFinanciamiento_Reasignacion(string strCodEmpresa,
                                                    string strCodProyecto
                                )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Proyecto.spp_help_msto_Proyecto_FuenteFinanciamiento_Reasignacion",
                                            strCodEmpresa,
                                            strCodProyecto
                                            );
        }

        public DataSet Ayuda_Proyecto_y_FuenteFinanciamiento(string strCodEmpresa,
                                      int intTipoProyecto
            )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_msto_Proyecto_FuenteFinanciamiento",
                                                            strCodEmpresa,
                                                            intTipoProyecto
                                                            );
        }

        public DataSet Combo_Proyecto_Reporte(string strCodEmpresa,
                                              int intTipoProyecto
                                             )
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_msto_Proyecto_Reporte",
                                                            strCodEmpresa,
                                                            intTipoProyecto
                                                            );
        }

        public DataSet Combo_Proyecto(string strCodEmpresa, int intTipoProyecto)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_msto_Proyecto",
                                                            strCodEmpresa,
                                                            intTipoProyecto
                                                            );
        }
        public Model.Proyecto Recupera_Proyecto( string strCodEmpresa,
                                                 string strCodProyecto
                                                )
        {
            DataTable dt;

            dt = SqlHelper.ExecuteDataset(strConnection,
                                                "Proyecto.spp_sel_msto_Proyecto",
                                                strCodEmpresa,
                                                strCodProyecto
                                                ).Tables[0];


            var proyecto = (from order in dt.AsEnumerable()
                            select new Model.Proyecto
                            {
                                IidProyecto = order.Field<int>("IidProyecto"),
                                CcodProyecto = order.Field<string>("CcodProyecto"),
                                CcodProyecto_Inicio = order.Field<string>("CcodProyecto_Inicio"),
                                TnomProyecto = order.Field<string>("TnomProyecto"),
                                VnomCortoProyecto = order.Field<string>("VnomCortoProyecto"),
                                ItipoProyecto = order.Field<int>("ItipoProyecto"),
                                CcodEmpresa = order.Field<string>("CcodEmpresa"),
                                CcodEmpresaContratante = order.Field<string>("CcodEmpresaContratante"),
                                CcodGrupoProyecto = order.Field<string>("CcodGrupoProyecto"),
                                CcodMacroProyecto = order.Field<string>("CcodMacroProyecto"),
                                TObjProyecto = order.Field<string>("TObjProyecto"),
                                CcodNaturalezaProyecto = order.Field<string>("CcodNaturalezaProyecto"),
                                CcodClaseProyecto = order.Field<string>("CcodClaseProyecto"),
                                CcodCadenaFuncionalProyecto = order.Field<string>("CcodCadenaFuncionalProyecto"),
                                CcodUnidadFormuladoraProyecto = order.Field<string>("CcodUnidadFormuladoraProyecto"),
                                CcodUnidadEjecutoraProyecto = order.Field<string>("CcodUnidadEjecutoraProyecto"),
                                CcodTipoMoneda_Viable = order.Field<string>("CcodTipoMoneda_Viable"),
                                FimpViable = order.Field<decimal>("FimpViable"),
                                CcodTipoMoneda_Final = order.Field<string>("CcodTipoMoneda_Final"),
                                FimpFinal = order.Field<decimal>("FimpFinal"),
                                Tdescripcion = order.Field<string>("Tdescripcion"),
                                Tobjetivo = order.Field<string>("Tobjetivo"),
                                TobjetivoEstrategico = order.Field<string>("TobjetivoEstrategico"),
                                TbeneficioCualitativo = order.Field<string>("TbeneficioCualitativo"),
                                TbeneficioCuantitativo = order.Field<string>("TbeneficioCuantitativo"),
                                CcodUnico = order.Field<string>("CcodUnico"),
                                CcodOrden = order.Field<string>("CcodOrden"),
                                CnumOrden = order.Field<string>("CnumOrden"),
                                CcodEstadoActual = order.Field<string>("CcodEstadoActual"),
                                CperiodoInicio = order.Field<string>("CperiodoInicio"),
                                CperiodoFinal = order.Field<string>("CperiodoFinal"),
                                Ilatitud = order.Field<double>("Ilatitud"),
                                Ilongitud = order.Field<double>("Ilongitud"),
                                Tobservacion = order.Field<string>("Tobservacion")
                            }
                        ).SingleOrDefault();

            return proyecto;

        }

        public Model.Proyecto Recupera_Proyecto_codigo(int intTipoProyecto,
                                                        string strCodGrupoProyecto,
                                                        string strCodProyecto
                                                      )
        {

            DataTable dt = new DataTable();
            Model.Proyecto obj = new Model.Proyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_msto_Proyecto_codigo", intTipoProyecto,
                                                                                                    strCodGrupoProyecto,
                                                                                                    strCodProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.ItipoProyecto = Convert.ToInt32(dt.Rows[0][1]);
                obj.CcodGrupoProyecto = Convert.ToString(dt.Rows[0][2]);
                obj.VnomGrupoProyecto = Convert.ToString(dt.Rows[0][3]);
                obj.CcodProyecto = Convert.ToString(dt.Rows[0][4]);
                obj.TnomProyecto = Convert.ToString(dt.Rows[0][5]);
                obj.VnomCortoProyecto = Convert.ToString(dt.Rows[0][6]);
                obj.CcodMacroProyecto = Convert.ToString(dt.Rows[0][7]);
                obj.VnomMacroProyecto = Convert.ToString(dt.Rows[0][8]);
                obj.TObjProyecto = Convert.ToString(dt.Rows[0][9]);
                obj.CcodNaturalezaProyecto = Convert.ToString(dt.Rows[0][10]);
                obj.VnomNaturalezaProyecto = Convert.ToString(dt.Rows[0][11]);
                obj.CcodClaseProyecto = Convert.ToString(dt.Rows[0][12]);
                obj.VnomClaseProyecto = Convert.ToString(dt.Rows[0][13]);
                obj.VnomLocalizacion = Convert.ToString(dt.Rows[0][15]);
                obj.CcodEstadoProyecto = Convert.ToString(dt.Rows[0][16]);
                obj.VnomEstadoProyecto = Convert.ToString(dt.Rows[0][17]);
                obj.CcodCadenaFuncionalProyecto = Convert.ToString(dt.Rows[0][18]);
                obj.VnomCadenaFuncionalProyecto = Convert.ToString(dt.Rows[0][19]);
                obj.CcodUnidadFormuladoraProyecto = Convert.ToString(dt.Rows[0][20]);
                obj.VnomUnidadFormuladoraProyecto = Convert.ToString(dt.Rows[0][21]);
                obj.CcodUnidadEjecutoraProyecto = Convert.ToString(dt.Rows[0][22]);
                obj.VnomUnidadEjecutoraProyecto = Convert.ToString(dt.Rows[0][23]);
                obj.DfecInicio = Convert.ToDateTime(dt.Rows[0][27]);
                obj.DfecVencimiento = Convert.ToDateTime(dt.Rows[0][28]);
                obj.DfecCierre = Convert.ToDateTime(dt.Rows[0][29]);
                obj.CcodTipoMoneda_Viable = Convert.ToString(dt.Rows[0][30]);
                obj.VmomTipoMoneda_Viable = Convert.ToString(dt.Rows[0][31]);
                obj.FimpViable = Convert.ToDecimal(dt.Rows[0][32]);
                obj.CcodTipoMoneda_Final = Convert.ToString(dt.Rows[0][33]);
                obj.VnomTipoMoneda_Final = Convert.ToString(dt.Rows[0][34]);
                obj.FimpFinal = Convert.ToDecimal(dt.Rows[0][35]);
            }
            return obj;

        }
        public Model.Proyecto Graba_Proyecto(Model.Proyecto obj,
                                 string strAñoProceso,
                                 string strPeriodo,
                                 string strCodCentroCosto,
                                 Boolean LLamadaDesdeHojaTrabajo)
        {
            Model.Proyecto MP = new Model.Proyecto(); 
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_msto_Proyecto", obj.ItipoProyecto,
                                                                                                    obj.CcodEmpresa,
                                                                                                    obj.CcodEmpresaContratante,
                                                                                                    obj.CcodGrupoProyecto,
                                                                                                    obj.CcodProyecto,
                                                                                                    obj.CcodProyecto_Inicio,
                                                                                                    obj.TnomProyecto,
                                                                                                    obj.VnomCortoProyecto,
                                                                                                    obj.CcodMacroProyecto,
                                                                                                    obj.TObjProyecto,
                                                                                                    obj.CcodNaturalezaProyecto,
                                                                                                    obj.CcodClaseProyecto,
                                                                                                    obj.CcodCadenaFuncionalProyecto,
                                                                                                    obj.CcodUnidadFormuladoraProyecto,
                                                                                                    obj.CcodUnidadEjecutoraProyecto,
                                                                                                    obj.DfecInicio,
                                                                                                    obj.DfecVencimiento,
                                                                                                    obj.DfecCierre,
                                                                                                    obj.CcodTipoMoneda_Viable,
                                                                                                    obj.FimpViable,
                                                                                                    obj.CcodTipoMoneda_Final,
                                                                                                    obj.FimpFinal,
                                                                                                    obj.Tdescripcion,
                                                                                                    obj.Tobjetivo,
                                                                                                    obj.TobjetivoEstrategico,
                                                                                                    obj.TbeneficioCualitativo,
                                                                                                    obj.TbeneficioCuantitativo,
                                                                                                    obj.CcodUnico,
                                                                                                    obj.CcodOrden,
                                                                                                    obj.CnumOrden,
                                                                                                    obj.CcodEstadoActual,
                                                                                                    obj.CperiodoInicio,
                                                                                                    obj.CperiodoFinal,
                                                                                                    obj.Ilatitud,
                                                                                                    obj.Ilongitud,
                                                                                                    obj.Tobservacion,
                                                                                                    strAñoProceso,
                                                                                                    strPeriodo,
                                                                                                    strCodCentroCosto,
                                                                                                    LLamadaDesdeHojaTrabajo
                                                );

                MP.IidProyecto = Convert.ToInt32(dt.Rows[0][0]);
                MP.CcodProyecto = Convert.ToString(dt.Rows[0][1]);
                MP.VnomCortoProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            catch
            {
                MP.IidProyecto = 0;
            }
            return MP;
        }
        public Model.Proyecto Modifica_Proyecto(Model.Proyecto obj)
        {

            Model.Proyecto MP = new Model.Proyecto();

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_msto_Proyecto", obj.IidProyecto,
                                                                                           obj.CcodEmpresa,
                                                                                            obj.CcodEmpresaContratante,
                                                                                            obj.ItipoProyecto,
                                                                                            obj.CcodGrupoProyecto,
                                                                                            obj.CcodProyecto,
                                                                                            obj.CcodProyecto_Inicio,
                                                                                            obj.TnomProyecto,
                                                                                            obj.VnomCortoProyecto,
                                                                                            obj.CcodMacroProyecto,
                                                                                            obj.TObjProyecto,
                                                                                            obj.CcodNaturalezaProyecto,
                                                                                            obj.CcodClaseProyecto,
                                                                                            obj.CcodCadenaFuncionalProyecto,
                                                                                            obj.CcodUnidadFormuladoraProyecto,
                                                                                            obj.CcodUnidadEjecutoraProyecto,
                                                                                            obj.DfecInicio,
                                                                                            obj.DfecVencimiento,
                                                                                            obj.DfecCierre,
                                                                                            obj.CcodTipoMoneda_Viable,
                                                                                            obj.FimpViable,
                                                                                            obj.CcodTipoMoneda_Final,
                                                                                            obj.FimpFinal,
                                                                                            obj.Tdescripcion,
                                                                                            obj.Tobjetivo,
                                                                                            obj.TobjetivoEstrategico,
                                                                                            obj.TbeneficioCualitativo,
                                                                                            obj.TbeneficioCuantitativo,
                                                                                            obj.CcodUnico,
                                                                                            obj.CcodOrden,
                                                                                            obj.CnumOrden,
                                                                                            obj.CcodEstadoActual,
                                                                                            obj.CperiodoInicio,
                                                                                            obj.CperiodoFinal,
                                                                                            obj.Ilatitud,
                                                                                            obj.Ilongitud,
                                                                                            obj.Tobservacion
                                                          );
                MP.IidProyecto = obj.IidProyecto;
                MP.CcodProyecto = obj.CcodProyecto;
            }
            catch
            {
                MP.IidProyecto = 0;
            }
            return MP;
        }

        public int Elimina_Proyecto(int Id)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                           "Proyecto.spp_del_msto_Proyecto",
                                            Id
                                        );
            }
            catch (Exception)
            {
                Id = 0;
            }
            return Id;
        }

        #endregion

        #region Proyecto_CentroCosto
        public DataSet Lista_Proyecto_CentroCosto(int intIdProyecto)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_msto_Proyecto_CentroCosto", intIdProyecto);
        }

        public int Graba_Proyecto_CentroCosto(Model.Proyecto_CentroCosto obj)
        {
            int intIdProyecto_CentroCosto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_msto_Proyecto_CentroCosto", obj.IidProyecto,
                                                                                                    obj.CcodArea,
                                                                                                    obj.CcodCentroCosto
                                                );

                intIdProyecto_CentroCosto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdProyecto_CentroCosto = 0;
            }
            return intIdProyecto_CentroCosto;
        }
        public int Modifica_Proyecto_CentroCosto(Model.Proyecto_CentroCosto obj)
        {

            int intIdProyecto_CentroCosto = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_msto_Proyecto_CentroCosto", obj.IidProyecto_CentroCosto,
                                                                                            obj.CcodArea,
                                                                                            obj.CcodCentroCosto
                                                          );
                intIdProyecto_CentroCosto = obj.IidProyecto_CentroCosto;
            }
            catch
            {
                intIdProyecto_CentroCosto = 0;
            }
            return intIdProyecto_CentroCosto;
        }

        public bool Elimina_Proyecto_CentroCosto(int intIdProyecto_CentroCosto)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_msto_Proyecto_CentroCosto", intIdProyecto_CentroCosto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region Proyecto_Etapa
        public Model.Proyecto_Etapa Recupera_Proyecto_Etapa(int intIdProyecto_Etapa)
        {
            DataTable dt = new DataTable();
            Model.Proyecto_Etapa obj = new Model.Proyecto_Etapa();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_msto_Proyecto_Etapa", intIdProyecto_Etapa);

            if (dt.Rows.Count > 0)
            {
                obj.IidProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.IidProyecto = Convert.ToInt32(dt.Rows[0][1]);
                obj.DfechaInicio = Convert.ToDateTime(dt.Rows[0][27]);
                obj.DfechaFin = Convert.ToDateTime(dt.Rows[0][3]);
                obj.CcodEtapaProyecto = Convert.ToString(dt.Rows[0][4]);
                obj.CcodTareaProyecto = Convert.ToString(dt.Rows[0][5]);
                obj.Tdescripcion = Convert.ToString(dt.Rows[0][6]);
            }
            return obj;
        }

        public int Graba_Proyecto_Etapa(Model.Proyecto_Etapa obj)
        {
            int intIdProyecto_Etapa = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_msto_Proyecto_Etapa", obj.IidProyecto,
                                                                                                obj.DfechaInicio,
                                                                                                obj.DfechaFin,
                                                                                                obj.DfechaFinalizado,
                                                                                                obj.CcodEtapaProyecto,
                                                                                                obj.CcodTareaProyecto,
                                                                                                obj.Tdescripcion
                                                );

                intIdProyecto_Etapa = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdProyecto_Etapa = 0;
            }
            return intIdProyecto_Etapa;
        }
        public int Modifica_Proyecto_Etapa(Model.Proyecto_Etapa obj)
        {

            int intIdProyecto_Etapa = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_msto_Proyecto_Etapa", obj.IidProyecto_Etapa,
                                                                                                obj.IidProyecto,
                                                                                                obj.DfechaInicio,
                                                                                                obj.DfechaFin,
                                                                                                obj.DfechaFinalizado,
                                                                                                obj.CcodEtapaProyecto,
                                                                                                obj.CcodTareaProyecto,
                                                                                                obj.Tdescripcion
                                                          );
                intIdProyecto_Etapa = obj.IidProyecto_Etapa;
            }
            catch
            {
                intIdProyecto_Etapa = 0;
            }
            return intIdProyecto_Etapa;
        }

        public bool Elimina_Proyecto_Etapa(int intIdProyecto_Etapa)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_msto_Proyecto_Etapa", intIdProyecto_Etapa);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        public DataSet Lista_Proyecto_Etapa(int intIdProyecto)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_msto_Proyecto_Etapa", intIdProyecto);
        }

        #endregion

        #region Proyecto_Etapa_Actividad
        public DataSet Lista_Proyecto_Etapa_Actividad(int intIdProyecto_Etapa)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_msto_Proyecto_Etapa_Actividad", intIdProyecto_Etapa);
        }

        public Model.Proyecto_Etapa_Actividad Recupera_Proyecto_Etapa_Actividad(int intIdProyecto_Etapa_Actividad)
        {
            DataTable dt; // = new DataTable();
            Model.Proyecto_Etapa_Actividad obj = new Model.Proyecto_Etapa_Actividad();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_msto_Proyecto_Etapa_Actividad", intIdProyecto_Etapa_Actividad);

            if (dt.Rows.Count > 0)
            {
                obj.IidProyecto_Etapa_Actividad = Convert.ToInt32(dt.Rows[0][1]);
                obj.IidProyecto_Etapa = Convert.ToInt32(dt.Rows[0][2]);
                obj.CcodActividad = Convert.ToString(dt.Rows[0][3]);
                obj.VnomActividad = Convert.ToString(dt.Rows[0][4]);
                obj.CcodTipoActividad = Convert.ToString(dt.Rows[0][5]);
                obj.VnomTipoActividad = Convert.ToString(dt.Rows[0][6]);
                obj.DfecInicio = Convert.ToDateTime(dt.Rows[0][7]);
                obj.ChoraInicio = Convert.ToString(dt.Rows[0][8]);
                obj.DfecFin = Convert.ToDateTime(dt.Rows[0][9]);
                obj.ChoraFin = Convert.ToString(dt.Rows[0][10]);
                obj.tComentario = Convert.ToString(dt.Rows[0][11]);
            }
            return obj;
        }

        public int Graba_Proyecto_Etapa_Actividad(Model.Proyecto_Etapa_Actividad obj)
        {
            int intIdProyecto_Etapa_Actividad = 0;
            DataTable dt; // = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_msto_Proyecto_Etapa_Actividad", obj.IidProyecto_Etapa,
                                                                                                                    obj.CcodActividad,
                                                                                                                    obj.CcodTipoActividad,
                                                                                                                    obj.DfecInicio,
                                                                                                                    obj.ChoraInicio,
                                                                                                                    obj.DfecFin,
                                                                                                                    obj.ChoraFin,
                                                                                                                    obj.tComentario
                                                          );
                intIdProyecto_Etapa_Actividad = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdProyecto_Etapa_Actividad = 0;
            }
            return intIdProyecto_Etapa_Actividad;
        }
        public int Modifica_Proyecto_Etapa_Actividad(Model.Proyecto_Etapa_Actividad obj)
        {

            int intIdProyecto_Etapa_Actividad = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_msto_Proyecto_Etapa_Actividad", obj.IidProyecto_Etapa_Actividad,
                                                                                                            obj.IidProyecto_Etapa,
                                                                                                            obj.IidProyecto_Etapa,
                                                                                                            obj.CcodActividad,
                                                                                                            obj.CcodTipoActividad,
                                                                                                            obj.DfecInicio,
                                                                                                            obj.ChoraInicio,
                                                                                                            obj.DfecFin,
                                                                                                            obj.ChoraFin,
                                                                                                            obj.tComentario
                                                          );
                intIdProyecto_Etapa_Actividad = obj.IidProyecto_Etapa_Actividad;
            }
            catch
            {
                intIdProyecto_Etapa_Actividad = 0;
            }
            return intIdProyecto_Etapa_Actividad;
        }

        public bool Elimina_Proyecto_Etapa_Actividad(int intIdProyecto_Etapa_Actividad)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_msto_Proyecto_Etapa_Actividad", intIdProyecto_Etapa_Actividad);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region Proyecto_Etapa_CostoFijo
        public DataSet Lista_Proyecto_Etapa_CostoFijo(int intIdProyecto_Etapa)
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_msto_Proyecto_Etapa_CostoFijo", intIdProyecto_Etapa);
        }

        public Model.Proyecto_Etapa_CostoFijo Recupera_Proyecto_Etapa_CostoFijo(int intIdProyecto_Etapa_CostoFijo)
        {
            DataTable dt; // = new DataTable();
            Model.Proyecto_Etapa_CostoFijo obj = new Model.Proyecto_Etapa_CostoFijo();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_msto_Proyecto_Etapa_CostoFijo", intIdProyecto_Etapa_CostoFijo);

            if (dt.Rows.Count > 0)
            {
                obj.IidProyecto_Etapa_CostoFijo = Convert.ToInt32(dt.Rows[0][1]);
                obj.IidProyecto_Etapa = Convert.ToInt32(dt.Rows[0][2]);
                obj.CcodRecurso = Convert.ToString(dt.Rows[0][3]);
                obj.VnomRecurso = Convert.ToString(dt.Rows[0][4]);
                obj.VnomCortoRecurso = Convert.ToString(dt.Rows[0][5]);
                obj.CcodTipoRecurso = Convert.ToString(dt.Rows[0][6]);
                obj.VnomTipoRecurso = Convert.ToString(dt.Rows[0][7]);
                obj.vEtiqueta = Convert.ToString(dt.Rows[0][8]);
                obj.cCodGrupoRecurso = Convert.ToString(dt.Rows[0][9]);
                obj.VnomGrupoRecurso = Convert.ToString(dt.Rows[0][10]);
                obj.fCapacidad = Convert.ToDouble(dt.Rows[0][11]);
                obj.cCodTipoTasa_Estandar = Convert.ToString(dt.Rows[0][12]);
                obj.VnomTipoTasa_Estandar = Convert.ToString(dt.Rows[0][13]);
                obj.fTasaEstandar = Convert.ToDouble(dt.Rows[0][14]);
                obj.cCodTipoTasa_HoraExtra = Convert.ToString(dt.Rows[0][15]);
                obj.VnomTipoTasa_HoraExtra = Convert.ToString(dt.Rows[0][16]);
                obj.fTasaHoraExtra = Convert.ToDouble(dt.Rows[0][17]);
                obj.cCodTipoMoneda_CostoUso = Convert.ToString(dt.Rows[0][18]);
                obj.VnomTipoMoneda_CostoUso = Convert.ToString(dt.Rows[0][19]);
                obj.fImporteCostoUso = Convert.ToDouble(dt.Rows[0][20]);
                obj.cCodTipoMoneda_CostoFijo = Convert.ToString(dt.Rows[0][21]);
                obj.VnomTipoMoneda_CostoFijo = Convert.ToString(dt.Rows[0][22]);
                obj.fImporteCostoFijo = Convert.ToDouble(dt.Rows[0][23]);
                obj.cCodTipoAcumulador = Convert.ToString(dt.Rows[0][24]);
                obj.VnomTipoAcumulador = Convert.ToString(dt.Rows[0][25]);
                obj.cCodCalendarioProyecto = Convert.ToString(dt.Rows[0][26]);
                obj.tComentario = Convert.ToString(dt.Rows[0][27]);
            }
            return obj;
        }

        public int Graba_Proyecto_Etapa_CostoFijo(Model.Proyecto_Etapa_CostoFijo obj)
        {
            int intIdProyecto_Etapa_CostoFijo = 0;
            DataTable dt; // = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_msto_Proyecto_Etapa_CostoFijo", obj.IidProyecto_Etapa,
                                                                                                                    obj.CcodRecurso,
                                                                                                                    obj.VnomRecurso,
                                                                                                                    obj.VnomCortoRecurso,
                                                                                                                    obj.CcodTipoRecurso,
                                                                                                                    obj.vEtiqueta,
                                                                                                                    obj.cCodGrupoRecurso,
                                                                                                                    obj.fCapacidad,
                                                                                                                    obj.cCodTipoTasa_Estandar,
                                                                                                                    obj.fTasaEstandar,
                                                                                                                    obj.cCodTipoTasa_HoraExtra,
                                                                                                                    obj.fTasaHoraExtra,
                                                                                                                    obj.cCodTipoMoneda_CostoUso,
                                                                                                                    obj.fImporteCostoUso,
                                                                                                                    obj.cCodTipoMoneda_CostoFijo,
                                                                                                                    obj.fImporteCostoFijo,
                                                                                                                    obj.cCodTipoAcumulador,
                                                                                                                    obj.cCodCalendarioProyecto,
                                                                                                                    obj.tComentario
                                                          );
                intIdProyecto_Etapa_CostoFijo = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdProyecto_Etapa_CostoFijo = 0;
            }
            return intIdProyecto_Etapa_CostoFijo;
        }
        public int Modifica_Proyecto_Etapa_CostoFijo(Model.Proyecto_Etapa_CostoFijo obj)
        {

            int intIdProyecto_Etapa_CostoFijo = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_msto_Proyecto_Etapa_CostoFijo", obj.IidProyecto_Etapa_CostoFijo,
                                                                                                            obj.IidProyecto_Etapa,
                                                                                                            obj.CcodRecurso,
                                                                                                            obj.VnomRecurso,
                                                                                                            obj.VnomCortoRecurso,
                                                                                                            obj.CcodTipoRecurso,
                                                                                                            obj.vEtiqueta,
                                                                                                            obj.cCodGrupoRecurso,
                                                                                                            obj.fCapacidad,
                                                                                                            obj.cCodTipoTasa_Estandar,
                                                                                                            obj.fTasaEstandar,
                                                                                                            obj.cCodTipoTasa_HoraExtra,
                                                                                                            obj.fTasaHoraExtra,
                                                                                                            obj.cCodTipoMoneda_CostoUso,
                                                                                                            obj.fImporteCostoUso,
                                                                                                            obj.cCodTipoMoneda_CostoFijo,
                                                                                                            obj.fImporteCostoFijo,
                                                                                                            obj.cCodTipoAcumulador,
                                                                                                            obj.cCodCalendarioProyecto,
                                                                                                            obj.tComentario
                                                          );
                intIdProyecto_Etapa_CostoFijo = obj.IidProyecto_Etapa_CostoFijo;
            }
            catch
            {
                intIdProyecto_Etapa_CostoFijo = 0;
            }
            return intIdProyecto_Etapa_CostoFijo;
        }

        public bool Elimina_Proyecto_Etapa_CostoFijo(int intIdProyecto_Etapa_CostoFijo)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_msto_Proyecto_Etapa_CostoFijo", intIdProyecto_Etapa_CostoFijo);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region Proyecto_FuenteFinanciamiento
        public DataSet Combo_Proyecto_FuenteFinanciamiento(string strCodEmpresa,
                                            string strCodProyecto
                                          )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Proyecto.spp_cbo_Proyecto_FuenteFinanciamiento",
                                            strCodEmpresa,
                                            strCodProyecto
                                            );
        }

        public DataSet Combo_Proyecto_FuenteFinanciamiento_Todos(string strCodEmpresa)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "Proyecto.spp_cbo_Proyecto_FuenteFinanciamiento_Todos",
                                            strCodEmpresa
                                            );
        }

        //public DataSet Ayuda_Proyecto_FuenteFinanciamiento(string strCodEmpresa,
        //                                                    string strCodProyecto
        //                                                  )
        //{
        //    return SqlHelper.ExecuteDataset(strConnection,
        //                                    "Proyecto.spp_help_Proyecto_FuenteFinanciamiento",
        //                                    strCodEmpresa,
        //                                    strCodProyecto
        //                                    );
        //}
        //public DataSet Ayuda_FuenteFinanciamiento_Proyecto(string strCodFuenteFinanciamiento)
        //{
        //    return SqlHelper.ExecuteDataset(strConnection,
        //                                    "Proyecto.spp_help_msto_FuenteFinanciamiento_Proyecto",
        //                                    strCodFuenteFinanciamiento
        //                                   );
        //}

        public DataSet Lista_Proyecto_FuenteFinanciamiento(string strCodEmpresa,
                                                    string strCodProyecto

                                          )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection,
                                                    "Proyecto.spp_lst_msto_Proyecto_FuenteFinanciamiento",
                                                    strCodEmpresa,
                                                    strCodProyecto
                                                )
                  )
            {
                return ds;
            }
        }


        public Boolean Graba_Proyecto_FuenteFinanciamiento(string strCodEmpresa,
                                                string strCodProyecto,
                                                string strCodFuenteFinanciamiento
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Proyecto].[spp_ins_msto_Proyecto_FuenteFinanciamiento]",
                                                strCodEmpresa,
                                                strCodProyecto,
                                                strCodFuenteFinanciamiento
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }
        public Boolean Elimina_Proyecto_FuenteFinanciamiento(string strCodEmpresa,
                                                string strCodProyecto,
                                                string strCodFuenteFinanciamiento
                                              )
        {
            DataTable dt = new DataTable();
            Boolean blnResult = false;
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection,
                                                "[Proyecto].[spp_del_msto_Proyecto_FuenteFinanciamiento]",
                                                strCodEmpresa,
                                                strCodProyecto,
                                                strCodFuenteFinanciamiento
                                                          );
                blnResult = true;
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }


        #endregion

        #region TipoProyecto
        public DataSet Ayuda_TipoProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_TipoProyecto");
        }

        public DataSet Lista_TipoProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_ctrl_TipoProyecto");
        }

        public DataSet Combo_TipoProyecto_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_TipoProyecto_Reporte");
        }

        public DataSet Combo_TipoProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_TipoProyecto");
        }
        public Model.TipoProyecto Recupera_TipoProyecto(int intIdTipoProyecto)
        {
            DataTable dt = new DataTable();
            Model.TipoProyecto obj = new Model.TipoProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_TipoProyecto", intIdTipoProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidTipoProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodTipoProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomTipoProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public Model.TipoProyecto Recupera_TipoProyecto_codigo(string strCodTipoProyecto)
        {

            DataTable dt = new DataTable();
            Model.TipoProyecto obj = new Model.TipoProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_TipoProyecto_codigo", strCodTipoProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidTipoProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodTipoProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomTipoProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;

        }
        public int Graba_TipoProyecto(Model.TipoProyecto obj)
        {
            int intIdTipoProyecto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_ctrl_TipoProyecto", obj.CcodTipoProyecto,
                                                                                     obj.VnomTipoProyecto
                                                          );
                intIdTipoProyecto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdTipoProyecto = 0;
            }
            return intIdTipoProyecto;
        }
        public int Modifica_TipoProyecto(Model.TipoProyecto obj)
        {

            int intIdTipoProyecto = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_ctrl_TipoProyecto", obj.IidTipoProyecto,
                                                                                     obj.CcodTipoProyecto,
                                                                                     obj.VnomTipoProyecto
                                                          );
                intIdTipoProyecto = obj.IidTipoProyecto;
            }
            catch
            {
                intIdTipoProyecto = 0;
            }
            return intIdTipoProyecto;
        }

        public bool Elimina_TipoProyecto(int intIdTipoProyecto)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_ctrl_TipoProyecto", intIdTipoProyecto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region UnidadEjecutoraProyecto
        public DataSet Lista_UnidadEjecutoraProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_ctrl_UnidadEjecutoraProyecto");
        }

        public DataSet Ayuda_UnidadEjecutoraProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_UnidadEjecutoraProyecto");
        }

        public DataSet Combo_UnidadEjecutoraProyecto_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_UnidadEjecutoraProyecto_Reporte");
        }

        public DataSet Combo_UnidadEjecutoraProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_UnidadEjecutoraProyecto");
        }
        public Model.UnidadEjecutoraProyecto Recupera_UnidadEjecutoraProyecto(int intIdUnidadEjecutoraProyecto)
        {
            DataTable dt = new DataTable();
            Model.UnidadEjecutoraProyecto obj = new Model.UnidadEjecutoraProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_UnidadEjecutoraProyecto", intIdUnidadEjecutoraProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidUnidadEjecutoraProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodUnidadEjecutoraProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomUnidadEjecutoraProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public Model.UnidadEjecutoraProyecto Recupera_UnidadEjecutoraProyecto_codigo(string strCodUnidadEjecutoraProyecto)
        {

            DataTable dt = new DataTable();
            Model.UnidadEjecutoraProyecto obj = new Model.UnidadEjecutoraProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_UnidadEjecutoraProyecto_codigo", strCodUnidadEjecutoraProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidUnidadEjecutoraProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodUnidadEjecutoraProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomUnidadEjecutoraProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;

        }
        public int Graba_UnidadEjecutoraProyecto(Model.UnidadEjecutoraProyecto obj)
        {
            int intIdUnidadEjecutoraProyecto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_ctrl_UnidadEjecutoraProyecto", obj.CcodUnidadEjecutoraProyecto,
                                                                                     obj.VnomUnidadEjecutoraProyecto
                                                          );
                intIdUnidadEjecutoraProyecto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdUnidadEjecutoraProyecto = 0;
            }
            return intIdUnidadEjecutoraProyecto;
        }
        public int Modifica_UnidadEjecutoraProyecto(Model.UnidadEjecutoraProyecto obj)
        {

            int intIdUnidadEjecutoraProyecto = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_ctrl_UnidadEjecutoraProyecto", obj.IidUnidadEjecutoraProyecto,
                                                                                     obj.CcodUnidadEjecutoraProyecto,
                                                                                     obj.VnomUnidadEjecutoraProyecto
                                                          );
                intIdUnidadEjecutoraProyecto = obj.IidUnidadEjecutoraProyecto;
            }
            catch
            {
                intIdUnidadEjecutoraProyecto = 0;
            }
            return intIdUnidadEjecutoraProyecto;
        }

        public bool Elimina_UnidadEjecutoraProyecto(int intIdUnidadEjecutoraProyecto)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_ctrl_UnidadEjecutoraProyecto", intIdUnidadEjecutoraProyecto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region UnidadFormuladoraProyecto
        public DataSet Lista_UnidadFormuladoraProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_ctrl_UnidadFormuladoraProyecto");
        }

        public DataSet Ayuda_UnidadFormuladoraProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_UnidadFormuladoraProyecto");
        }

        public DataSet Combo_UnidadFormuladoraProyecto_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_UnidadFormuladoraProyecto_Reporte");
        }

        public DataSet Combo_UnidadFormuladoraProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_UnidadFormuladoraProyecto");
        }
        public Model.UnidadFormuladoraProyecto Recupera_UnidadFormuladoraProyecto(int intIdUnidadFormuladoraProyecto)
        {
            DataTable dt = new DataTable();
            Model.UnidadFormuladoraProyecto obj = new Model.UnidadFormuladoraProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_UnidadFormuladoraProyecto", intIdUnidadFormuladoraProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidUnidadFormuladoraProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodUnidadFormuladoraProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomUnidadFormuladoraProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public Model.UnidadFormuladoraProyecto Recupera_UnidadFormuladoraProyecto_codigo(string strCodUnidadFormuladoraProyecto)
        {

            DataTable dt = new DataTable();
            Model.UnidadFormuladoraProyecto obj = new Model.UnidadFormuladoraProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_UnidadFormuladoraProyecto_codigo", strCodUnidadFormuladoraProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidUnidadFormuladoraProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodUnidadFormuladoraProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomUnidadFormuladoraProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;

        }
        public int Graba_UnidadFormuladoraProyecto(Model.UnidadFormuladoraProyecto obj)
        {
            int intIdUnidadFormuladoraProyecto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_ctrl_UnidadFormuladoraProyecto", obj.CcodUnidadFormuladoraProyecto,
                                                                                     obj.VnomUnidadFormuladoraProyecto
                                                          );
                intIdUnidadFormuladoraProyecto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdUnidadFormuladoraProyecto = 0;
            }
            return intIdUnidadFormuladoraProyecto;
        }
        public int Modifica_UnidadFormuladoraProyecto(Model.UnidadFormuladoraProyecto obj)
        {

            int intIdUnidadFormuladoraProyecto = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_ctrl_UnidadFormuladoraProyecto", obj.IidUnidadFormuladoraProyecto,
                                                                                     obj.CcodUnidadFormuladoraProyecto,
                                                                                     obj.VnomUnidadFormuladoraProyecto
                                                          );
                intIdUnidadFormuladoraProyecto = obj.IidUnidadFormuladoraProyecto;
            }
            catch
            {
                intIdUnidadFormuladoraProyecto = 0;
            }
            return intIdUnidadFormuladoraProyecto;
        }

        public bool Elimina_UnidadFormuladoraProyecto(int intIdUnidadFormuladoraProyecto)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_ctrl_UnidadFormuladoraProyecto", intIdUnidadFormuladoraProyecto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region EmpresaContratante
        public DataSet Combo_EmpresaContratante()
        {
            return SqlHelper.ExecuteDataset(strConnection, "General.spp_cbo_msto_EmpresaContratante");

        }
        #endregion

        #region TareaProyecto
        public DataSet Ayuda_TareaProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_TareaProyecto");
        }
        public DataSet Lista_TareaProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_ctrl_TareaProyecto");
        }

        public DataSet Naturaleza_TareaProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_TareaProyecto");
        }

        public DataSet Combo_TareaProyecto_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_TareaProyecto_Reporte");
        }

        public DataSet Combo_TareaProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_TareaProyecto");
        }
        public Model.TareaProyecto Recupera_TareaProyecto(int intIdTareaProyecto)
        {
            DataTable dt = new DataTable();
            Model.TareaProyecto obj = new Model.TareaProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_TareaProyecto", intIdTareaProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidTareaProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodTareaProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomTareaProyecto = Convert.ToString(dt.Rows[0][2]);
                obj.VnomCortoTareaProyecto = Convert.ToString(dt.Rows[0][3]);
                obj.BestadoTareaProyecto = Convert.ToBoolean(dt.Rows[0][4]);
            }
            return obj;
        }

        public Model.TareaProyecto Recupera_TareaProyecto_codigo(string strCodTareaProyecto)
        {

            DataTable dt = new DataTable();
            Model.TareaProyecto obj = new Model.TareaProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_TareaProyecto_codigo", strCodTareaProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidTareaProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodTareaProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomTareaProyecto = Convert.ToString(dt.Rows[0][2]);
                obj.VnomCortoTareaProyecto = Convert.ToString(dt.Rows[0][3]);
                obj.BestadoTareaProyecto = Convert.ToBoolean(dt.Rows[0][4]);
            }
            return obj;

        }
        public int Graba_TareaProyecto(Model.TareaProyecto obj)
        {
            int intIdTareaProyecto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_ctrl_TareaProyecto", obj.CcodTareaProyecto,
                                                                                                      obj.VnomTareaProyecto,
                                                                                                      obj.VnomCortoTareaProyecto,
                                                                                                      obj.BestadoTareaProyecto
                                                          );
                intIdTareaProyecto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdTareaProyecto = 0;
            }
            return intIdTareaProyecto;
        }
        public int Modifica_TareaProyecto(Model.TareaProyecto obj)
        {

            int intIdTareaProyecto = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_ctrl_TareaProyecto", obj.IidTareaProyecto,
                                                                                     obj.CcodTareaProyecto,
                                                                                     obj.VnomTareaProyecto,
                                                                                     obj.VnomCortoTareaProyecto,
                                                                                     obj.BestadoTareaProyecto
                                                          );
                intIdTareaProyecto = obj.IidTareaProyecto;
            }
            catch
            {
                intIdTareaProyecto = 0;
            }
            return intIdTareaProyecto;
        }

        public bool Elimina_TareaProyecto(int intIdTareaProyecto)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_ctrl_TareaProyecto", intIdTareaProyecto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region TipoActividadProyecto
        public DataSet Ayuda_TipoActividadProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_TipoActividadProyecto");
        }
        public DataSet Lista_TipoActividadProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_lst_ctrl_TipoActividadProyecto");
        }

        public DataSet Naturaleza_TipoActividadProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_help_ctrl_TipoActividadProyecto");
        }

        public DataSet Combo_TipoActividadProyecto_Reporte()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_TipoActividadProyecto_Reporte");
        }

        public DataSet Combo_TipoActividadProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_TipoActividadProyecto");
        }
        public Model.TipoActividadProyecto Recupera_TipoActividadProyecto(int intIdTipoActividadProyecto)
        {
            DataTable dt = new DataTable();
            Model.TipoActividadProyecto obj = new Model.TipoActividadProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_TipoActividadProyecto", intIdTipoActividadProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidTipoActividadProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodTipoActividadProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomTipoActividadProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;
        }

        public Model.TipoActividadProyecto Recupera_TipoActividadProyecto_codigo(string strCodTipoActividadProyecto)
        {

            DataTable dt = new DataTable();
            Model.TipoActividadProyecto obj = new Model.TipoActividadProyecto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_sel_ctrl_TipoActividadProyecto_codigo", strCodTipoActividadProyecto);

            if (dt.Rows.Count > 0)
            {
                obj.IidTipoActividadProyecto = Convert.ToInt32(dt.Rows[0][0]);
                obj.CcodTipoActividadProyecto = Convert.ToString(dt.Rows[0][1]);
                obj.VnomTipoActividadProyecto = Convert.ToString(dt.Rows[0][2]);
            }
            return obj;

        }
        public int Graba_TipoActividadProyecto(Model.TipoActividadProyecto obj)
        {
            int intIdTipoActividadProyecto = 0;
            DataTable dt = new DataTable();
            try
            {
                dt = SqlHelper.ExecuteDataTable(strConnection, "Proyecto.spp_ins_ctrl_TipoActividadProyecto", obj.CcodTipoActividadProyecto,
                                                                                                      obj.VnomTipoActividadProyecto
                                                          );
                intIdTipoActividadProyecto = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch
            {
                intIdTipoActividadProyecto = 0;
            }
            return intIdTipoActividadProyecto;
        }
        public int Modifica_TipoActividadProyecto(Model.TipoActividadProyecto obj)
        {

            int intIdTipoActividadProyecto = 0;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_upd_ctrl_TipoActividadProyecto", obj.IidTipoActividadProyecto,
                                                                                     obj.CcodTipoActividadProyecto,
                                                                                     obj.VnomTipoActividadProyecto
                                                          );
                intIdTipoActividadProyecto = obj.IidTipoActividadProyecto;
            }
            catch
            {
                intIdTipoActividadProyecto = 0;
            }
            return intIdTipoActividadProyecto;
        }

        public bool Elimina_TipoActividadProyecto(int intIdTipoActividadProyecto)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Proyecto.spp_del_ctrl_TipoActividadProyecto", intIdTipoActividadProyecto);
            }
            catch
            {
                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region EstadoMacroProyecto
        public DataSet Combo_EstadoMacroProyecto()
        {
            return SqlHelper.ExecuteDataset(strConnection, "Proyecto.spp_cbo_ctrl_EstadoMacroProyecto");
        }

        #endregion

        #endregion

        #region RECURSOHUMANO
        #region "TipoMovimientoConcepto"
        public DataSet combo_TipoMovimientoConcepto()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_TipoMovimientoConcepto"
                                            );
        }
        #endregion

        #region "ClaseConcepto"
        public DataSet combo_ClaseConcepto()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_ClaseConcepto"
                                            );
        }
        #endregion

        #region "TipoConcepto"
        public DataSet combo_TipoConcepto()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_TipoConcepto"
                                            );
        }
        #endregion

        #region "Contrato"
        public DataSet lista_Empleado(string strCodEmpresa,
                                       string strCodTipoCalculo
                                     )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "RRHH.spp_lst_msto_Empleado",
                                            strCodEmpresa,
                                            strCodTipoCalculo
                                            );

        }

        public DataSet combo_TipoCalculoPlanilla(
                                                 )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_TipoCalculoPlanilla"
                                            );
        }

        public DataSet combo_Sexo()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "General.spp_cbo_ctrl_Sexo"
                                            );
        }

        public DataSet combo_TipoDocumentoIdentidad()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "General.spp_cbo_ctrl_TipoDocumentoIdentidad"
                                            );
        }

        public DataSet ayuda_Nacionalidad()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "General.spp_help_ctrl_Nacionalidad"
                                            );
        }

        public DataSet Recupera_Empleado_Vigente(string strCodEmpresa,
                                                  string strCodEmpleado
                                                )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_Lst_msto_Empleado_Contrato_vigente",
                                             strCodEmpleado
                                            );
        }

        public Model.Empleado recupera_Empleado(int intIdEmpleado)
        {
            Model.Empleado obj = new Model.Empleado();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "RRHH.spp_sel_msto_Empleado",
                                            intIdEmpleado,
                                            ""
                                            );
            if (dt.Rows.Count > 0)
            {
                obj.iIdEmpleado = Convert.ToInt32(dt.Rows[0]["IIDEmpleado"]);
                obj.cCodEmpleado = Convert.ToString(dt.Rows[0]["CCODEmpleado"]);
                obj.vPriNombre = Convert.ToString(dt.Rows[0]["VPriNombre"]);
                obj.vSegNombre = Convert.ToString(dt.Rows[0]["vSegNombre"]);
                obj.vPriApellido = Convert.ToString(dt.Rows[0]["vPriApellido"]);
                obj.vSegApellido = Convert.ToString(dt.Rows[0]["vSegApellido"]);
                obj.vEmail = Convert.ToString(dt.Rows[0]["vEmail"]);
                obj.cCodTipoDocumentoIdentidad = Convert.ToString(dt.Rows[0]["cCodTipoDocumentoIdentidad"]);
                obj.cNumDocumentoIdentidad = Convert.ToString(dt.Rows[0]["cNumDocumentoIdentidad"]);
                obj.cCodNacionalidad = Convert.ToString(dt.Rows[0]["cCodNacionalidad"]);
                obj.cCodSexo = Convert.ToString(dt.Rows[0]["cCodSexo"]);
                obj.dFecNacimiento = Convert.ToDateTime(dt.Rows[0]["dFecNacimiento"]);
                obj.cCodTipoCalculo = Convert.ToString(dt.Rows[0]["cCodTipoCalculo"]);
                obj.cHorIngreso = Convert.ToString(dt.Rows[0]["cHorIngreso"]);
                obj.cHorSalida = Convert.ToString(dt.Rows[0]["cHorSalida"]);
                obj.cHorIngresoTarde = Convert.ToString(dt.Rows[0]["cHorIngresoTarde"]);
                obj.cHorSalidaTarde = Convert.ToString(dt.Rows[0]["cHorSalidaTarde"]);
                obj.iIdEmpleado_Turno = Convert.ToInt32(dt.Rows[0]["iIdEmpleado_Turno"]);
                obj.iIdEmpleado_Contrato = Convert.ToInt32(dt.Rows[0]["iIdEmpleado_Contrato"]);
                obj.cCodUbiArea = Convert.ToString(dt.Rows[0]["cCodUbiArea"]);
            }
            return obj;
        }

        public int graba_Empleado(Model.Empleado obj)
        {
            DataTable dt = new DataTable();
            int intIdEmpleado = obj.iIdEmpleado;

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_ins_msto_Empleado",
                                             obj.cCodEmpleado,
                                                obj.vPriNombre,
                                                obj.vSegNombre,
                                                obj.vPriApellido,
                                                obj.vSegApellido,
                                                obj.vEmail,
                                                obj.cCodTipoDocumentoIdentidad,
                                                obj.cNumDocumentoIdentidad,
                                                obj.cCodNacionalidad,
                                                obj.cCodSexo,
                                                obj.dFecNacimiento,
                                                obj.cCodTipoCalculo,
                                                obj.cCodEmpresa
                                           );
            if (dt.Rows.Count > 0)
            {
                intIdEmpleado = Convert.ToInt32(dt.Rows[0]["iIdEmpleado"]);
            }

            return intIdEmpleado;
        }

        public int modifica_Empleado(Model.Empleado obj)
        {
            DataTable dt = new DataTable();
            int intIdEmpleado = 0;

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_upd_msto_Empleado",
                                                obj.iIdEmpleado,
                                                obj.cCodEmpleado,
                                                obj.vPriNombre,
                                                obj.vSegNombre,
                                                obj.vPriApellido,
                                                obj.vSegApellido,
                                                obj.vEmail,
                                                obj.cCodTipoDocumentoIdentidad,
                                                obj.cNumDocumentoIdentidad,
                                                obj.cCodNacionalidad,
                                                obj.cCodSexo,
                                                obj.dFecNacimiento,
                                                obj.cCodTipoCalculo,
                                                obj.cCodEmpresa
                                           );
            if (dt.Rows.Count > 0)
            {
                intIdEmpleado = Convert.ToInt32(dt.Rows[0]["iIdEmpleado"]);
            }

            return intIdEmpleado;
        }

        public Boolean elimina_Empleado(int intIdEmpleado)
        {
            bool blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                            "RRHH.spp_del_msto_Empleado",
                                            intIdEmpleado
                                        );
            }
            catch (Exception)
            {

                blnResult = false;
            }
            return blnResult;
        }

        #endregion

        #region "Empleado_Contrato"
        public DataSet combo_Empresa()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "General.spp_cbo_msto_Empresa"
                                           );
        }

        public DataSet combo_TipoDocumentoLaboral()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_TipoDocumentoLaboral"
                                           );
        }

        public DataSet combo_TipoContratoLaboral()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_TipoContratoLaboral"
                                           );
        }

        public DataSet combo_TipoEmpleado()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_TipoEmpleado"
                                           );
        }

        public DataSet combo_NivelSalarial()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_NivelSalarial"
                                           );
        }

        public DataSet combo_ClaseEmpleado()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_ClaseEmpleado"
                                           );
        }

        public DataSet combo_CategoriaOcupacional()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_CategoriaOcupacional"
                                           );
        }

        public DataSet combo_RegimenLaboral()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_RegimenLaboral"
                                           );
        }

        public DataSet combo_PeriodicidadRemunerativa()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_PeriodicidadRemunerativa"
                                           );
        }

        public DataSet combo_TipoRemuneracion()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_TipoRemuneracion"
                                           );
        }

        public DataSet combo_TipoMoneda_RRHH()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "General.spp_cbo_ctrl_TipoMoneda"
                                           );
        }

        public DataSet combo_TipoFormatoContrato()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_TipoFormatoContrato"
                                           );
        }

        public DataSet lista_Empleado_Contrato(string strCodEmpleado)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_lst_msto_Empleado_Contrato",
                                             strCodEmpleado
                                           );
        }

        public Model.Empleado_Contrato recupera_Empleado_Contrato(int intIdEmpleado_Contrato)
        {
            Model.Empleado_Contrato mec = new Model.Empleado_Contrato();
            DataTable dt = new DataTable();
            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_msto_Empleado_Contrato",
                                             intIdEmpleado_Contrato
                                           );
            if (dt.Rows.Count > 0)
            {
                mec.iIdEmpleado_Contrato = Convert.ToInt32(dt.Rows[0]["IIDEmpleado_Contrato"]);
                mec.iIdEmpleado_Baja = Convert.ToInt32(dt.Rows[0]["iIdEmpleado_Baja"]);
                mec.cCodEmpleado = Convert.ToString(dt.Rows[0]["CCODEmpleado"]);
                mec.cCodEmpresaContratante = Convert.ToString(dt.Rows[0]["CCODEmpresaContratante"]);
                mec.cCodEmpresaIntermediaria = Convert.ToString(dt.Rows[0]["CCODEmpresaIntermediaria"]);
                mec.cCodTipoDocumentoLaboral = Convert.ToString(dt.Rows[0]["cCodTipoDocumentoLaboral"]);
                mec.cNumDocumento = Convert.ToString(dt.Rows[0]["cNumDocumento"]);
                mec.cCodTipoEmpleado = Convert.ToString(dt.Rows[0]["cCodTipoEmpleado"]);
                mec.dFecIngreso = Convert.ToDateTime(dt.Rows[0]["dFecIngreso"]);
                mec.dFecTermino = Convert.ToDateTime(dt.Rows[0]["dFecTermino"]);
                mec.cCodClaseEmpleado = Convert.ToString(dt.Rows[0]["cCodClaseEmpleado"]);
                mec.cCodNivelSalarial = Convert.ToString(dt.Rows[0]["cCodNivelSalarial"]);
                mec.cCodPeriodicidadRemunerativa = Convert.ToString(dt.Rows[0]["cCodPeriodicidadRemunerativa"]);
                mec.cCodTipoContratoLaboral = Convert.ToString(dt.Rows[0]["cCodTipoContratoLaboral"]);
                mec.cCodTipoRemuneracion = Convert.ToString(dt.Rows[0]["cCodTipoRemuneracion"]);
                mec.cCodCategoriaOcupacional = Convert.ToString(dt.Rows[0]["cCodCategoriaOcupacional"]);
                mec.cCodOcupacion = Convert.ToString(dt.Rows[0]["cCodOcupacion"]);
                mec.cCodRegimenLaboral = Convert.ToString(dt.Rows[0]["cCodRegimenLaboral"]);
                mec.tNota = Convert.ToString(dt.Rows[0]["tNota"]);
                mec.bEstado = Convert.ToBoolean(dt.Rows[0]["bEstado"]);
                mec.fRemuneracionMensual = Convert.ToDouble(dt.Rows[0]["fRemuneracionMensual"]);
                mec.cCodTipoMoneda = Convert.ToString(dt.Rows[0]["cCodTipoMoneda"]);
                mec.fHorasSemanales = Convert.ToDouble(dt.Rows[0]["fHorasSemanales"]);
                mec.cCodTipoFormatoContrato = Convert.ToString(dt.Rows[0]["cCodTipoFormatoContrato"]);
                mec.cCodObra = Convert.ToString(dt.Rows[0]["cCodObra"]);
                mec.fMesTrabajo = Convert.ToDouble(dt.Rows[0]["fMesTrabajo"]);
            }

            return mec;
        }

        public Model.Empleado_Contrato recupera_Empleado_Contrato_Duplicado(string strCodEmpleado)
        {
            Model.Empleado_Contrato mec = new Model.Empleado_Contrato();
            DataTable dt = new DataTable();
            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_msto_Empleado_Contrato_Duplicado",
                                             strCodEmpleado
                                           );
            if (dt.Rows.Count > 0)
            {
                mec.iIdEmpleado_Contrato = Convert.ToInt32(dt.Rows[0]["IIDEmpleado_Contrato"]);
                mec.iIdEmpleado_Baja = Convert.ToInt32(dt.Rows[0]["iIdEmpleado_Baja"]);
                mec.cCodEmpleado = Convert.ToString(dt.Rows[0]["CCODEmpleado"]);
                mec.cCodEmpresaContratante = Convert.ToString(dt.Rows[0]["CCODEmpresaContratante"]);
                mec.cCodEmpresaIntermediaria = Convert.ToString(dt.Rows[0]["CCODEmpresaIntermediaria"]);
                mec.cCodTipoDocumentoLaboral = Convert.ToString(dt.Rows[0]["cCodTipoDocumentoLaboral"]);
                mec.cNumDocumento = Convert.ToString(dt.Rows[0]["cNumDocumento"]);
                mec.cCodTipoEmpleado = Convert.ToString(dt.Rows[0]["cCodTipoEmpleado"]);
                mec.dFecIngreso = Convert.ToDateTime(dt.Rows[0]["dFecIngreso"]);
                mec.dFecTermino = Convert.ToDateTime(dt.Rows[0]["dFecTermino"]);
                mec.cCodClaseEmpleado = Convert.ToString(dt.Rows[0]["cCodClaseEmpleado"]);
                mec.cCodNivelSalarial = Convert.ToString(dt.Rows[0]["cCodNivelSalarial"]);
                mec.cCodPeriodicidadRemunerativa = Convert.ToString(dt.Rows[0]["cCodPeriodicidadRemunerativa"]);
                mec.cCodTipoContratoLaboral = Convert.ToString(dt.Rows[0]["cCodTipoContratoLaboral"]);
                mec.cCodTipoRemuneracion = Convert.ToString(dt.Rows[0]["cCodTipoRemuneracion"]);
                mec.cCodCategoriaOcupacional = Convert.ToString(dt.Rows[0]["cCodCategoriaOcupacional"]);
                mec.cCodOcupacion = Convert.ToString(dt.Rows[0]["cCodOcupacion"]);
                mec.cCodRegimenLaboral = Convert.ToString(dt.Rows[0]["cCodRegimenLaboral"]);
                mec.tNota = Convert.ToString(dt.Rows[0]["tNota"]);
                mec.bEstado = Convert.ToBoolean(dt.Rows[0]["bEstado"]);
                mec.fRemuneracionMensual = Convert.ToDouble(dt.Rows[0]["fRemuneracionMensual"]);
                mec.cCodTipoMoneda = Convert.ToString(dt.Rows[0]["cCodTipoMoneda"]);
                mec.fHorasSemanales = Convert.ToDouble(dt.Rows[0]["fHorasSemanales"]);
                mec.cCodTipoFormatoContrato = Convert.ToString(dt.Rows[0]["cCodTipoFormatoContrato"]);
            }

            return mec;
        }

        public int graba_Empleado_Contrato(Model.Empleado_Contrato obj)
        {
            int intIdEmpleado_Contrato = obj.iIdEmpleado_Contrato;
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_ins_msto_Empleado_Contrato",
                                            obj.cCodEmpleado,
                                            obj.cCodEmpresaContratante,
                                            obj.cCodEmpresaIntermediaria,
                                            obj.cCodTipoDocumentoLaboral,
                                            obj.cNumDocumento,
                                            obj.cCodTipoEmpleado,
                                            obj.dFecIngreso,
                                            obj.dFecTermino,
                                            obj.cCodClaseEmpleado,
                                            obj.cCodNivelSalarial,
                                            obj.cCodPeriodicidadRemunerativa,
                                            obj.cCodTipoContratoLaboral,
                                            obj.cCodTipoRemuneracion,
                                            obj.cCodCategoriaOcupacional,
                                            obj.cCodOcupacion,
                                            obj.cCodRegimenLaboral,
                                            obj.tNota,
                                            obj.fRemuneracionMensual,
                                            obj.cCodTipoMoneda,
                                            obj.fHorasSemanales,
                                            obj.cCodTipoFormatoContrato,
                                            obj.cCodObra,
                                            obj.fMesTrabajo
                                           );
            if (dt.Rows.Count > 0)
            {
                intIdEmpleado_Contrato = Convert.ToInt32(dt.Rows[0]["iIdEmpleado_Contrato"]);
            }

            return intIdEmpleado_Contrato;

        }

        public int modifica_Empleado_Contrato(Model.Empleado_Contrato obj)
        {
            int intIdEmpleado_Contrato = obj.iIdEmpleado_Contrato;
            SqlHelper.ExecuteNonQuery(strConnection,
                                             "RRHH.spp_upd_msto_Empleado_Contrato",
                                            obj.iIdEmpleado_Contrato,
                                            obj.cCodEmpleado,
                                            obj.cCodEmpresaContratante,
                                            obj.cCodEmpresaIntermediaria,
                                            obj.cCodTipoDocumentoLaboral,
                                            obj.cNumDocumento,
                                            obj.cCodTipoEmpleado,
                                            obj.dFecIngreso,
                                            obj.dFecTermino,
                                            obj.cCodClaseEmpleado,
                                            obj.cCodNivelSalarial,
                                            obj.cCodPeriodicidadRemunerativa,
                                            obj.cCodTipoContratoLaboral,
                                            obj.cCodTipoRemuneracion,
                                            obj.cCodCategoriaOcupacional,
                                            obj.cCodOcupacion,
                                            obj.cCodRegimenLaboral,
                                            obj.tNota,
                                            obj.fRemuneracionMensual,
                                            obj.cCodTipoMoneda,
                                            obj.fHorasSemanales,
                                            obj.cCodTipoFormatoContrato,
                                            obj.cCodObra,
                                            obj.fMesTrabajo
                                           );

            return intIdEmpleado_Contrato;

        }

        public DataSet combo_Obra()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_Cbo_msto_Obra"
                                           );
        }

        #endregion

        #region "TipoEmpleado"
        public Model.TipoEmpleado recupera_TipoEmpleado(int intIdTipoEmpleado)
        {
            Model.TipoEmpleado obj = new Model.TipoEmpleado();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_ctrl_TipoEmpleado",
                                             intIdTipoEmpleado, ""
                                             );
            if (dt.Rows.Count > 0)
            {
                obj.iIdTipoEmpleado = Convert.ToInt32(dt.Rows[0]["IIDTipoEmpleado"]);
                obj.cCodTipoEmpleado = Convert.ToString(dt.Rows[0]["CCODTipoEmpleado"]);
                obj.vDesTipoEmpleado = Convert.ToString(dt.Rows[0]["VDESTipoEmpleado"]);
                obj.cCodTipoCalculo = Convert.ToString(dt.Rows[0]["cCodTipoCalculo"]);
                obj.cCodPeriodicidadRemunerativa = Convert.ToString(dt.Rows[0]["cCodPeriodicidadRemunerativa"]);
            }
            return obj;
        }
        public Model.TipoEmpleado recupera_TipoEmpleado_Codigo(string strCodTipoEmpleado)
        {
            Model.TipoEmpleado obj = new Model.TipoEmpleado();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_ctrl_TipoEmpleado",
                                             0, strCodTipoEmpleado
                                             );
            if (dt.Rows.Count > 0)
            {
                obj.iIdTipoEmpleado = Convert.ToInt32(dt.Rows[0]["IIDTipoEmpleado"]);
                obj.cCodTipoEmpleado = Convert.ToString(dt.Rows[0]["CCODTipoEmpleado"]);
                obj.vDesTipoEmpleado = Convert.ToString(dt.Rows[0]["VDESTipoEmpleado"]);
                obj.cCodTipoCalculo = Convert.ToString(dt.Rows[0]["cCodTipoCalculo"]);
                obj.cCodPeriodicidadRemunerativa = Convert.ToString(dt.Rows[0]["cCodPeriodicidadRemunerativa"]);
            }
            return obj;
        }

        public int graba_TipoEmpleado(Model.TipoEmpleado obj)
        {
            int intIdTipoEmpleado = obj.iIdTipoEmpleado;
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "RRHH.spp_ins_ctrl_TipoEmpleado",
                                            obj.cCodTipoEmpleado,
                                            obj.vDesTipoEmpleado,
                                            obj.cCodTipoCalculo
                                         );
            if (dt.Rows.Count > 0)
            {
                intIdTipoEmpleado = Convert.ToInt32(dt.Rows[0]["iIdTipoEmpleado"]);
            }

            return intIdTipoEmpleado;
        }

        public int modifica_TipoEmpleado(Model.TipoEmpleado obj)
        {
            int intIdTipoEmpleado = obj.iIdTipoEmpleado;

            SqlHelper.ExecuteNonQuery(strConnection,
                                            "RRHH.spp_upd_ctrl_TipoEmpleado",
                                            obj.cCodTipoEmpleado,
                                            obj.vDesTipoEmpleado,
                                            obj.cCodTipoCalculo
                                         );
            return intIdTipoEmpleado;
        }

        public Boolean elimina_TipoEmpleado(int intIdTipoEmpleado)
        {
            Boolean blbResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                                "RRHH.spp_del_ctrl_TipoEmpleado",
                                                intIdTipoEmpleado
                                             );

            }
            catch (Exception)
            {

                blbResult = false;
            }

            return blbResult;
        }



        #endregion

        #region "NivelSalarial"

        public Model.NivelSalarial recupera_NivelSalarial_Codigo(string strCodNivelSalarial)
        {
            Model.NivelSalarial obj = new Model.NivelSalarial();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_ctrl_NivelSalarial_Codigo",
                                             strCodNivelSalarial
                                             );
            if (dt.Rows.Count > 0)
            {
                obj.iIdNivelSalarial = Convert.ToInt32(dt.Rows[0]["IIDNivelSalarial"]);
                obj.cCodNivelSalarial = Convert.ToString(dt.Rows[0]["CCODNivelSalarial"]);
                obj.vDesNivelSalarial = Convert.ToString(dt.Rows[0]["VDESNivelSalarial"]);
                obj.fSalarioInicial = Convert.ToDouble(dt.Rows[0]["fSalarioInicial"]);
                obj.fSalarioFinal = Convert.ToDouble(dt.Rows[0]["fSalarioFinal"]);
            }
            return obj;
        }
        public Model.NivelSalarial recupera_NivelSalarial(int intIdNivelSalarial)
        {
            Model.NivelSalarial obj = new Model.NivelSalarial();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_ctrl_NivelSalarial",
                                             intIdNivelSalarial
                                             );
            if (dt.Rows.Count > 0)
            {
                obj.iIdNivelSalarial = Convert.ToInt32(dt.Rows[0]["IIDNivelSalarial"]);
                obj.cCodNivelSalarial = Convert.ToString(dt.Rows[0]["CCODNivelSalarial"]);
                obj.vDesNivelSalarial = Convert.ToString(dt.Rows[0]["VDESNivelSalarial"]);
                obj.fSalarioInicial = Convert.ToDouble(dt.Rows[0]["fSalarioInicial"]);
                obj.fSalarioFinal = Convert.ToDouble(dt.Rows[0]["fSalarioFinal"]);
            }
            return obj;
        }

        public int graba_NivelSalarial(Model.NivelSalarial obj)
        {
            int intIdNivelSalarial = obj.iIdNivelSalarial;
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "RRHH.spp_ins_ctrl_NivelSalarial",
                                            obj.cCodNivelSalarial,
                                            obj.vDesNivelSalarial,
                                            obj.fSalarioInicial,
                                            obj.fSalarioFinal
                                         );
            if (dt.Rows.Count > 0)
            {
                intIdNivelSalarial = Convert.ToInt32(dt.Rows[0]["iIdNivelSalarial"]);
            }

            return intIdNivelSalarial;
        }

        public int modifica_NivelSalarial(Model.NivelSalarial obj)
        {
            int intIdNivelSalarial = obj.iIdNivelSalarial;

            SqlHelper.ExecuteNonQuery(strConnection,
                                            "RRHH.spp_upd_ctrl_NivelSalarial",
                                            obj.iIdNivelSalarial,
                                            obj.cCodNivelSalarial,
                                            obj.vDesNivelSalarial,
                                            obj.fSalarioInicial,
                                            obj.fSalarioFinal
                                         );
            return intIdNivelSalarial;
        }

        public Boolean elimina_NivelSalarial(int intIdNivelSalarial)
        {
            Boolean blbResult = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                                "RRHH.spp_del_ctrl_NivelSalarial",
                                                intIdNivelSalarial
                                             );

            }
            catch (Exception)
            {

                blbResult = false;
            }

            return blbResult;
        }

        #endregion

        #region "MotivoBajaEmpleado"
        public DataSet combo_MotivoBajaEmpleado()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "RRHH.spp_cbo_ctrl_MotivoBajaEmpleado"
                                            );
        }
        #endregion

        #region "Empleado_Baja"
        public Model.Empleado_Baja recupera_Empleado_Baja(int intIdEmpleado_Baja)
        {
            Model.Empleado_Baja meb = new Model.Empleado_Baja();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_msto_Empleado_Baja",
                                             intIdEmpleado_Baja
                                            );

            if (dt.Rows.Count > 0)
            {
                meb.iIdEmpleado_Baja = Convert.ToInt32(dt.Rows[0]["IIDEmpleado_Baja"]);
                meb.iIdEmpleado_Contrato = Convert.ToInt32(dt.Rows[0]["iIdEmpleado_Contrato"]);
                meb.cCodEmpleado = Convert.ToString(dt.Rows[0]["CCODEmpleado"]);
                meb.cCodMotivoBaja = Convert.ToString(dt.Rows[0]["CCodMotivoBaja"]);
                meb.dFecBaja = Convert.ToDateTime(dt.Rows[0]["dFecBaja"]);
                meb.tNotaBaja = Convert.ToString(dt.Rows[0]["tNotaBaja"]);
                meb.bEstado = Convert.ToBoolean(dt.Rows[0]["bEstado"]);
            }

            return meb;
        }
        public int graba_Empleado_Baja(Model.Empleado_Baja obj)
        {

            int intIdEmpleado_Baja = obj.iIdEmpleado_Baja;
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_ins_msto_Empleado_Baja",
                                             obj.iIdEmpleado_Contrato,
                                             obj.cCodEmpleado,
                                             obj.cCodMotivoBaja,
                                             obj.dFecBaja,
                                             obj.tNotaBaja
                                            );

            if (dt.Rows.Count > 0)
            {
                intIdEmpleado_Baja = Convert.ToInt32(dt.Rows[0]["iIdEmpleado_Baja"]);
            }
            return intIdEmpleado_Baja;
        }
        public int modifica_Empleado_Baja(Model.Empleado_Baja obj)
        {

            int intIdEmpleado_Baja = obj.iIdEmpleado_Baja;

            SqlHelper.ExecuteNonQuery(strConnection,
                                             "RRHH.spp_upd_msto_Empleado_Baja",
                                             obj.iIdEmpleado_Contrato,
                                             obj.cCodEmpleado,
                                             obj.cCodMotivoBaja,
                                             obj.dFecBaja,
                                             obj.tNotaBaja
                                            );

            return intIdEmpleado_Baja;
        }

        public Boolean elimina_Empleado_Baja(int intIdEmpleado_Baja)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "RRHH.spp_del_msto_Empleado_Baja",
                                          intIdEmpleado_Baja
                                         );
            }
            catch (Exception)
            {

                blnResult = false;
            }
            return blnResult;
        }
        #endregion

        #region "Profesion"
        public DataSet ayuda_Profesion()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_help_ctrl_Profesion"
                                           );
        }
        #endregion

        #region "Concepto"

        public DataSet lista_Concepto()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                      "RRHH.spp_lst_msto_Concepto"
                                    );
        }
        public DataSet ayuda_ConceptoPlanillaRTPS(string strCodClaseConcepto)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "RRHH.spp_help_msto_Concepto_RTPS",
                                            strCodClaseConcepto
                                           );
        }
        public DataSet ayuda_ConceptoPlanilla(string strCodClaseConcepto)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                            "RRHH.spp_help_msto_concepto",
                                            strCodClaseConcepto
                                           );
        }
        public Model.ConceptoPlanilla recupera_ConceptoPlanilla(int intidConcepto)
        {
            Model.ConceptoPlanilla mcp = new Model.ConceptoPlanilla();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_msto_Concepto",
                                             intidConcepto
                                           );

            if (dt.Rows.Count > 0)
            {
                mcp.iIdConcepto = Convert.ToInt32(dt.Rows[0]["IIDConcepto"]);
                mcp.cCodConcepto = Convert.ToString(dt.Rows[0]["CCODConcepto"]);
                mcp.cCodGrupo = Convert.ToString(dt.Rows[0]["CCODGrupo"]);
                mcp.vDesConcepto = Convert.ToString(dt.Rows[0]["VDESConcepto"]);
                mcp.cCodTipoMovimientoConcepto = Convert.ToString(dt.Rows[0]["CCodTipoMovimientoConcepto"]);
                mcp.cCodClaseConcepto = Convert.ToString(dt.Rows[0]["CCODClaseConcepto"]);
                mcp.cCodTipoConcepto = Convert.ToString(dt.Rows[0]["cCodTipoConcepto"]);
                mcp.cCodCalculoActual = Convert.ToString(dt.Rows[0]["cCodCalculoActual"]);
                mcp.bCalculoPromedio = Convert.ToBoolean(dt.Rows[0]["bCalculoPromedio"]);
                mcp.cCodConceptoRTPS = Convert.ToString(dt.Rows[0]["CCODConceptoRTPS"]);
                mcp.cCodEntidad = Convert.ToString(dt.Rows[0]["cCodEntidad"]);
            }
            return mcp;
        }
        public Model.ConceptoPlanilla recupera_ConceptoPlanilla_Codigo(string strCodConcepto)
        {
            Model.ConceptoPlanilla mcp = new Model.ConceptoPlanilla();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_msto_Concepto_Codigo",
                                             strCodConcepto
                                           );

            if (dt.Rows.Count > 0)
            {
                mcp.iIdConcepto = Convert.ToInt32(dt.Rows[0]["IIDConcepto"]);
                mcp.cCodConcepto = Convert.ToString(dt.Rows[0]["CCODConcepto"]);
                mcp.cCodGrupo = Convert.ToString(dt.Rows[0]["CCODGrupo"]);
                mcp.vDesConcepto = Convert.ToString(dt.Rows[0]["VDESConcepto"]);
                mcp.cCodTipoMovimientoConcepto = Convert.ToString(dt.Rows[0]["CCodTipoMovimientoConcepto"]);
                mcp.cCodClaseConcepto = Convert.ToString(dt.Rows[0]["CCODClaseConcepto"]);
                mcp.cCodTipoConcepto = Convert.ToString(dt.Rows[0]["cCodTipoConcepto"]);
                mcp.cCodCalculoActual = Convert.ToString(dt.Rows[0]["cCodCalculoActual"]);
                mcp.bCalculoPromedio = Convert.ToBoolean(dt.Rows[0]["bCalculoPromedio"]);
                mcp.cCodConceptoRTPS = Convert.ToString(dt.Rows[0]["CCODConceptoRTPS"]);
                mcp.cCodEntidad = Convert.ToString(dt.Rows[0]["cCodEntidad"]);
            }
            return mcp;
        }

        public Model.ConceptoPlanilla recupera_ConceptoPlanilla_Codigo_TipoCalculo(string strCodConcepto,
                                                                                   string strCodTipoCalculo
                                                                                  )
        {
            Model.ConceptoPlanilla mcp = new Model.ConceptoPlanilla();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_msto_Concepto_Planilla",
                                             strCodConcepto,
                                             strCodTipoCalculo
                                           );

            if (dt.Rows.Count > 0)
            {
                mcp.iIdConcepto = Convert.ToInt32(dt.Rows[0]["IIDConcepto"]);
                mcp.cCodConcepto = Convert.ToString(dt.Rows[0]["CCODConcepto"]);
                mcp.cCodGrupo = Convert.ToString(dt.Rows[0]["CCODGrupo"]);
                mcp.vDesConcepto = Convert.ToString(dt.Rows[0]["VDESConcepto"]);
                mcp.cCodTipoMovimientoConcepto = Convert.ToString(dt.Rows[0]["CCodTipoMovimientoConcepto"]);
                mcp.cCodClaseConcepto = Convert.ToString(dt.Rows[0]["CCODClaseConcepto"]);
                mcp.cCodTipoConcepto = Convert.ToString(dt.Rows[0]["cCodTipoConcepto"]);
                mcp.cCodCalculoActual = Convert.ToString(dt.Rows[0]["cCodCalculoActual"]);
                mcp.bCalculoPromedio = Convert.ToBoolean(dt.Rows[0]["bCalculoPromedio"]);
                mcp.cCodConceptoRTPS = Convert.ToString(dt.Rows[0]["CCODConceptoRTPS"]);
                mcp.cCodEntidad = Convert.ToString(dt.Rows[0]["cCodEntidad"]);
            }
            return mcp;
        }
        public int graba_ConceptoPlanilla(Model.ConceptoPlanilla obj)
        {
            int intIdConcepto = obj.iIdConcepto;
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_ins_msto_Concepto",
                                            obj.cCodEmpresa,
                                            obj.cCodConcepto,
                                            obj.cCodGrupo,
                                            obj.vDesConcepto,
                                            obj.cCodTipoMovimientoConcepto,
                                            obj.cCodClaseConcepto,
                                            obj.cCodTipoConcepto,
                                            obj.cCodCalculoActual,
                                            obj.bCalculoPromedio,
                                            obj.cCodConceptoRTPS,
                                            obj.cCodEntidad
                                            );

            if (dt.Rows.Count > 0)
            {
                intIdConcepto = Convert.ToInt32(dt.Rows[0]["iIdConcepto"]);
            }
            return intIdConcepto;
        }

        public int modifica_ConceptoPlanilla(Model.ConceptoPlanilla obj)
        {
            int intIdConcepto = obj.iIdConcepto;

            SqlHelper.ExecuteNonQuery(strConnection,
                                             "RRHH.spp_upd_msto_Concepto",
                                            obj.iIdConcepto,
                                            obj.cCodConcepto,
                                            obj.cCodGrupo,
                                            obj.vDesConcepto,
                                            obj.cCodTipoMovimientoConcepto,
                                            obj.cCodClaseConcepto,
                                            obj.cCodTipoConcepto,
                                            obj.cCodCalculoActual,
                                            obj.bCalculoPromedio,
                                            obj.cCodConceptoRTPS,
                                            obj.cCodEntidad
                                            );

            return intIdConcepto;
        }
        public Boolean elimina_ConceptoPlanilla(int intidConcepto,
                                    string strCodEmpresa
                                    )
        {
            Boolean blnResut = true;

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                            "RRHH.spp_del_msto_Concepto",
                                            intidConcepto,
                                            strCodEmpresa
                                          );
            }
            catch (Exception)
            {
                blnResut = false;

            }

            return blnResut;
        }
        #endregion

        #region "FormulaPlanilla"

        public DataSet lista_FormulaPlanilla(string strCodTipoCalculo)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_lst_msto_Formula",
                                             strCodTipoCalculo
                                            );
        }
        public Model.FormulaPlanilla recupera_FormulaPlanilla(int intIdFormula)
        {
            Model.FormulaPlanilla mfp = new Model.FormulaPlanilla();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_msto_Formula",
                                             intIdFormula
                                           );

            if (dt.Rows.Count > 0)
            {
                mfp.iIdFormula = Convert.ToInt32(dt.Rows[0]["IIDFormula"]);
                mfp.cCodTipoCalculo = Convert.ToString(dt.Rows[0]["cCodTipoCalculo"]);
                mfp.cCodConcepto = Convert.ToString(dt.Rows[0]["cCodConcepto"]);
                mfp.tFormulaMensual = Convert.ToString(dt.Rows[0]["tFormulaMensual"]);
                mfp.tFormulaVacacion = Convert.ToString(dt.Rows[0]["tFormulaVacacion"]);
                mfp.tFormulaGratificacion = Convert.ToString(dt.Rows[0]["tFormulaGratificacion"]);
                mfp.tFormulaDiasHoras = Convert.ToString(dt.Rows[0]["tFormulaDiasHoras"]);
                mfp.cCodClaseConcepto = Convert.ToString(dt.Rows[0]["cCodClaseConcepto"]);
            }
            return mfp;

        }

        public Model.FormulaPlanilla recupera_FormulaPlanilla_Codigo(string strCodFormula)
        {
            Model.FormulaPlanilla mfp = new Model.FormulaPlanilla();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_msto_Formula_Codigo",
                                             strCodFormula
                                           );

            if (dt.Rows.Count > 0)
            {
                mfp.iIdFormula = Convert.ToInt32(dt.Rows[0]["IIDFormula"]);
                mfp.cCodTipoCalculo = Convert.ToString(dt.Rows[0]["cCodTipoCalculo"]);
                mfp.cCodConcepto = Convert.ToString(dt.Rows[0]["cCodConcepto"]);
                mfp.tFormulaMensual = Convert.ToString(dt.Rows[0]["tFormulaMensual"]);
                mfp.tFormulaVacacion = Convert.ToString(dt.Rows[0]["tFormulaVacacion"]);
                mfp.tFormulaGratificacion = Convert.ToString(dt.Rows[0]["tFormulaGratificacion"]);
                mfp.tFormulaDiasHoras = Convert.ToString(dt.Rows[0]["tFormulaDiasHoras"]);
                mfp.cCodClaseConcepto = Convert.ToString(dt.Rows[0]["cCodClaseConcepto"]);
            }
            return mfp;

        }
        public int graba_FormulaPlanilla(Model.FormulaPlanilla obj)
        {
            int intIdFormula = obj.iIdFormula;
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_ins_msto_Formula",
                                             obj.cCodTipoCalculo,
                                             obj.cCodConcepto,
                                             obj.tFormulaMensual,
                                             obj.tFormulaVacacion,
                                             obj.tFormulaGratificacion,
                                             obj.tFormulaDiasHoras
                                            );

            if (dt.Rows.Count > 0)
            {
                intIdFormula = Convert.ToInt32(dt.Rows[0]["iIdFormula"]);
            }
            return intIdFormula;
        }

        public int modifica_FormulaPlanilla(Model.FormulaPlanilla obj)
        {
            int intIdFormula = obj.iIdFormula;

            SqlHelper.ExecuteNonQuery(strConnection,
                                             "RRHH.spp_upd_msto_Formula",
                                             obj.iIdFormula,
                                             obj.cCodTipoCalculo,
                                             obj.cCodConcepto,
                                             obj.tFormulaMensual,
                                             obj.tFormulaVacacion,
                                             obj.tFormulaGratificacion,
                                             obj.tFormulaDiasHoras
                                            );

            return intIdFormula;
        }

        public Boolean elimina_FormulaPlanilla(int intIdFormula)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                          "RRHH.spp_del_msto_Formula",
                                          intIdFormula
                                         );
            }
            catch (Exception ex)
            {
                blnResult = false;
            }
            return blnResult;
        }
        #endregion

        #region "FormulaPlanillaBI"

        public DataSet lista_FormulaPlanillaBI(string strCodTipoCalculo)
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_lst_msto_FormulaBI",
                                             strCodTipoCalculo
                                            );
        }
        public Model.FormulaPlanillaBI recupera_FormulaPlanillaBI(int intIdFormulaBI)
        {
            Model.FormulaPlanillaBI mfpb = new Model.FormulaPlanillaBI();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_msto_FormulaBI",
                                             intIdFormulaBI
                                            );
            if (dt.Rows.Count > 0)
            {
                mfpb.iIdFormulaBI = Convert.ToInt32(dt.Rows[0]["IIDFormulaBI"]);
                mfpb.cCodTipoCalculo = Convert.ToString(dt.Rows[0]["cCodTipoCalculo"]);
                mfpb.cCodFormulaBI = Convert.ToString(dt.Rows[0]["cCodFormulaBI"]);
                mfpb.vDesFormulaBI = Convert.ToString(dt.Rows[0]["vDesFormulaBI"]);
                mfpb.tFormulaActual = Convert.ToString(dt.Rows[0]["tFormulaActual"]);
                mfpb.cCodCalculoActual = Convert.ToString(dt.Rows[0]["cCodCalculoActual"]);
                mfpb.tNota = Convert.ToString(dt.Rows[0]["tNota"]);
            }
            return mfpb;
        }

        public Model.FormulaPlanillaBI recupera_FormulaPlanillaBI_Codigo(string strCodFormulaBI)
        {
            Model.FormulaPlanillaBI mfpb = new Model.FormulaPlanillaBI();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_msto_FormulaBI_Codigo",
                                             strCodFormulaBI
                                            );
            if (dt.Rows.Count > 0)
            {
                mfpb.iIdFormulaBI = Convert.ToInt32(dt.Rows[0]["IIDFormulaBI"]);
                mfpb.cCodTipoCalculo = Convert.ToString(dt.Rows[0]["cCodTipoCalculo"]);
                mfpb.cCodFormulaBI = Convert.ToString(dt.Rows[0]["cCodFormulaBI"]);
                mfpb.vDesFormulaBI = Convert.ToString(dt.Rows[0]["vDesFormulaBI"]);
                mfpb.tFormulaActual = Convert.ToString(dt.Rows[0]["tFormulaActual"]);
                mfpb.cCodCalculoActual = Convert.ToString(dt.Rows[0]["cCodCalculoActual"]);
                mfpb.tNota = Convert.ToString(dt.Rows[0]["tNota"]);
            }
            return mfpb;
        }
        public int graba_FormulaPlanillaBI(Model.FormulaPlanillaBI obj)
        {
            int intIdFormulaBI = obj.iIdFormulaBI;
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_ins_msto_FormulaBI",
                                             obj.cCodTipoCalculo,
                                             obj.cCodFormulaBI,
                                             obj.vDesFormulaBI,
                                             obj.tFormulaActual,
                                             obj.cCodCalculoActual,
                                             obj.tNota
                                            );
            if (dt.Rows.Count > 0)
            {
                intIdFormulaBI = Convert.ToInt32(dt.Rows[0]["iIdFormulaBI"]);
            }
            return intIdFormulaBI;
        }

        public int modifica_FormulaPlanillaBI(Model.FormulaPlanillaBI obj)
        {
            int intIdFormulaBI = obj.iIdFormulaBI;
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_upd_msto_FormulaBI",
                                             obj.iIdFormulaBI,
                                             obj.cCodTipoCalculo,
                                             obj.cCodFormulaBI,
                                             obj.vDesFormulaBI,
                                             obj.tFormulaActual,
                                             obj.cCodCalculoActual,
                                             obj.tNota
                                            );
            if (dt.Rows.Count > 0)
            {
                intIdFormulaBI = Convert.ToInt32(dt.Rows[0]["iIdFormulaBI"]);
            }
            return intIdFormulaBI;
        }
        public Boolean elimina_FormulaPlanillaBI(int intIdFormulaBI)
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                            "RRHH.spp_del_msto_FormulaBI",
                                            intIdFormulaBI
                                         );
            }
            catch (Exception ex)
            {
                blnResult = false;
            }
            return blnResult;
        }
        #endregion

        #region "BoletaCabecera"

        public DataSet reporte_BoletaCabecera(string strAñoProceso,
                                                    string strCodTipoCalculo,
                                                    string strPeriodoProceso,
                                                    string strCodTipoPlanilla,
                                                    string strCodEmpleado,
                                                    bool blnEstado,
                                                    string strCodEmpresa,
                                                    string strCodTipoMoneda
                                                  )
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_rpt_mvto_BoletaCabecera",
                                             strAñoProceso,
                                             strCodTipoCalculo,
                                             strPeriodoProceso,
                                             strCodTipoPlanilla,
                                             strCodEmpleado,
                                             blnEstado,
                                             strCodEmpresa,
                                             strCodTipoMoneda
                                            );
        }

        public DataSet lista_Empleados_Boleta(string strAñoProcesoPlanilla,
                                                string strCodTipoCalculo,
                                                string strPeriodoProcesoPlanilla,
                                                string strCodTipoPlanilla
                                             )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_lst_mvto_BoletaCabecera_Reporte",
                                             strAñoProcesoPlanilla,
                                             strCodTipoCalculo,
                                             strPeriodoProcesoPlanilla,
                                             strCodTipoPlanilla
                                            );
        }

        public DataSet recupera_BoletaCabecera_CalculoPlanilla(string strAñoProceso,
                                                               string strCodTipoCalculo,
                                                               string strPeriodoProceso,
                                                               string strCodTipoPlanilla,
                                                               string strCodEmpleado
                                                           )
        {
            DataSet ds = new DataSet();
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_sel_mvto_BoletaCabecera_CalculoPlanilla",
                                             strAñoProceso,
                                             strCodTipoCalculo,
                                             strPeriodoProceso,
                                             strCodTipoPlanilla,
                                             strCodEmpleado
                                            );
        }
        public int graba_BoletaCabecera(string strAñoProceso,
                                        string strCodTipoCalculo,
                                        string strPeriodoProceso,
                                        string strCodTipoPlanilla,
                                        DateTime datePeriodoInicial,
                                        DateTime datePeriodoFinal
                                     )
        {
            int intIdCabecera = 0;
            DataTable dt = new DataTable();
            SqlHelper.ExecuteDataTable(strConnection,
                                        "RRHH.spp_ins_mvto_BoletaCabecera",
                                        strAñoProceso,
                                        strCodTipoCalculo,
                                        strPeriodoProceso,
                                        strCodTipoPlanilla,
                                        datePeriodoInicial,
                                        datePeriodoFinal
                                      );
            if (dt.Rows.Count > 0)
            {
                intIdCabecera = Convert.ToInt32(dt.Rows[0]["iIdBoletaCabecera"]);
            }
            return intIdCabecera;
        }
        public Model.BoletaCabecera_ParametrosCalculoPlanilla recupera_BoletaCabecera_ParametrosCalculoPlanilla(string strAñoProceso,
                                                                                                                 string strCodTipoCalculo
                                                                                                               )
        {
            Model.BoletaCabecera_ParametrosCalculoPlanilla mbcp = new Model.BoletaCabecera_ParametrosCalculoPlanilla();
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_mvto_BoletaCabecera_ParametrosCalculoPlanilla",
                                             strAñoProceso,
                                             strCodTipoCalculo
                                            );
            if (dt.Rows.Count > 0)
            {
                mbcp.cAñoProceso = Convert.ToString(dt.Rows[0]["cAñoProceso"]);
                mbcp.cPeriodoProceso = Convert.ToString(dt.Rows[0]["cPeriodoProceso"]);
                mbcp.vDesPeriodoProceso = Convert.ToString(dt.Rows[0]["vDesPeriodoProceso"]);
                mbcp.dPeriodoInicial = Convert.ToDateTime(dt.Rows[0]["dPeriodoInicial"]);
                mbcp.dPeriodoFinal = Convert.ToDateTime(dt.Rows[0]["dPeriodoFinal"]);
                mbcp.cCodTipoPlanilla = Convert.ToString(dt.Rows[0]["cCodTipoPlanilla"]);
                mbcp.vDesTipoPlanilla = Convert.ToString(dt.Rows[0]["vDesTipoPlanilla"]);
                mbcp.cCodPeriodicidadRemunerativa = Convert.ToString(dt.Rows[0]["cCodPeriodicidadRemunerativa"]);
            }
            return mbcp;
        }
        #endregion

        #region "BoletaDetalle"
        public int genera_BoletaDetalle_EmpleadosSinMeta(string strAñoProceso,
                                                         string strPeriodoProceso,
                                                         string strCodTipoCalculo,
                                                         string strCodEmpresa
                                                        )

        {
            int intNroEmpleadosSinMeta = 0;
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_clc_mvto_BoletaDetalle_EmpleadoSinMeta",
                                             strAñoProceso,
                                             strPeriodoProceso,
                                             strCodTipoCalculo,
                                             strCodEmpresa
                                            );
            intNroEmpleadosSinMeta = dt.Rows.Count;

            return intNroEmpleadosSinMeta;
        }

        public int genera_BoletaDetalle_EmpleadosSinContrato(string strCodTipoCalculo)
        {
            int intNroEmpleadosSinContrato = 0;
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_clc_mvto_BoletaDetalle_EmpleadoSinContrato",
                                             strCodTipoCalculo
                                            );
            if (dt.Rows.Count > 0)
            {
                intNroEmpleadosSinContrato = Convert.ToInt32(dt.Rows[0]["iRegistros"]);
            }
            return intNroEmpleadosSinContrato;
        }

        #endregion

        #region "ParametroPlanilla"
        public Model.Parametro_Planilla recupera_ParametroPlanilla(string strCodEmpresa)
        {
            Model.Parametro_Planilla mpp = new Model.Parametro_Planilla();
            DataTable dt = new DataTable();
            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "RRHH.spp_sel_ctrl_ParametroPlanilla_Codigo",
                                             strCodEmpresa
                                            );

            if (dt.Rows.Count > 0)
            {
                mpp.iIdParametro = Convert.ToInt32(dt.Rows[0]["IIDParametro"]);
                mpp.cCodEmpresa = Convert.ToString(dt.Rows[0]["cCodEmpresa"]);
                mpp.cRuc = Convert.ToString(dt.Rows[0]["cRuc"]);
                mpp.vRazonSocial = Convert.ToString(dt.Rows[0]["vRazonSocial"]);
                mpp.vCorreoElectronico = Convert.ToString(dt.Rows[0]["vCorreoElectronico"]);
                mpp.cCodTipoVia = Convert.ToString(dt.Rows[0]["cCodTipoVia"]);
                mpp.vNombreVia = Convert.ToString(dt.Rows[0]["vNombreVia"]);
                mpp.cNumeroVia = Convert.ToString(dt.Rows[0]["cNumeroVia"]);
                mpp.cNumeroInterior = Convert.ToString(dt.Rows[0]["cNumeroInterior"]);
                mpp.cCodTipoZona = Convert.ToString(dt.Rows[0]["cCodTipoZona"]);
                mpp.vNombreZona = Convert.ToString(dt.Rows[0]["vNombreZona"]);
                mpp.vReferencia = Convert.ToString(dt.Rows[0]["vReferencia"]);
                mpp.cCodUbigeo = Convert.ToString(dt.Rows[0]["cCodUbigeo"]);
                mpp.cCodConcepto_RetencionJudicial = Convert.ToString(dt.Rows[0]["cCodConcepto_RetencionJudicial"]);
                mpp.cCodConcepto_CuotaSindical = Convert.ToString(dt.Rows[0]["cCodConcepto_CuotaSindical"]);
                mpp.cCodConcepto_HorasExtrasSimples = Convert.ToString(dt.Rows[0]["cCodConcepto_HorasExtrasSimples"]);
                mpp.cCodConcepto_HorasExtrasDobles = Convert.ToString(dt.Rows[0]["cCodConcepto_HorasExtrasDobles"]);
                mpp.cCodConcepto_VacacionesIngreso = Convert.ToString(dt.Rows[0]["cCodConcepto_VacacionesIngreso"]);
                mpp.cCodConcepto_VacacionesDescuento = Convert.ToString(dt.Rows[0]["cCodConcepto_VacacionesDescuento"]);
                mpp.cCodConcepto_GratificacionDescuento = Convert.ToString(dt.Rows[0]["cCodConcepto_GratificacionDescuento"]);
                mpp.cCodConcepto_Faltas = Convert.ToString(dt.Rows[0]["cCodConcepto_Faltas"]);
                mpp.cCodConcepto_Licencias = Convert.ToString(dt.Rows[0]["cCodConcepto_Licencias"]);
                mpp.cCodConcepto_Permisos = Convert.ToString(dt.Rows[0]["cCodConcepto_Permisos"]);
                mpp.cCodConcepto_CantidadHES = Convert.ToString(dt.Rows[0]["cCodConcepto_CantidadHES"]);
                mpp.cCodConcepto_CantidadHED = Convert.ToString(dt.Rows[0]["cCodConcepto_CantidadHED"]);
                mpp.cCodConcepto_CantidadDF = Convert.ToString(dt.Rows[0]["cCodConcepto_CantidadDF"]);
                mpp.cCodConcepto_CantidadF = Convert.ToString(dt.Rows[0]["cCodConcepto_CantidadF"]);
                mpp.cCodConcepto_CantidadL = Convert.ToString(dt.Rows[0]["cCodConcepto_CantidadL"]);
                mpp.cCodConcepto_CantidadP = Convert.ToString(dt.Rows[0]["cCodConcepto_CantidadP"]);
                mpp.cCodConcepto_CantidadT = Convert.ToString(dt.Rows[0]["cCodConcepto_CantidadT"]);
                mpp.cCodConcepto_CantidadDNTI = Convert.ToString(dt.Rows[0]["cCodConcepto_CantidadDNTI"]);
                mpp.bManejaMeta = Convert.ToBoolean(dt.Rows[0]["bManejaMeta"]);
                mpp.cIpServidorCorreo = Convert.ToString(dt.Rows[0]["cIpServidorCorreo"]);
                mpp.vCorreoRRHH = Convert.ToString(dt.Rows[0]["cCorreoRRHH"]);
                mpp.vCorreoTIC = Convert.ToString(dt.Rows[0]["cCorreoTIC"]);
                mpp.cCodConcepto_Grati_NoAfecta5ta_1 = Convert.ToString(dt.Rows[0]["cCodConcepto_Grati_NoAfecta5ta_1"]);
                mpp.cCodConcepto_Grati_NoAfecta5ta_2 = Convert.ToString(dt.Rows[0]["cCodConcepto_Grati_NoAfecta5ta_2"]);
            }
            return mpp;
        }
        #endregion

        #region "PeriodoCalculoPlanilla"
        public Model.PeriodoCalculoPlanilla recupera_PeriodoCalculoPlanilla(string strAñoProceso,
                                                                            string strCodTipoCalculo,
                                                                            string strPeriodoProceso
                                                                           )
        {
            Model.PeriodoCalculoPlanilla mpcp = new Model.PeriodoCalculoPlanilla();
            DataTable dt = new DataTable();
            dt = SqlHelper.ExecuteDataTable(strConnection,
                                           "RRHH.spp_sel_ctrl_PeriodoCalculoPlanilla_proceso",
                                           strAñoProceso,
                                           strCodTipoCalculo,
                                           strPeriodoProceso
                                         );

            if (dt.Rows.Count > 0)
            {
                mpcp.iIdPeriodoCalculo = Convert.ToInt32(dt.Rows[0]["IidPeriodoCalculo"]);
                mpcp.cAñoProceso = Convert.ToString(dt.Rows[0]["cAñoProceso"]);
                mpcp.cCodTipoCalculo = Convert.ToString(dt.Rows[0]["cCodTipoCalculo"]);
                mpcp.cPeriodoProceso = Convert.ToString(dt.Rows[0]["cPeriodoProceso"]);
                mpcp.dPeriodoInicial = Convert.ToDateTime(dt.Rows[0]["dPeriodoInicial"]);
                mpcp.dPeriodoFinal = Convert.ToDateTime(dt.Rows[0]["dPeriodoFinal"]);
                mpcp.iUltimaSemana = Convert.ToInt32(dt.Rows[0]["iUltimaSemana"]);
            }
            return mpcp;
        }
        #endregion

        #region "CalculoPlanilla"

        public bool graba_BoletaDetalle(int intIdBoletaCabecera,
                                                string strCodConcepto,
                                                double dblCantidad,
                                                double dblImporte,
                                                double dblRestoPrestamo,
                                                int intIdPrestamoDetalle,
                                                bool blnEstado,
                                                string strCodMeta
                                            )
        {
            Boolean blnResult = true;
            string strProcedimientoAlmacenado = "RRHH.spp_ins_mvto_BoletaDetalle";

            if (blnEstado == true)
            {
                strProcedimientoAlmacenado = "RRHH.spp_ins_mvto_BoletaDetalle_Duplex";
            }

            try
            {
                SqlHelper.ExecuteNonQuery(strConnection,
                                           strProcedimientoAlmacenado,
                                            intIdBoletaCabecera,
                                            strCodConcepto,
                                            dblCantidad,
                                            dblImporte,
                                            dblRestoPrestamo,
                                            intIdPrestamoDetalle,
                                            strCodMeta
                                         );
            }
            catch (Exception)
            {

                blnResult = false;
            }
            return blnResult;
        }

        public DataSet genera_BoletaDetalle_CalculoPlanilla(string strAñoProceso,
                                                            string strMesProceso,
                                                            string strPeriodoProceso,
                                                            string strCodTipoCalculo,
                                                            string strCodTipoPlanilla,
                                                            string strCodEmpleado,
                                                            bool blnEstado,
                                                            int intIdBoletaCabecera
                                                          )
        {

            return SqlHelper.ExecuteDataset(strConnection,
                                            "RRHH.spp_clc_mvto_BoletaDetalle",
                                            strAñoProceso,
                                            strMesProceso,
                                            strPeriodoProceso,
                                            strCodTipoCalculo,
                                            strCodTipoPlanilla,
                                            strCodEmpleado,
                                            intIdBoletaCabecera,
                                            blnEstado
                                           );
        }
        #endregion

        #region "PeriodoRecursoHumano"

        public DataSet Verificar_PeriodoCalculoPlanilla(string strCodTipoCalculo,
                                                         string strAnoProceso,
                                                         string strPeriodoProceso
                                                       )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_Ver_Ctrl_PeriodoCalculoPlanilla",
                                             strCodTipoCalculo,
                                             strAnoProceso,
                                             strPeriodoProceso
                                            );
        }
        public DataSet combo_AñoProcesoPlanilla()
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_PeriodoProcesoPlanilla_Año"
                                            );
        }

        public DataSet combo_PeriodoProcesoPlanilla(string strAñoProceso,
                                                     string strCodTipoCalculo
                                                    )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_PeriodoProcesoPlanilla_Periodo",
                                             strAñoProceso,
                                             strCodTipoCalculo
                                            );
        }

        #endregion

        #region "ReporteRecursoHumano"

        #endregion

        #region "TipoPlanilla"
        public DataSet combo_TipoPlanilla(string strAñoProcesoPlanilla,
                                           string strCodTipoCalculo,
                                           string strPeriodoProcesoPlanilla
                                         )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "RRHH.spp_cbo_ctrl_PeriodoProcesoPlanilla_TipoPlanilla",
                                             strAñoProcesoPlanilla,
                                             strCodTipoCalculo,
                                             strPeriodoProcesoPlanilla
                                            );
        }
        #endregion

        #region Empleado
        public DataSet Ayuda_Empleado_Jefatura()
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "RRHH.spp_help_msto_Empleado_Jefatura"
                                     );

            return ds;
        }


        public Model.Empleado Recupera_Empleado_Codigo(string strCodEmpleado)
        {
            DataTable dt = new DataTable();
            Model.Empleado obj = new Model.Empleado();

            dt = SqlHelper.ExecuteDataTable(strConnection, "RRHH.spp_sel_msto_Empleado_Codigo", strCodEmpleado);

            if (dt.Rows.Count > 0)
            {

                obj.CCodPersonal = Convert.ToString(dt.Rows[0][0]);
                obj.VApePersonal = Convert.ToString(dt.Rows[0][1]);
                obj.CCodEscalaViaje = Convert.ToString(dt.Rows[0][2]);
                obj.VNomEscalaViaje = Convert.ToString(dt.Rows[0][3]);
                obj.CCodCargo = Convert.ToString(dt.Rows[0][4]);
                obj.VDesCargo = Convert.ToString(dt.Rows[0][5]);
                obj.CDni = Convert.ToString(dt.Rows[0][6]);
                obj.CCodTipoEmpleado = Convert.ToString(dt.Rows[0][7]);
                obj.VDesTipoEmpleado = Convert.ToString(dt.Rows[0][8]);
                obj.CCodCentroCosto = Convert.ToString(dt.Rows[0][9]);
                obj.VNomCentroCosto = Convert.ToString(dt.Rows[0][10]);
                obj.CCodCentroGestor = Convert.ToString(dt.Rows[0][11]);
                obj.VNomCentroGestor = Convert.ToString(dt.Rows[0][12]);
                obj.CCodCentroBeneficio = Convert.ToString(dt.Rows[0][13]);
                obj.VNomCentroBeneficio = Convert.ToString(dt.Rows[0][14]);
                obj.CCodCentro = Convert.ToString(dt.Rows[0][15]);
                obj.VNomCentro = Convert.ToString(dt.Rows[0][16]);
                obj.CCodZona = Convert.ToString(dt.Rows[0][17]);
                obj.VNomzona = Convert.ToString(dt.Rows[0][18]);
                obj.Idigito = Convert.ToInt32(dt.Rows[0]["iDigito"]);
                obj.CCodCentroGestorSuperior = Convert.ToString(dt.Rows[0]["cCodCentroGestorSuperior"]);
                obj.vEmail = Convert.ToString(dt.Rows[0]["CorreoElectronico"]);

            }

            return obj;

        }

        public DataSet Ayuda_Empleado()
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "RRHH.spp_help_msto_Empleado"
                                     );

            return ds;
        }

        public Model.Empleado GetEmpleado(string strCodEmpleado)
        {
            DataTable dt = new DataTable();
            Model.Empleado objMES = new Model.Empleado();

            dt = SqlHelper.ExecuteDataTable(strConnection, "RRHH.spp_sel_Msto_Empleado_Codigo_Smart", strCodEmpleado);

            foreach (DataRow row in dt.Rows)
            {
                objMES = GetEmpDataTableRow_rrhh(row);
            }

            return objMES;
        }

        private Model.Empleado GetEmpDataTableRow_rrhh(DataRow dr)
        {
            Model.Empleado obj = new Model.Empleado();

            obj.CCodPersonal = Convert.ToString(dr[0]);
            obj.VApePersonal = Convert.ToString(dr[1]);
            obj.CCodEscalaViaje = Convert.ToString(dr[2]);
            obj.VNomEscalaViaje = Convert.ToString(dr[3]);
            obj.CCodCargo = Convert.ToString(dr[4]);
            obj.VDesCargo = Convert.ToString(dr[5]);
            obj.CDni = Convert.ToString(dr[6]);
            obj.CCodTipoEmpleado = Convert.ToString(dr[7]);
            obj.VDesTipoEmpleado = Convert.ToString(dr[8]);
            obj.CCodCentroCosto = Convert.ToString(dr[9]);
            obj.VNomCentroCosto = Convert.ToString(dr[10]);
            obj.CCodCentroGestor = Convert.ToString(dr[11]);
            obj.VNomCentroGestor = Convert.ToString(dr[12]);
            obj.CCodCentroBeneficio = Convert.ToString(dr[13]);
            obj.VNomCentroBeneficio = Convert.ToString(dr[14]);
            obj.CCodCentro = Convert.ToString(dr[15]);
            obj.VNomCentro = Convert.ToString(dr[16]);
            obj.CCodZona = Convert.ToString(dr[17]);
            obj.VNomzona = Convert.ToString(dr[18]);
            obj.Idigito = Convert.ToInt32(dr[19]);
            obj.Cpaso = Convert.ToString(dr[20]);

            return (obj);
        }

        public DataSet Lista_Empleado_CentroCosto(string strCodEmpresa)
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "RRHH.spp_lst_msto_Empleado_CentroCosto", strCodEmpresa))
            {
                return ds;
            }
        }

        public DataSet Graba_Empleado_CentroCosto(string strCodEmpresa,
                                                  string strCodEmpleado,
                                                  string strCodCentroCosto
                                                 )
        {
            DataSet ds = new DataSet();
            using (ds = SqlHelper.ExecuteDataset(strConnection, "RRHH.spp_upd_msto_Empleado_CentroCosto", strCodEmpresa, strCodEmpleado, strCodCentroCosto))
            {
                return ds;
            }
        }

        #endregion

        #endregion

        #region TDR
        public DataSet Ayuda_TerminoReferencia_Seguimiento(string strCodCompañia,
                                                   string strAñoProceso,
                                                   string strCodCentroGestor
                                                 )
        {
            DataSet ds = new DataSet();


            ds = SqlHelper.ExecuteDataset(strConnection,
                                          "TDR.spp_help_mvto_TerminoReferencia_Seguimiento",
                                          strCodCompañia,
                                          strAñoProceso,
                                          strCodCentroGestor
                                          );

            return ds;
        }


        public DataSet Ayuda_TerminoReferencia(string strCodCompañia,
                                                string strAñoProceso,
                                                string strCodCentroGestor
                                               )
        {
            DataSet ds = new DataSet();


            ds = SqlHelper.ExecuteDataset(strConnection,
                                          "TDR.spp_help_mvto_BuscaTerminoReferencia",
                                          strCodCompañia,
                                          strCodCentroGestor
                                          );

            return ds;
        }
        public DataSet Ayuda_TerminoReferencia(string strCodCompañia,
                                 string strCodCentroGestor
                               )
        {
            DataSet ds = new DataSet();


            ds = SqlHelper.ExecuteDataset(strConnection,
                                          "TDR.spp_help_mvto_BuscaTerminoReferencia",
                                          strCodCompañia,
                                          strCodCentroGestor
                                          );

            return ds;
        }

        public DataSet Ayuda_TerminoReferencia_SinEtapaCierre(string strCodCompañia,
                         string strCodCentroGestor
                       )
        {
            DataSet ds = new DataSet();


            ds = SqlHelper.ExecuteDataset(strConnection,
                                          "TDR.spp_help_mvto_BuscaTerminoReferencia_SinEtapaCierre",
                                          strCodCompañia,
                                          strCodCentroGestor
                                          );

            return ds;
        }



        public Model.EnvioCorreo Recupera_EnvioCorreo(string strCodCompañia,
                                                        string strCodEmpleado
                                                      )
        {
            Model.EnvioCorreo obj = new Model.EnvioCorreo();
            DataTable dt = new DataTable();
            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "TDR.spp_sel_msto_EnvioCorreo",
                                             strCodCompañia,
                                             strCodEmpleado
                                            );
            if (dt.Rows.Count > 0)
            {
                obj.vNombreEmpleado = Convert.ToString(dt.Rows[0]["vNombreEmpleado"]);
                obj.vCorreoElectronico = Convert.ToString(dt.Rows[0]["vCorreoElectronico"]);
            }
            return obj;
        }

        public Model.EnvioCorreo Recupera_UsuarioCorreo(string strCodCompañia,
                                                        string strEmail
                                                      )
        {
            Model.EnvioCorreo obj = new Model.EnvioCorreo();
            DataTable dt = new DataTable();
            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "TDR.sp_sel_msto_UsuarioCorreo",
                                             strCodCompañia,
                                             strEmail
                                            );
            if (dt.Rows.Count > 0)
            {
                obj.vNombreEmpleado = Convert.ToString(dt.Rows[0]["vNombreEmpleado"]);
                obj.vCorreoElectronico = Convert.ToString(dt.Rows[0]["vCorreoElectronico"]);
            }
            return obj;
        }

        public DataSet Ayuda_Empleado_TDR_Para(string strCodCompañia,
                                               Boolean blnEsInicioDocumento
                                              )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection,
                                          "TDR.spp_help_msto_Empleado_Para",
                                          strCodCompañia,
                                          blnEsInicioDocumento
                                          );
            return ds;
        }

        public DataSet Ayuda_Empleado_TDR_CC(string strCodCompañia,
                                             string strCodEmpleado
                                            )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection,
                                          "TDR.spp_help_msto_Empleado_CC",
                                          strCodCompañia,
                                          strCodEmpleado
                                          );
            return ds;
        }

        public string Graba_TerminoRefrencia(Model.TerminoReferencia obj,
                                                                Boolean blnEsCreadoEnGestion
                                                              )
        {
            string strNumDocumento = "";
            DataTable dt = new DataTable();
            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "TDR.spp_ins_mvto_TerminoReferencia_Creacion",
                                                obj.cAñoProceso,
                                                obj.cCodCeGe,
                                                obj.EmpleadoID_Emisor,
                                                obj.tTitulo,
                                                obj.vAdjunto,
                                                obj.cTipoMovimiento,
                                                obj.vPara,
                                                obj.vCC,
                                                obj.tMensaje,
                                                blnEsCreadoEnGestion
                                            );
            if (dt.Rows.Count > 0)
            {
                strNumDocumento = Convert.ToString(dt.Rows[0]["cNumDocumento"]);
            }

            return strNumDocumento;
        }

        public string Graba_TerminoRefrencia_CreadoEnGestion(Model.TerminoReferencia obj)
        {
            string strNumDocumento = "";
            DataTable dt = new DataTable();
            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "TDR.spp_ins_mvto_TerminoReferencia_CreadoEnGestion",
                                                obj.cAñoProceso,
                                                obj.cCodCeGe,
                                                obj.EmpleadoID_Emisor,
                                                obj.tTitulo,
                                                obj.vAdjunto,
                                                obj.cTipoMovimiento,
                                                obj.vPara,
                                                obj.vCC,
                                                obj.tMensaje
                                            );
            if (dt.Rows.Count > 0)
            {
                strNumDocumento = Convert.ToString(dt.Rows[0]["cNumDocumento"]);
            }

            return strNumDocumento;
        }

        public string Recupera_VersionDocumento(string strCodCompañia,
                                                string strAñoProceso,
                                                string strTerminoReferencia
                                                      )
        {
            string strVersion = "";
            DataTable dt = new DataTable();
            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "TDR.spp_sel_mvto_TerminoReferencia_Version",
                                                strCodCompañia,
                                                strAñoProceso,
                                                strTerminoReferencia
                                            );
            if (dt.Rows.Count > 0)
            {
                strVersion = Convert.ToString(dt.Rows[0]["cVersion"]);
            }

            return strVersion;
        }


        public string Graba_TerminoRefrencia_IdaVuelta(Model.TerminoReferencia obj)
        {
            string strNumDocumento = "";
            DataTable dt = new DataTable();
            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "TDR.spp_ins_mvto_TerminoReferencia_Creacion_IdaVuelta",
                                                obj.iIdTerminoReferencia,
                                                obj.cAñoProceso,
                                                obj.cCodCeGe,
                                                obj.EmpleadoID_Emisor,
                                                obj.cNumDocumento,
                                                obj.tTitulo,
                                                obj.vAdjunto,
                                                obj.cTipoMovimiento,
                                                obj.vPara,
                                                obj.vCC,
                                                obj.tMensaje,
                                                obj.cCodEtapaCierre
                                            );
            if (dt.Rows.Count > 0)
            {
                strNumDocumento = Convert.ToString(dt.Rows[0]["cNumDocumento"]);
            }

            return strNumDocumento;
        }

        public string Graba_TerminoRefrencia_AutorizaRequerimiento(Model.TerminoReferencia obj)
        {
            string strNumDocumento = "";
            DataTable dt = new DataTable();
            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "TDR.spp_ins_mvto_TerminoReferencia_Creacion_AutorizaRequerimiento",
                                                obj.iIdTerminoReferencia,
                                                obj.cAñoProceso,
                                                obj.cCodCeGe,
                                                obj.EmpleadoID_Emisor,
                                                obj.cNumDocumento,
                                                obj.tTitulo,
                                                obj.vAdjunto,
                                                obj.cTipoMovimiento,
                                                obj.vPara,
                                                obj.vCC,
                                                obj.tMensaje,
                                                obj.cCodEtapaCierre
                                            );
            if (dt.Rows.Count > 0)
            {
                strNumDocumento = Convert.ToString(dt.Rows[0]["cNumDocumento"]);
            }

            return strNumDocumento;
        }
        public DataSet Lista_TerminoRefrencia_IdaVuelta(string strCodCompañia,
                                                         string strCodEmpleado,
                                                         string strCodTipoMovimiento,
                                                         string strCodEstado
                                                       )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "TDR.spp_lst_mvto_TerminoReferencia_IdaVuelta",
                                             strCodCompañia,
                                             strCodEmpleado,
                                             strCodTipoMovimiento,
                                             strCodEstado
                                           );
        }

        public DataSet Lista_TerminoRefrencia_Seguimiento(string strCodCompañia,
                                                          string strNumDocumento
                                                       )
        {
            return SqlHelper.ExecuteDataset(strConnection,
                                             "TDR.spp_lst_mvto_TerminoReferencia_Seguimiento",
                                             strCodCompañia,
                                             strNumDocumento
                                           );
        }

        public Boolean Graba_TerminoRefrencia_Anulacion(string strCodCompañia,
                                                          string strNumDocumento
                                                       )
        {
            SqlHelper.ExecuteNonQuery(strConnection,
                                             "TDR.spp_lst_mvto_TerminoReferencia_AnulaDocumento",
                                             strCodCompañia,
                                             strNumDocumento
                                           );
            return true;
        }

        public Model.TerminoReferencia Recupera_TerminoReferencia(string strCodCompañia,
                                                                    string strNumAdjunto
                                                                 )
        {
            Model.TerminoReferencia obj = new Model.TerminoReferencia();
            DataTable dt = new DataTable();
            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "TDR.spp_sel_mvto_TerminoReferencia",
                                             strCodCompañia,
                                             strNumAdjunto
                                           );
            if (dt.Rows.Count > 0)
            {
                obj.vAdjunto = Convert.ToString(dt.Rows[0]["vAdjunto"]);
            }
            return obj;
        }

        public string Recupera_TerminoReferencia_Adjunto(string strCodCompañia,
                                                                    string strNumAdjunto
                                                                 )
        {
            string strAdjunto = "";
            DataTable dt = new DataTable();
            dt = SqlHelper.ExecuteDataTable(strConnection,
                                             "TDR.spp_sel_mvto_TerminoReferencia_Adjunto",
                                             strCodCompañia,
                                             strNumAdjunto
                                           );
            if (dt.Rows.Count > 0)
            {
                strAdjunto = Convert.ToString(dt.Rows[0]["vAdjunto"]);
            }
            return strAdjunto;
        }

        public int Graba_ProcesoAdquisicion(Model.ProcesoAdquisicion obj)
        {

            int intIdProcesoAdquisicion = 0;

            DataTable dt = new DataTable();

            

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Logistica.spp_ins_msto_ProcesoAdquisicion",
                                            obj.cCodEmpresa,
                                            obj.cAñoProceso,
                                            obj.cCodProcesoAdquisicion,
                                            obj.cNumProcedimiento,
                                            obj.cCodTipoProceso,
                                            obj.cCodObjetoContratacion,
                                            obj.tDesContratacion,
                                            obj.tObjetivo,
                                            obj.cCodTipoAdquisicion,
                                            obj.cCodModalidadSeleccion,
                                            obj.cCodEntidadEncargadaConvocante,
                                            obj.dFechaPrevista
                                         );

                intIdProcesoAdquisicion = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdProcesoAdquisicion = 0;
            }

            return intIdProcesoAdquisicion;
        }

        public int Modifica_ProcesoAdquisicion(Model.ProcesoAdquisicion obj)
        {

            int intIdProcesoAdquisicion = obj.iIdProcesoAdquisicion;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_msto_ProcesoAdquisicion",
                                            obj.iIdProcesoAdquisicion,
                                            obj.cCodEmpresa,
                                            obj.cAñoProceso,
                                            obj.cCodProcesoAdquisicion,
                                            obj.cNumProcedimiento,
                                            obj.cCodTipoProceso,
                                            obj.cCodObjetoContratacion,
                                            obj.tDesContratacion,
                                            obj.tObjetivo,
                                            obj.cCodTipoAdquisicion,
                                            obj.cCodModalidadSeleccion,
                                            obj.cCodEntidadEncargadaConvocante,
                                            obj.dFechaPrevista
                                         );

            }
            catch (Exception e)
            {
                e.ToString();
                intIdProcesoAdquisicion = 0;
            }

            return intIdProcesoAdquisicion;
        }

        public bool Elimina_ProcesoAdquisicion(int intIdProcesoAduisicion)
        {

            bool blnResult = true;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_del_msto_ProcesoAdquisicion",
                                            intIdProcesoAduisicion
                                         );

            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public Model.xmlDATA recupera_xmlData(string xmlCodigo )
        {
            DataTable dt;

            dt = SqlHelper.ExecuteDataset(strConnection,
                                                "Formulacion.spp_sel_mvto_Dashboard_xml",
                                                 xmlCodigo
                                                ).Tables[0];


            var xml = (from order in dt.AsEnumerable()
                         select new Model.xmlDATA
                         {
                             iIdXML = order.Field<int>("iIdXml"),
                             xmlCodigo = order.Field<string>("xmlCodigo"),
                             xmlDescripcion = order.Field<string>("xmlDescripcion"),
                             xmlData = order.Field<string>("xmlData"),
                             xmlActualizado = order.Field<string>("xmlActualizado")
                         }
                        ).FirstOrDefault();

            return xml;
        }

        public Model.xmlDATA recupera_xmlData_Logistica(string xmlCodigo)
        {
            DataTable dt;

            dt = SqlHelper.ExecuteDataset(strConnection,
                                                "Logistica.spp_sel_mvto_Dashboard_xml",
                                                 xmlCodigo
                                                ).Tables[0];


            var xml = (from order in dt.AsEnumerable()
                       select new Model.xmlDATA
                       {
                           iIdXML = order.Field<int>("iIdXml"),
                           xmlCodigo = order.Field<string>("xmlCodigo"),
                           xmlDescripcion = order.Field<string>("xmlDescripcion"),
                           xmlData = order.Field<string>("xmlData"),
                           xmlActualizado = order.Field<string>("xmlActualizado")
                       }
                        ).FirstOrDefault();

            return xml;
        }

        public int graba_xmlData(Model.xmlDATA obj)
        {

            int intIdXml = 0;

            DataTable dt = new DataTable();



            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Formulacion.spp_ins_mvto_Dashboard_xml",
                                            obj.xmlCodigo,
                                            obj.xmlDescripcion,
                                            obj.xmlData,
                                            obj.xmlActualizado
                                         );

                intIdXml = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdXml = 0;
            }

            return intIdXml;
        }

        public int modifica_xmlData(Model.xmlDATA obj)
        {

            int intIdXml = obj.iIdXML;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_upd_mvto_Dashboard_xml",
                                            obj.iIdXML,
                                            obj.xmlCodigo,
                                            obj.xmlDescripcion,
                                            obj.xmlData,
                                            obj.xmlActualizado
                                         );

            }
            catch (Exception e)
            {
                e.ToString();
                intIdXml = 0;
            }

            return intIdXml;
        }

        public int modifica_xmlData_Logistica(Model.xmlDATA obj)
        {

            int intIdXml = obj.iIdXML;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Logistica.spp_upd_mvto_Dashboard_xml",
                                            obj.iIdXML,
                                            obj.xmlCodigo,
                                            obj.xmlDescripcion,
                                            obj.xmlData,
                                            obj.xmlActualizado
                                         );

            }
            catch (Exception e)
            {
                e.ToString();
                intIdXml = 0;
            }

            return intIdXml;
        }

        public bool elimina_xmlData(int intIdXml)
        {

            bool blnResult = true;

            try
            {

                SqlHelper.ExecuteNonQuery(strConnection,
                                          "Formulacion.spp_del_mvto_Dashboard_xml",
                                            intIdXml
                                         );

            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet lista_xmlData()
        {

            return SqlHelper.ExecuteDataset (strConnection,
                                          "Formulacion.spp_lst_mvto_Dashboard_xml"
                                         );

        }


        #endregion

        #region TRAMITE
        #region DocumentoTramite
        public int Recupera_Version(string strNumDocumento)
        {
            int intVersion = 0;
            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "TramiteDocumentario.spp_sel_mvto_NuevaVersion",
                                          strNumDocumento
                                         );

            intVersion = Convert.ToInt32(dt.Rows[0][0].ToString());

            return intVersion;

        }

        public int GrabaDocumentoTramite(Model.DocumentoTramite objDocumentoTramite)
        {



            int intIdDocumento;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "TramiteDocumentario.spp_ins_mvto_DocumentoTramite",
                                            objDocumentoTramite.iTipoTramite,
                                            objDocumentoTramite.iTipoDocumento,
                                            objDocumentoTramite.cNumDocumento,
                                            objDocumentoTramite.dFecDocumento,
                                            objDocumentoTramite.tAsunto,
                                            objDocumentoTramite.tReferencia,
                                            objDocumentoTramite.tMensaje,
                                            objDocumentoTramite.iCodTipoSeguimiento,
                                            objDocumentoTramite.iCodImportancia,
                                            objDocumentoTramite.cCodContacto,
                                            objDocumentoTramite.cCodUsuario,
                                            objDocumentoTramite.cCodCeges,
                                            objDocumentoTramite.iIdDocumento
                                         );

                intIdDocumento = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdDocumento = 0;
            }

            return intIdDocumento;
        }
        #endregion

        #region DocumentoTramite_Adjunto
        public int GrabaDocumentoTramite_Adjunto(Model.DocumentoTramite_Adjunto objDocumentoTramite_Adjunto)
        {

            int intIdDocumento_Adjunto;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "TramiteDocumentario.spp_ins_mvto_DocumentoTramite_Adjunto",
                                            objDocumentoTramite_Adjunto.iIdDetalle,
                                            objDocumentoTramite_Adjunto.iIdDocumento,
                                            objDocumentoTramite_Adjunto.vNombreArchivo,
                                            objDocumentoTramite_Adjunto.vArchivo,
                                            objDocumentoTramite_Adjunto.vGuid,
                                            objDocumentoTramite_Adjunto.iVersion,
                                            objDocumentoTramite_Adjunto.dFechaGrabacion,
                                            objDocumentoTramite_Adjunto.iTamañoArchivo,
                                            objDocumentoTramite_Adjunto.cTipoDatoArchivo
                                         );

                intIdDocumento_Adjunto = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch
            {
                intIdDocumento_Adjunto = 0;
            }

            return intIdDocumento_Adjunto;
        }


        public DataSet Lista_TDR_Aprobar(string strAñoProceso,
                                      string strCodCentroGestor
                                    )
        {



            return SqlHelper.ExecuteDataset(strConnection,
                                        "TramiteDocumentario.spp_lst_mvto_DocumentoTramite_Adjunto_Aprobacion",
                                        strAñoProceso,
                                        strCodCentroGestor
                                     );
        }

        #endregion

        #region DocumentoTramite_Contacto
        public int grabaDocumentoTramite_Contacto(Model.DocumentoTramite_Contacto objDocumentoTramite_Contacto)
        {

            int intIdDocumento_Contacto;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "TramiteDocumentario.spp_ins_mvto_DocumentoTramite_Contacto",
                                            objDocumentoTramite_Contacto.iIdDetalle,
                                            objDocumentoTramite_Contacto.iIdDocumento,
                                            objDocumentoTramite_Contacto.cCodContacto,
                                            objDocumentoTramite_Contacto.vCorreoElectronico
                                         );

                intIdDocumento_Contacto = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch
            {
                intIdDocumento_Contacto = 0;
            }

            return intIdDocumento_Contacto;
        }

        #endregion

        #region DocumentoTramite_ContactoCC
        public int grabaDocumentoTramite_ContactoCC(Model.DocumentoTramite_ContactoCC objDocumentoTramite_Contacto)
        {

            int intIdDocumento_Contacto;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "TramiteDocumentario.spp_ins_mvto_DocumentoTramite_ContactoCC",
                                            objDocumentoTramite_Contacto.iIdDetalle,
                                            objDocumentoTramite_Contacto.iIdDocumento,
                                            objDocumentoTramite_Contacto.cCodContacto,
                                            objDocumentoTramite_Contacto.vCorreoElectronico
                                         );

                intIdDocumento_Contacto = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch
            {
                intIdDocumento_Contacto = 0;
            }

            return intIdDocumento_Contacto;
        }

        #endregion

        #region DocumentoTramite_Detalle
        public DataSet recuperaDocumentoTramite_Detalle_Documento(long intIdDocumentoDetalle)
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection,
                                            "TramiteDocumentario.spp_sel_mvto_DocumentoTramite_Detalle_Documento",
                                            intIdDocumentoDetalle
                                          );
            return ds;
        }

        public DataSet listaDocumentoTramite_Detalle_Seguimiento(long intIdDocumentoDetalle)
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection,
                                            "TramiteDocumentario.spp_lst_mvto_DocumentoTramite_Detalle_Seguimiento",
                                            intIdDocumentoDetalle
                                          );
            return ds;
        }
        public DataSet listaDocumentoTramite_Detalle_Leidos(long intIdDocumentoDetalle)
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection,
                                            "TramiteDocumentario.spp_lst_mvto_DocumentoTramite_Detalle_Leidos",
                                            intIdDocumentoDetalle
                                          );
            return ds;
        }

        public DataSet listaDocumentoTramite_Detalle_Adjuntos(long intIdDocumentoDetalle)
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection,
                                            "TramiteDocumentario.spp_sel_mvto_DocumentoTramite_Detalle_Adjuntos",
                                            intIdDocumentoDetalle
                                          );
            return ds;
        }
        public int grabaDocumentoTramite_Detalle(Model.DocumentoTramite_Detalle objDocumentoTramite_Detalle)
        {



            int intIdDocumento_Detalle;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "TramiteDocumentario.spp_ins_mvto_DocumentoTramite_Detalle",
                                            objDocumentoTramite_Detalle.iIdDocumento_Detalle,
                                            objDocumentoTramite_Detalle.iIdDocumento,
                                            objDocumentoTramite_Detalle.iIdDetalle,
                                            objDocumentoTramite_Detalle.iTipoMovimiento,
                                            objDocumentoTramite_Detalle.dFecDetalle,
                                            objDocumentoTramite_Detalle.cCodEmisor,
                                            objDocumentoTramite_Detalle.cCodReceptor,
                                            objDocumentoTramite_Detalle.iCodEstado,
                                            objDocumentoTramite_Detalle.bActivo,
                                            objDocumentoTramite_Detalle.bLeido,
                                            objDocumentoTramite_Detalle.bAdjunto,
                                            objDocumentoTramite_Detalle.bSeguimiento,
                                            objDocumentoTramite_Detalle.iTipoContacto
                                         );

                intIdDocumento_Detalle = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch
            {
                intIdDocumento_Detalle = 0;
            }

            return intIdDocumento_Detalle;
        }

        public DataSet listaDocumentoTramite_Detalle(string strCodContacto, int intTipoMovimiento)
        {




            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                        "TramiteDocumentario.spp_lst_mvto_DocumentoTramite_Detalle",
                                        strCodContacto,
                                        intTipoMovimiento
                                     );


            return ds;
        }

        #endregion

        #region DocumentoTramite_Entidad
        public int grabaDocumentoTramite_Entidad(Model.DocumentoTramite_Entidad objDocumentoTramite_Entidad)
        {

            int intIdDocumento_Entidad;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                           "TramiteDocumentario.spp_ins_mvto_DocumentoTramite_Entidad",
                                            objDocumentoTramite_Entidad.iIdDocumento,
                                            objDocumentoTramite_Entidad.iTipoDocumentoIdentidad,
                                            objDocumentoTramite_Entidad.cCodEntidad,
                                            objDocumentoTramite_Entidad.vDesEntidad,
                                            objDocumentoTramite_Entidad.iTipoDocumento,
                                            objDocumentoTramite_Entidad.cNumDocumento,
                                            objDocumentoTramite_Entidad.dFecDocumento
                                         );

                intIdDocumento_Entidad = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch
            {
                intIdDocumento_Entidad = 0;
            }

            return intIdDocumento_Entidad;
        }

        #endregion

        #region DocumentoTramite_Proveido
        public int grabaDocumentoTramite_Proveido(Model.DocumentoTramite_Proveido objDocumentoTramite_Proveido)
        {

            int intIdDocumento_Proveido;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "TramiteDocumentario.spp_ins_mvto_DocumentoTramite_Proveido",
                                            objDocumentoTramite_Proveido.iIdDetalle,
                                            objDocumentoTramite_Proveido.iIdDocumento,
                                            objDocumentoTramite_Proveido.cCodContacto,
                                            objDocumentoTramite_Proveido.iCodTipoProveido,
                                            objDocumentoTramite_Proveido.tNota
                                         );

                intIdDocumento_Proveido = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch
            {
                intIdDocumento_Proveido = 0;
            }

            return intIdDocumento_Proveido;
        }

        #endregion

        #region DocumentoTramite_Seguimiento
        public int grabaDocumentoTramite_Seguimiento(Model.DocumentoTramite_Seguimiento objDocumentoTramite_Seguimiento)
        {

            int intIdDocumento_Seguimiento;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                            "TramiteDocumentario.spp_ins_mvto_DocumentoTramite_Seguimiento",
                                            objDocumentoTramite_Seguimiento.iIdDocumento,
                                            objDocumentoTramite_Seguimiento.iCodTipoSeguimiento,
                                            objDocumentoTramite_Seguimiento.dFecha,
                                            objDocumentoTramite_Seguimiento.cHora,
                                            objDocumentoTramite_Seguimiento.iDiasAlerta
                                         );

                intIdDocumento_Seguimiento = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch
            {
                intIdDocumento_Seguimiento = 0;
            }

            return intIdDocumento_Seguimiento;
        }

        #endregion

        #region TipoProveidoDocumento
        public Model.TipoProveidoDocumento Recupera_TipoProveidoDocumento(int intIdTipoProveido)
        {
            DataTable dt = new DataTable();
            Model.TipoProveidoDocumento obj = new Model.TipoProveidoDocumento();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_TipoProveidoDocumento", intIdTipoProveido);

            if (dt.Rows.Count > 0)
            {
                obj.iIdTipoProveido = Convert.ToInt32(dt.Rows[0][0]);
                obj.iCodTipoProveido = Convert.ToInt32(dt.Rows[0][1]);
                obj.vDesTipoProveido = dt.Rows[0][2].ToString();
                obj.bEnviarRespuesta = Convert.ToBoolean(dt.Rows[0][3]);
            }

            return obj;

        }

        public Model.TipoProveidoDocumento Recupera_TipoProveidoDocumento_Descripcion(string strDesTipoProveido)
        {
            DataTable dt = new DataTable();
            Model.TipoProveidoDocumento obj = new Model.TipoProveidoDocumento();

            dt = SqlHelper.ExecuteDataTable(strConnection, "General.spp_sel_ctrl_TipoProveidoDocumento_Descripcion", strDesTipoProveido);

            if (dt.Rows.Count > 0)
            {
                obj.iIdTipoProveido = Convert.ToInt32(dt.Rows[0][0]);
                obj.iCodTipoProveido = Convert.ToInt32(dt.Rows[0][1]);
                obj.vDesTipoProveido = dt.Rows[0][2].ToString();
                obj.bEnviarRespuesta = Convert.ToBoolean(dt.Rows[0][3]);
            }

            return obj;

        }

        public int GrabaTipoProveidoDocumento(Model.TipoProveidoDocumento objTipoProveido)
        {



            int intIdTipoProveido;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "General.spp_ins_ctrl_TipoProveidoDocumento",
                                            objTipoProveido.iCodTipoProveido,
                                            objTipoProveido.vDesTipoProveido,
                                            objTipoProveido.bEnviarRespuesta
                                         );

                intIdTipoProveido = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdTipoProveido = 0;
            }

            return intIdTipoProveido;
        }

        public int ModificaTipoProveidoDocumento(Model.TipoProveidoDocumento objTipoProveido)
        {



            int intIdTipoProveido;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "General.spp_upd_ctrl_TipoProveidoDocumento",
                                            objTipoProveido.iIdTipoProveido,
                                            objTipoProveido.iCodTipoProveido,
                                            objTipoProveido.vDesTipoProveido,
                                            objTipoProveido.bEnviarRespuesta
                                         );

                intIdTipoProveido = objTipoProveido.iIdTipoProveido;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdTipoProveido = 0;
            }

            return intIdTipoProveido;
        }

        public bool EliminarTipoProveidoDocumento(int intIdTipoProveido)
        {



            bool blnResult;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "General.spp_del_ctrl_TipoProveidoDocumento",
                                            intIdTipoProveido
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet ListaTipoProveidoDocumento()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "General.spp_lst_ctrl_TipoProveidoDocumento"
                                     );

            return ds;
        }

        public DataSet ComboTipoProveidoDocumento()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "General.spp_cbo_ctrl_TipoProveidoDocumento"
                                     );

            return ds;
        }

        #endregion

        #region ParametroTramite
        public Model.ParametroTramite Recupera_ParametroTramite(string strCodParametroTramite)
        {
            DataTable dt = new DataTable();
            Model.ParametroTramite obj = new Model.ParametroTramite();

            dt = SqlHelper.ExecuteDataTable(strConnection, "TramiteDocumentario.spp_sel_cnfg_ParametroTramite", strCodParametroTramite);

            if (dt.Rows.Count > 0)
            {
                obj.iIdParametroTramite = Convert.ToInt32(dt.Rows[0][0].ToString());
                obj.cCodParametroTramite = dt.Rows[0][1].ToString();
                obj.vDesParametroTramite = dt.Rows[0][2].ToString();
                obj.vValParametroTramite = dt.Rows[0][3].ToString();
            }

            return obj;

        }

        #endregion

        #region Contacto
        public System.Data.DataSet Ayuda_msto_Contacto_DataTable(string strTexto)
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection, "TramiteDocumentario.spp_help_msto_Contacto", strTexto);

            return ds;

        }

        public System.Data.DataSet Ayuda_msto_Preferido_DataTable(string strCodEmpleado)
        {
            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection, "TramiteDocumentario.spp_help_msto_Preferido", strCodEmpleado);

            return ds;

        }

        public Model.Contacto Recupera_msto_Contacto(string strCodContacto)
        {
            DataTable dt = new DataTable();
            Model.Contacto obj = new Model.Contacto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "TramiteDocumentario.spp_sel_msto_Contacto", strCodContacto);

            if (dt.Rows.Count == 0)
            {
                obj.cCodContacto = "";
                obj.vApeContacto = "";
                obj.cCodCeGes = "";
                obj.vDesCeges = "";
                obj.vCorreo = "";
            }
            else
            {
                obj.cCodContacto = dt.Rows[0][0].ToString();
                obj.vApeContacto = dt.Rows[0][1].ToString();
                obj.cCodCeGes = dt.Rows[0][2].ToString();
                obj.vDesCeges = dt.Rows[0][3].ToString();
                obj.vCorreo = dt.Rows[0][4].ToString();
            }

            return obj;

        }

        public List<Model.Contacto> Ayuda_msto_Contacto(string strTexto)
        {
            DataTable dt = new DataTable();
            Model.Contacto obj = new Model.Contacto();
            List<Model.Contacto> objList = new List<Model.Contacto>();

            dt = SqlHelper.ExecuteDataTable(strConnection, "TramiteDocumentario.spp_help_Contacto", strTexto);

            if (dt.Rows.Count > 0)
            {
                foreach (DataRow row in dt.Rows)

                {
                    obj.cCodContacto = row[0].ToString();
                    obj.vApeContacto = row[1].ToString();
                    obj.vDesCeges = row[2].ToString();

                    objList.Add(obj);
                }
            }

            return objList;

        }

        #endregion

        #endregion

        #region VIATICO
        #region ParametroViatico
        public Model.ParametroViatico Recupera_ctrl_ParametroViatico(string strCodParametroViatico)
        {
            DataTable dt = new DataTable();
            Model.ParametroViatico obj = new Model.ParametroViatico();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Viatico.spp_sel_ctrl_ParametroViatico", strCodParametroViatico);

            if (dt.Rows.Count > 0)
            {
                obj.iIdParametro = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodParametro = Convert.ToString(dt.Rows[0][1]);
                obj.vDesParametro = Convert.ToString(dt.Rows[0][2]);
                obj.vValParametro = Convert.ToString(dt.Rows[0][3]);

            }

            return obj;

        }

        #endregion

        #region SolicitudViatico

        public DataSet ayuda_Solicitud_Requerimiento(string strCodEmpresa)
        {
            return SqlHelper.ExecuteDataset( strConnection,
                                             "Viatico.spp_help_mvto_SolicitudViatico_Requerimiento",
                                             strCodEmpresa
                                            );
        }
        public Boolean Formato_SolicitudViatico_DescarteFirma(string strCodSolicitud,
                                                    string strCodMotivoDescarte,
                                                    DateTime dateFecDescarte,
                                                    string strMotivoDescarte
                                                  )
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Viatico.spp_ins_mvto_SolicitudViatico_DescarteFirma", strCodSolicitud,
                                                                                                             strCodMotivoDescarte,
                                                                                                             dateFecDescarte,
                                                                                                             strMotivoDescarte
                                                                                           );
            }
            catch (Exception)
            {

                blnResult = false;
            }

            return blnResult;
        }

        public Boolean Formato_SolicitudViatico_Firma(string strCodCentro_Gestor,
                                            string strPaso,
                                            string strCodSolicitud,
                                            string strCodEmpleado
                                           )
        {
            Boolean blnResult = true;
            try
            {
                SqlHelper.ExecuteNonQuery(strConnection, "Viatico.spp_ins_mvto_SolicitudViatico_Firma", strCodCentro_Gestor,
                                                                                                   strPaso,
                                                                                                   strCodSolicitud,
                                                                                                   strCodEmpleado
                                                                                           );
            }
            catch (Exception)
            {

                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Formato_SolicitudViatico(string strCodSolicitud)
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Viatico.spp_lst_mvto_SolicitudViatico_Solicitud", strCodSolicitud
                                                                                                                 );
            return ds;
        }

        public DataSet Formato_Solicitudviatico_Estado( string strCodCentro_Gestor,
                                                        string strEstado,
                                                        string strCodEmpleado,
                                                        string strCodPaso
                                                      )
        {
            DataSet ds = new DataSet();
            ds = SqlHelper.ExecuteDataset(strConnection, "Viatico.spp_lst_mvto_SolicitudViatico_CentroCosto_Gestor", strCodCentro_Gestor,
                                                                                                                          strEstado,
                                                                                                                          strCodEmpleado,
                                                                                                                          strCodPaso
                                                                                                                 );
            return ds;
        }

        public Model.SolicitudViatico Recupera_SolicitudViatico(string strCodSolicitud)
        {
            DataTable dt = new DataTable();
            Model.SolicitudViatico obj = new Model.SolicitudViatico();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Viatico.spp_sel_mvto_SolicitudViatico", strCodSolicitud);

            if (dt.Rows.Count > 0)
            {
                obj.iIdSolicitud = Convert.ToInt32(dt.Rows[0]["iIdSolicitud"]);
                obj.cCodTipoSolicitud = Convert.ToString(dt.Rows[0]["cCodTipoSolicitud"]);
                obj.cCodCeGe = Convert.ToString(dt.Rows[0]["cCodCeGe"]);
                obj.vNomCeGe = Convert.ToString(dt.Rows[0]["vNomCeGe"]);
                obj.cCodSolicitud = Convert.ToString(dt.Rows[0]["cCodSolicitud"]);
                obj.cCodSolicitud_Ampliacion = Convert.ToString(dt.Rows[0]["cCodSolicitud_Ampliacion"]);
                obj.cCodPersonal = Convert.ToString(dt.Rows[0]["cCodPersonal"]);
                obj.vApeEmpleado = Convert.ToString(dt.Rows[0]["vApeEmpleado"]);
                obj.LineaSolicitud = Convert.ToString(dt.Rows[0]["LineaSolicitud"]);
                obj.vApeLocadorServicio = Convert.ToString(dt.Rows[0]["vApeLocadorServicio"]);
                obj.cCodUbigeo = Convert.ToString(dt.Rows[0]["cCodUbigeo"]);
                obj.vNomUbigeo = Convert.ToString(dt.Rows[0]["vNomUbigeo"]);
                obj.dFechaPartida = Convert.ToDateTime(dt.Rows[0]["dFechaPartida"]);
                obj.dFechaRetorno = Convert.ToDateTime(dt.Rows[0]["dFechaRetorno"]);
                obj.cHoraCompraPasaje_01 = Convert.ToString(dt.Rows[0]["cHoraCompraPasaje_01"]);
                obj.cHoraCompraPasaje_02 = Convert.ToString(dt.Rows[0]["cHoraCompraPasaje_02"]);
                obj.fCantidadDias = Convert.ToInt32(dt.Rows[0]["fCantidadDias"]);
                obj.tMotivoViaje = Convert.ToString(dt.Rows[0]["tMotivoViaje"]);
                obj.cCodFormulacion = Convert.ToString(dt.Rows[0]["cCodFormulacion"]);
                obj.cNumRequerimiento = Convert.ToString(dt.Rows[0]["cNumRequerimiento"]);
                obj.cCodEmpleado = Convert.ToString(dt.Rows[0]["cCodEmpleado"]);
            }

            return obj;

        }

        public Model.SolicitudViatico Recupera_SolicitudViatico_y_LiquidacionViatico(string strCodSolicitud)
        {
            DataTable dt = new DataTable();
            Model.SolicitudViatico obj = new Model.SolicitudViatico();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Viatico.spp_sel_mvto_SolicitudViatico_y_LiquidacionViatico", strCodSolicitud);

            if (dt.Rows.Count > 0)
            {
                obj.cCodTipoSolicitud = Convert.ToString(dt.Rows[0][0]);
                obj.cCodSolicitud = Convert.ToString(dt.Rows[0][1]);
                obj.cCodSolicitud_Ampliacion = Convert.ToString(dt.Rows[0][2]);
                obj.cCodPersonal = Convert.ToString(dt.Rows[0][3]);
                obj.vApeLocadorServicio = Convert.ToString(dt.Rows[0][4]);
                obj.cCodUbigeo = Convert.ToString(dt.Rows[0][5]);
                obj.vNomUbigeo = Convert.ToString(dt.Rows[0][6]);
                obj.dFechaPartida = Convert.ToDateTime(dt.Rows[0][7]);
                obj.dFechaRetorno = Convert.ToDateTime(dt.Rows[0][8]);
                obj.cHoraCompraPasaje_01 = Convert.ToString(dt.Rows[0][9]);
                obj.cHoraCompraPasaje_02 = Convert.ToString(dt.Rows[0][10]);
                obj.fCantidadDias = Convert.ToDouble(dt.Rows[0][11]);
                obj.tMotivoViaje = Convert.ToString(dt.Rows[0][12]);

            }


            return obj;

        }

        public Model.SolicitudViatico Graba_SolicitudViatico(Model.SolicitudViatico objSolicitudViatico)
        {

            Model.SolicitudViatico MSV = new Model.SolicitudViatico();
            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_ins_mvto_SolicitudViatico",
                                            objSolicitudViatico.cCodTipoSolicitud,
                                            objSolicitudViatico.cCodSolicitud_Ampliacion,
                                            objSolicitudViatico.cCodCeGe,
                                            objSolicitudViatico.cCodPersonal,
                                            objSolicitudViatico.vApeLocadorServicio,
                                            objSolicitudViatico.cCodUbigeo_Origen,
                                            objSolicitudViatico.cCodUbigeo,
                                            objSolicitudViatico.dFechaPartida,
                                            objSolicitudViatico.dFechaRetorno,
                                            objSolicitudViatico.cHoraCompraPasaje_01,
                                            objSolicitudViatico.cHoraCompraPasaje_02,
                                            objSolicitudViatico.fCantidadDias,
                                            objSolicitudViatico.tMotivoViaje,
                                            objSolicitudViatico.cCodFormulacion,
                                            objSolicitudViatico.cCodEmpleado
                                         );

                MSV.cCodSolicitud = Convert.ToString(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                MSV.cCodSolicitud = "";
            }

            return MSV;
        }

        public bool Modifica_SolicitudViatico(Model.SolicitudViatico objSolicitudViatico)
        {



            bool blnResult = false;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_upd_mvto_SolicitudViatico",
                                            objSolicitudViatico.iIdSolicitud,
                                            objSolicitudViatico.cCodSolicitud,
                                            objSolicitudViatico.cCodTipoSolicitud,
                                            objSolicitudViatico.cCodSolicitud_Ampliacion,
                                            objSolicitudViatico.cCodPersonal,
                                            objSolicitudViatico.vApeLocadorServicio,
                                            objSolicitudViatico.cCodUbigeo,
                                            objSolicitudViatico.dFechaPartida,
                                            objSolicitudViatico.dFechaRetorno,
                                            objSolicitudViatico.cHoraCompraPasaje_01,
                                            objSolicitudViatico.cHoraCompraPasaje_02,
                                            objSolicitudViatico.fCantidadDias,
                                            objSolicitudViatico.tMotivoViaje

                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public bool Elimina_SolicitudViatico(string strCodSolicitud)
        {



            bool blnResult;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_del_mvto_SolicitudViatico",
                                            strCodSolicitud
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_SolicitudViatico()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Viatico.spp_lst_mvto_SolicitudViatico"
                                     );

            return ds;
        }
        #endregion

        #region IndicadorImpuesto
        public Model.IndicadorImpuesto Recupera_ctrl_IndicadorImpuesto_Codigo(string strCodIndicadorImpuesto)
        {
            DataTable dt = new DataTable();
            Model.IndicadorImpuesto obj = new Model.IndicadorImpuesto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Viatico.spp_sel_ctrl_IndicadorImpuesto_Codigo", strCodIndicadorImpuesto);

            if (dt.Rows.Count == 0)
            {
                obj.iIdIndicadorImpuesto = 0;
                obj.cCodIndicadorImpuesto = "";
                obj.vNomIndicadorImpuesto = "";

            }
            else
            {
                obj.iIdIndicadorImpuesto = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodIndicadorImpuesto = Convert.ToString(dt.Rows[0][1]);
                obj.vNomIndicadorImpuesto = Convert.ToString(dt.Rows[0][2]);

            }

            return obj;

        }

        public Model.IndicadorImpuesto Recupera_ctrl_IndicadorImpuesto(int intIdIndicadorImpuesto)
        {
            DataTable dt = new DataTable();
            Model.IndicadorImpuesto obj = new Model.IndicadorImpuesto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Viatico.spp_sel_ctrl_IndicadorImpuesto", intIdIndicadorImpuesto);

            if (dt.Rows.Count == 0)
            {
                obj.iIdIndicadorImpuesto = 0;
                obj.cCodIndicadorImpuesto = "";
                obj.vNomIndicadorImpuesto = "";

            }
            else
            {
                obj.iIdIndicadorImpuesto = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodIndicadorImpuesto = Convert.ToString(dt.Rows[0][1]);
                obj.vNomIndicadorImpuesto = Convert.ToString(dt.Rows[0][2]);
            }

            return obj;

        }

        public DataSet Ayuda_ctrl_IndicadorImpuesto()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Viatico.spp_help_ctrl_IndicadorImpuesto"
                                     );

            return ds;
        }

        public DataSet Combo_ctrl_IndicadorImpuesto()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Viatico.spp_cbo_ctrl_IndicadorImpuesto"
                                     );

            return ds;
        }

        public int Graba_ctrl_IndicadorImpuesto(Model.IndicadorImpuesto objIndicadorImpuesto)
        {



            int intIdIndicadorImpuesto;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_ins_ctrl_IndicadorImpuesto",
                                            objIndicadorImpuesto.cCodIndicadorImpuesto,
                                            objIndicadorImpuesto.vNomIndicadorImpuesto
                                         );

                intIdIndicadorImpuesto = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdIndicadorImpuesto = 0;
            }

            return intIdIndicadorImpuesto;
        }

        public int Modifica_ctrl_IndicadorImpuesto(Model.IndicadorImpuesto objIndicadorImpuesto)
        {



            int intIdIndicadorImpuesto;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Vatico.spp_upd_ctrl_IndicadorImpuesto",
                                            objIndicadorImpuesto.iIdIndicadorImpuesto,
                                            objIndicadorImpuesto.cCodIndicadorImpuesto,
                                            objIndicadorImpuesto.vNomIndicadorImpuesto
                                         );

                intIdIndicadorImpuesto = objIndicadorImpuesto.iIdIndicadorImpuesto;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdIndicadorImpuesto = 0;
            }

            return intIdIndicadorImpuesto;
        }

        public bool Elimina_ctrl_IndicadorImpuesto(int intIdIndicadorImpuesto)
        {



            bool blnResult;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_del_ctrl_IndicadorImpuesto",
                                            intIdIndicadorImpuesto
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataTable Lista_ctrl_IndicadorImpuesto()
        {



            DataTable dt = new DataTable();

            dt = SqlHelper.ExecuteDataTable(strConnection,
                                      "Viatico.spp_lst_ctrl_IndicadorImpuesto"
                                     );

            return dt;
        }

        #endregion

        #region SolicitudViatico_OtroGasto
        public Model.SolicitudViatico_OtroGasto Recupera_SolicitudViatico_OtroGasto(int intIdSolicitudViatico_OtroGasto)
        {
            DataTable dt = new DataTable();
            Model.SolicitudViatico_OtroGasto obj = new Model.SolicitudViatico_OtroGasto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Viatico.spp_sel_mvto_SolicitudViatico_OtroGasto", intIdSolicitudViatico_OtroGasto);

            if (dt.Rows.Count > 0)
            {
                obj.iIdSolicitudViatico_OtroGasto = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodPersonal = Convert.ToString(dt.Rows[0][1]);
                obj.cCodSolicitud = Convert.ToString(dt.Rows[0][2]);
                obj.cCodConcepto = Convert.ToString(dt.Rows[0][3]);
                obj.vNomConcepto = Convert.ToString(dt.Rows[0][4]);
                obj.dMonto = Convert.ToDouble(dt.Rows[0][5]);
                obj.dfechaRegistro = Convert.ToDateTime(dt.Rows[0][6]);
            }

            return obj;

        }

        public int Graba_SolicitudViatico_OtroGasto(Model.SolicitudViatico_OtroGasto obj)
        {

            int intIdSolicitudViatico_OtroGasto;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_ins_mvto_SolicitudViatico_OtroGasto",
                                            obj.cCodPersonal,
                                            obj.cCodSolicitud,
                                            obj.cCodConcepto,
                                            obj.dMonto
                                         );

                intIdSolicitudViatico_OtroGasto = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdSolicitudViatico_OtroGasto = 0;
            }

            return intIdSolicitudViatico_OtroGasto;
        }

        public int Modifica_SolicitudViatico_OtroGasto(Model.SolicitudViatico_OtroGasto obj)
        {

            int intIdSolicitudViatico_OtroGasto;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_upd_mvto_SolicitudViatico_OtroGasto",
                                            obj.iIdSolicitudViatico_OtroGasto,
                                            obj.cCodPersonal,
                                            obj.cCodSolicitud,
                                            obj.cCodConcepto,
                                            obj.dMonto

                                         );

                intIdSolicitudViatico_OtroGasto = obj.iIdSolicitudViatico_OtroGasto;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdSolicitudViatico_OtroGasto = 0;
            }

            return intIdSolicitudViatico_OtroGasto;
        }

        public bool Elimina_SolicitudViatico_OtroGasto(int intIdSolicitudViatico_OtroGasto)
        {



            bool blnResult;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_del_mvto_SolicitudViatico_OtroGasto",
                                            intIdSolicitudViatico_OtroGasto
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_SolicitudViatico_OtroGasto(string strCodSolicitud)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Viatico.spp_lst_mvto_SolicitudViatico_OtroGasto",
                                      strCodSolicitud
                                     );

            return ds;
        }

        #endregion

        #region SolicitudViatico_Rendicion
        public Model.SolicitudViatico_Rendicion Recupera_SolicitudViatico_Rendicion(string intIdSolicitudViatico_Rendicion)
        {
            DataTable dt = new DataTable();
            Model.SolicitudViatico_Rendicion obj = new Model.SolicitudViatico_Rendicion();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Viatico.spp_sel_mvto_SolicitudViatico_Rendicion", intIdSolicitudViatico_Rendicion);

            if (dt.Rows.Count > 0)
            {

                obj.iIdSolicitudViatico_Rendicion = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodSolicitud = Convert.ToString(dt.Rows[0][1]);
                obj.cCodConcepto = Convert.ToString(dt.Rows[0][2]);
                obj.vNomConcepto = Convert.ToString(dt.Rows[0][3]);
                obj.dFechaInicio = Convert.ToDateTime(dt.Rows[0][4]);
                obj.dFechaFinal = Convert.ToDateTime(dt.Rows[0][5]);
                obj.cCodProveedor = Convert.ToString(dt.Rows[0][6]);
                obj.vNomProveedor = Convert.ToString(dt.Rows[0][7]);
                obj.cCodClaseDocumento = Convert.ToString(dt.Rows[0][8]);
                obj.vNomClaseDocumento = Convert.ToString(dt.Rows[0][9]);
                obj.cSerieDocumento = Convert.ToString(dt.Rows[0][10]);
                obj.cNumeroDocumento = Convert.ToString(dt.Rows[0][11]);
                obj.cNumeroDocumentoAdicional = Convert.ToString(dt.Rows[0][12]);
                obj.dFechaDocumento = Convert.ToDateTime(dt.Rows[0][13]);
                obj.cCodTipoMoneda = Convert.ToString(dt.Rows[0][14]);
                obj.dImporte = Convert.ToDouble(dt.Rows[0][15]);
                obj.dImpuesto = Convert.ToDouble(dt.Rows[0][16]);
                obj.dOtroImporte = Convert.ToDouble(dt.Rows[0][17]);
                obj.dTotal = Convert.ToDouble(dt.Rows[0][18]);
                obj.cCodCentroCosto = Convert.ToString(dt.Rows[0][19]);
                obj.tObservacion = Convert.ToString(dt.Rows[0][20]);
                obj.dFechaRegistro = Convert.ToString(dt.Rows[0][21]);


            }

            return obj;

        }


        public int Graba_SolicitudViatico_Rendicion(Model.SolicitudViatico_Rendicion objLiquidacionViatico)
        {



            int intIdSolicitudViatico_Rendicion;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_ins_mvto_SolicitudViatico_Rendicion",
                                            objLiquidacionViatico.cCodSolicitud,
                                            objLiquidacionViatico.cCodConcepto,
                                            objLiquidacionViatico.dFechaInicio,
                                            objLiquidacionViatico.dFechaFinal,
                                            objLiquidacionViatico.cCodProveedor,
                                            objLiquidacionViatico.cCodClaseDocumento,
                                            objLiquidacionViatico.cSerieDocumento,
                                            objLiquidacionViatico.cNumeroDocumento,
                                            objLiquidacionViatico.cNumeroDocumentoAdicional,
                                            objLiquidacionViatico.dFechaDocumento,
                                            objLiquidacionViatico.cCodTipoMoneda,
                                            objLiquidacionViatico.dImporte,
                                            objLiquidacionViatico.dOtroImporte,
                                            objLiquidacionViatico.cCodCentroCosto,
                                            objLiquidacionViatico.tObservacion
                                         );

                intIdSolicitudViatico_Rendicion = Convert.ToInt32(dt.Rows[0][0]);
            }
            catch (Exception e)
            {
                e.ToString();
                intIdSolicitudViatico_Rendicion = 0;
            }

            return intIdSolicitudViatico_Rendicion;
        }

        public int Modifica_SolicitudViatico_Rendicion(Model.SolicitudViatico_Rendicion objLiquidacionViatico)
        {



            int intIdSolicitudViatico_Rendicion;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_upd_mvto_SolicitudViatico_Rendicion",
                                            objLiquidacionViatico.iIdSolicitudViatico_Rendicion,
                                            objLiquidacionViatico.cCodSolicitud,
                                            objLiquidacionViatico.cCodConcepto,
                                            objLiquidacionViatico.dFechaInicio,
                                            objLiquidacionViatico.dFechaFinal,
                                            objLiquidacionViatico.cCodProveedor,
                                            objLiquidacionViatico.cCodClaseDocumento,
                                            objLiquidacionViatico.cSerieDocumento,
                                            objLiquidacionViatico.cNumeroDocumento,
                                            objLiquidacionViatico.cNumeroDocumentoAdicional,
                                            objLiquidacionViatico.dFechaDocumento,
                                            objLiquidacionViatico.cCodTipoMoneda,
                                            objLiquidacionViatico.dImporte,
                                            objLiquidacionViatico.dOtroImporte,
                                            objLiquidacionViatico.cCodCentroCosto,
                                            objLiquidacionViatico.tObservacion
                                         );

                intIdSolicitudViatico_Rendicion = objLiquidacionViatico.iIdSolicitudViatico_Rendicion;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdSolicitudViatico_Rendicion = 0;
            }

            return intIdSolicitudViatico_Rendicion;
        }

        public bool Elimina_SolicitudViatico_Rendicion(int intIdSolicitudViatico_Rendicion)
        {



            bool blnResult;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_del_mvto_SolicitudViatico_Rendicion",
                                            intIdSolicitudViatico_Rendicion
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_SolicitudViatico_Rendicion(string strCodSolicitud)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Viatico.spp_lst_mvto_SolicitudViatico_Rendicion",
                                      strCodSolicitud
                                     );

            return ds;
        }

        #endregion

        #region SolicitudViatico_Rendicion_Impuesto
        public Model.SolicitudViatico_Rendicion_Impuesto Recupera_SolicitudViatico_Rendicion_Impuesto(int intIdSolicitudViatico_Rendicion_Impuesto)
        {
            DataTable dt = new DataTable();
            Model.SolicitudViatico_Rendicion_Impuesto obj = new Model.SolicitudViatico_Rendicion_Impuesto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Viatico.spp_sel_mvto_SolicitudViatico_Rendicion_Impuesto", intIdSolicitudViatico_Rendicion_Impuesto);

            if (dt.Rows.Count > 0)
            {
                obj.iIdSolicitudViatico_Rendicion_Impuesto = Convert.ToInt32(dt.Rows[0][0]);
                obj.iIdSolicitudViatico_Rendicion = Convert.ToInt32(dt.Rows[0][1]);
                obj.cCodSolicitud = Convert.ToString(dt.Rows[0][2]);
                obj.cCodIndicadorImpuesto = Convert.ToString(dt.Rows[0][3]);
                obj.vNomIndicadorImpuesto = Convert.ToString(dt.Rows[0][4]);
                obj.dImpuesto = Convert.ToDouble(dt.Rows[0][5]);
            }

            return obj;

        }

        public int Graba_SolicitudViatico_Rendicion_Impuesto(Model.SolicitudViatico_Rendicion_Impuesto obj)
        {

            int intIdSolicitudViatico_Rendicion_Impuesto;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_ins_mvto_SolicitudViatico_Rendicion_Impuesto",
                                            obj.iIdSolicitudViatico_Rendicion,
                                            obj.cCodSolicitud,
                                            obj.cCodIndicadorImpuesto,
                                            obj.dImpuesto
                                         );

                intIdSolicitudViatico_Rendicion_Impuesto = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdSolicitudViatico_Rendicion_Impuesto = 0;
            }

            return intIdSolicitudViatico_Rendicion_Impuesto;
        }

        public int Modifica_SolicitudViatico_Rendicion_Impuesto(Model.SolicitudViatico_Rendicion_Impuesto obj)
        {

            int intIdSolicitudViatico_Rendicion_Impuesto;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_upd_mvto_SolicitudViatico_Rendicion_Impuesto",
                                            obj.iIdSolicitudViatico_Rendicion_Impuesto,
                                            obj.iIdSolicitudViatico_Rendicion,
                                            obj.cCodSolicitud,
                                            obj.cCodIndicadorImpuesto,
                                            obj.dImpuesto

                                         );

                intIdSolicitudViatico_Rendicion_Impuesto = obj.iIdSolicitudViatico_Rendicion_Impuesto;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdSolicitudViatico_Rendicion_Impuesto = 0;
            }

            return intIdSolicitudViatico_Rendicion_Impuesto;
        }

        public bool Elimina_SolicitudViatico_Rendicion_Impuesto(int intIdSolicitudViatico_Rendicion_Impuesto)
        {



            bool blnResult;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_del_mvto_SolicitudViatico_Rendicion_Impuesto",
                                            intIdSolicitudViatico_Rendicion_Impuesto
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_SolicitudViatico_Rendicion_Impuesto(int intIdSolicitudViatico_Rendicion)
        {

            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Viatico.spp_lst_mvto_SolicitudViatico_Rendicion_Impuesto",
                                      intIdSolicitudViatico_Rendicion
                                     );

            return ds;
        }

        #endregion

        #region Concepto
        public Model.Concepto Recupera_msto_Concepto_Codigo(string strCodConcepto)
        {
            DataTable dt = new DataTable();
            Model.Concepto obj = new Model.Concepto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Viatico.spp_sel_msto_Concepto_Codigo", strCodConcepto);

            if (dt.Rows.Count > 0)
            {
                obj.idConcepto = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodConcepto = Convert.ToString(dt.Rows[0][1]);
                obj.vNomConcepto = Convert.ToString(dt.Rows[0][2]);
                obj.cCodTipoConcepto = Convert.ToString(dt.Rows[0][3]);

            }

            return obj;

        }

        public Model.Concepto Recupera_msto_Concepto(int intIdConcepto)
        {
            DataTable dt = new DataTable();
            Model.Concepto obj = new Model.Concepto();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Viatico.spp_sel_msto_Concepto", intIdConcepto);

            if (dt.Rows.Count > 0)
            {
                obj.idConcepto = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodConcepto = Convert.ToString(dt.Rows[0][1]);
                obj.vNomConcepto = Convert.ToString(dt.Rows[0][2]);
                obj.cCodTipoConcepto = Convert.ToString(dt.Rows[0][3]);

            }

            return obj;

        }

        public DataSet Ayuda_msto_Concepto(string strCodTipoConcepto)
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Viatico.spp_help_msto_Concepto",
                                      strCodTipoConcepto
                                     );

            return ds;
        }

        public int Graba_msto_Concepto(Model.Concepto objConcepto)
        {



            int intIdConcepto;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_ins_msto_Concepto",
                                            objConcepto.cCodConcepto,
                                            objConcepto.vNomConcepto,
                                            objConcepto.cCodTipoConcepto
                                         );

                intIdConcepto = Convert.ToInt32(dt.Rows[0][0].ToString());
            }
            catch (Exception e)
            {
                e.ToString();
                intIdConcepto = 0;
            }

            return intIdConcepto;
        }

        public int Modifica_msto_Concepto(Model.Concepto objConcepto)
        {



            int intIdConcepto;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Vatico.spp_upd_msto_Concepto",
                                            objConcepto.idConcepto,
                                            objConcepto.cCodConcepto,
                                            objConcepto.vNomConcepto,
                                            objConcepto.cCodTipoConcepto
                                         );

                intIdConcepto = objConcepto.idConcepto;
            }
            catch (Exception e)
            {
                e.ToString();
                intIdConcepto = 0;
            }

            return intIdConcepto;
        }

        public bool Elimina_msto_Concepto(int intIdConcepto)
        {



            bool blnResult;

            DataTable dt = new DataTable();

            try
            {

                dt = SqlHelper.ExecuteDataTable(strConnection,
                                          "Viatico.spp_del_msto_Concepto",
                                            intIdConcepto
                                         );

                blnResult = true;
            }
            catch (Exception e)
            {
                e.ToString();
                blnResult = false;
            }

            return blnResult;
        }

        public DataSet Lista_msto_Concepto()
        {



            DataSet ds = new DataSet();

            ds = SqlHelper.ExecuteDataset(strConnection,
                                      "Viatico.spp_lst_msto_Concepto"
                                     );

            return ds;
        }

        #endregion

        #region Destino
        public Model.Destino Recupera_msto_Empleado_Destino(string strCodTipoDestinoViaje,
                                                     string strCodEscalaViaje
                                                    )
        {
            DataTable dt = new DataTable();
            Model.Destino obj = new Model.Destino();

            dt = SqlHelper.ExecuteDataTable(strConnection, "Viatico.spp_sel_msto_Empleado_Destino", strCodTipoDestinoViaje, strCodEscalaViaje);

            if (dt.Rows.Count > 0)
            {

                obj.iIdEscalaViaje = Convert.ToInt32(dt.Rows[0][0]);
                obj.cCodTipoDestinoViaje = Convert.ToString(dt.Rows[0][1]);
                obj.vNomTipoDestinoViaje = Convert.ToString(dt.Rows[0][2]);
                obj.cCodEscalaViaje = Convert.ToString(dt.Rows[0][3]);
                obj.vNomEscalaViaje = Convert.ToString(dt.Rows[0][4]);
                obj.fMonto = Convert.ToDouble(dt.Rows[0][5]);


            }

            return obj;

        }

        #endregion

        #endregion
    }
}
